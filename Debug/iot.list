
iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800a1b0  0800a1b0  0001a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a63c  0800a63c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a63c  0800a63c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  200001e8  0800a82c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  0800a82c  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b02  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290e  00000000  00000000  00030d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00034810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019df5  00000000  00000000  00035908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d64  00000000  00000000  0004f6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093546  00000000  00000000  00063461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f69a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  000f69f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a198 	.word	0x0800a198

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a198 	.word	0x0800a198

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_UART_RxCpltCallback+0x5c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d120      	bne.n	8000cf8 <HAL_UART_RxCpltCallback+0x54>
		//HAL_UART_Transmit(&huart1, &buffer_byte, 1, 500);
		buffer[index_buffer] = buffer_byte;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_UART_RxCpltCallback+0x60>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_RxCpltCallback+0x64>)
 8000cbe:	7819      	ldrb	r1, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_UART_RxCpltCallback+0x68>)
 8000cc2:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_UART_RxCpltCallback+0x60>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_UART_RxCpltCallback+0x60>)
 8000cce:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE){
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_UART_RxCpltCallback+0x60>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b1e      	cmp	r3, #30
 8000cd6:	d104      	bne.n	8000ce2 <HAL_UART_RxCpltCallback+0x3e>
			index_buffer = 0;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_UART_RxCpltCallback+0x60>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
			resetBuf();
 8000cde:	f001 f8a9 	bl	8001e34 <resetBuf>
		}
		buffer_flag++;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c>)
 8000cec:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &buffer_byte, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4905      	ldr	r1, [pc, #20]	; (8000d08 <HAL_UART_RxCpltCallback+0x64>)
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <HAL_UART_RxCpltCallback+0x70>)
 8000cf4:	f005 feb9 	bl	8006a6a <HAL_UART_Receive_IT>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013800 	.word	0x40013800
 8000d04:	200006fe 	.word	0x200006fe
 8000d08:	20000700 	.word	0x20000700
 8000d0c:	200006e0 	.word	0x200006e0
 8000d10:	200006ff 	.word	0x200006ff
 8000d14:	2000069c 	.word	0x2000069c

08000d18 <ledToggle>:

void ledToggle(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	4802      	ldr	r0, [pc, #8]	; (8000d28 <ledToggle+0x10>)
 8000d20:	f002 f82e 	bl	8002d80 <HAL_GPIO_TogglePin>
};
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010800 	.word	0x40010800

08000d2c <fsmWrapper>:

void fsmWrapper(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if(buffer_flag > 0){
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <fsmWrapper+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <fsmWrapper+0x1c>
		command_parser_fsm();
 8000d38:	f001 f8f4 	bl	8001f24 <command_parser_fsm>
		buffer_flag--;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <fsmWrapper+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b01      	ldr	r3, [pc, #4]	; (8000d4c <fsmWrapper+0x20>)
 8000d46:	701a      	strb	r2, [r3, #0]
	}
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200006ff 	.word	0x200006ff

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f001 fa16 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f840 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f9c8 	bl	80010f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d60:	f000 f8ca 	bl	8000ef8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d64:	f000 f924 	bl	8000fb0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d68:	f000 f998 	bl	800109c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d6c:	f000 f96c 	bl	8001048 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d70:	f000 f884 	bl	8000e7c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000d74:	f000 f8ee 	bl	8000f54 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &buffer_byte, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4911      	ldr	r1, [pc, #68]	; (8000dc0 <main+0x70>)
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <main+0x74>)
 8000d7e:	f005 fe74 	bl	8006a6a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <main+0x78>)
 8000d84:	f005 f9e8 	bl	8006158 <HAL_TIM_Base_Start_IT>
  initReading();
 8000d88:	f000 fd0e 	bl	80017a8 <initReading>
  /*Add task to scheduler*/
  scanAddr();
 8000d8c:	f000 fd12 	bl	80017b4 <scanAddr>
  SCH_Add_Task(ledToggle, 0, 100);
 8000d90:	2264      	movs	r2, #100	; 0x64
 8000d92:	2100      	movs	r1, #0
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <main+0x7c>)
 8000d96:	f000 fa59 	bl	800124c <SCH_Add_Task>
  SCH_Add_Task(fsmWrapper, 0, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <main+0x80>)
 8000da0:	f000 fa54 	bl	800124c <SCH_Add_Task>
  SCH_Add_Task(uart_communiation_fsm, 0, 200);
 8000da4:	22c8      	movs	r2, #200	; 0xc8
 8000da6:	2100      	movs	r1, #0
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <main+0x84>)
 8000daa:	f000 fa4f 	bl	800124c <SCH_Add_Task>
  SCH_Add_Task(pullSensor,0,100);
 8000dae:	2264      	movs	r2, #100	; 0x64
 8000db0:	2100      	movs	r1, #0
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <main+0x88>)
 8000db4:	f000 fa4a 	bl	800124c <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000db8:	f000 fb38 	bl	800142c <SCH_Dispatch_Tasks>
 8000dbc:	e7fc      	b.n	8000db8 <main+0x68>
 8000dbe:	bf00      	nop
 8000dc0:	20000700 	.word	0x20000700
 8000dc4:	2000069c 	.word	0x2000069c
 8000dc8:	200002dc 	.word	0x200002dc
 8000dcc:	08000d19 	.word	0x08000d19
 8000dd0:	08000d2d 	.word	0x08000d2d
 8000dd4:	08002041 	.word	0x08002041
 8000dd8:	08001795 	.word	0x08001795

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f006 fac0 	bl	8007370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e14:	2310      	movs	r3, #16
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fc79 	bl	8005718 <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e2c:	f000 f9a8 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
 8000e32:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 fee6 	bl	8005c1c <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e56:	f000 f993 	bl	8001180 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 f871 	bl	8005f4c <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e70:	f000 f986 	bl	8001180 <Error_Handler>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	; 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000e8e:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <MX_ADC1_Init+0x78>)
 8000e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000ea6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000eaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000eba:	f001 f9e9 	bl	8002290 <HAL_ADC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ec4:	f000 f95c 	bl	8001180 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_ADC1_Init+0x74>)
 8000eda:	f001 fab1 	bl	8002440 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ee4:	f000 f94c 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000204 	.word	0x20000204
 8000ef4:	40012400 	.word	0x40012400

08000ef8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000efe:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <MX_I2C1_Init+0x54>)
 8000f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f04:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_I2C1_Init+0x58>)
 8000f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_I2C1_Init+0x50>)
 8000f36:	f001 ff3d 	bl	8002db4 <HAL_I2C_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f40:	f000 f91e 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000234 	.word	0x20000234
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	000186a0 	.word	0x000186a0

08000f54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <MX_I2C2_Init+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_I2C2_Init+0x58>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_I2C2_Init+0x50>)
 8000f92:	f001 ff0f 	bl	8002db4 <HAL_I2C_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f000 f8f0 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000288 	.word	0x20000288
 8000fa8:	40005800 	.word	0x40005800
 8000fac:	000186a0 	.word	0x000186a0

08000fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fd6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fe4:	2209      	movs	r2, #9
 8000fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_TIM2_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_TIM2_Init+0x94>)
 8000ff6:	f005 f85f 	bl	80060b8 <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001000:	f000 f8be 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_TIM2_Init+0x94>)
 8001012:	f005 f9fb 	bl	800640c <HAL_TIM_ConfigClockSource>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800101c:	f000 f8b0 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM2_Init+0x94>)
 800102e:	f005 fbcd 	bl	80067cc <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001038:	f000 f8a2 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002dc 	.word	0x200002dc

08001048 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART1_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001080:	f005 fc14 	bl	80068ac <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f000 f879 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000069c 	.word	0x2000069c
 8001098:	40013800 	.word	0x40013800

0800109c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART2_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010d4:	f005 fbea 	bl	80068ac <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 f84f 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000324 	.word	0x20000324
 80010ec:	40004400 	.word	0x40004400

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_GPIO_Init+0x74>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <MX_GPIO_Init+0x74>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_GPIO_Init+0x74>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_GPIO_Init+0x74>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <MX_GPIO_Init+0x74>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_GPIO_Init+0x74>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2120      	movs	r1, #32
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_GPIO_Init+0x78>)
 800113a:	f001 fe09 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800113e:	2320      	movs	r3, #32
 8001140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_GPIO_Init+0x78>)
 8001156:	f001 fc77 	bl	8002a48 <HAL_GPIO_Init>

}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800

0800116c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001174:	f000 f98c 	bl	8001490 <SCH_Update>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>

0800118a <emptyTask>:

unsigned int SCH_Report(){
	return Error_code_G;
}

sTasks emptyTask(){
 800118a:	b4b0      	push	{r4, r5, r7}
 800118c:	b089      	sub	sp, #36	; 0x24
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	sTasks empty;
	empty.Delay = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
	empty.Period = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
	empty.RunMe = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
	empty.TaskID = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
	empty.pTask = 0x0000;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
	return empty;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	461d      	mov	r5, r3
 80011aa:	f107 040c 	add.w	r4, r7, #12
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	602b      	str	r3, [r5, #0]
}
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bcb0      	pop	{r4, r5, r7}
 80011be:	4770      	bx	lr

080011c0 <SCH_shift>:

void SCH_shift(uint8_t pos){
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = current_index_task-1; i > pos; i--){
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <SCH_shift+0x84>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011d4:	e01b      	b.n	800120e <SCH_shift+0x4e>
		SCH_tasks_G[i] = SCH_tasks_G[i-1];
 80011d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80011e0:	4819      	ldr	r0, [pc, #100]	; (8001248 <SCH_shift+0x88>)
 80011e2:	460b      	mov	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4418      	add	r0, r3
 80011ec:	4916      	ldr	r1, [pc, #88]	; (8001248 <SCH_shift+0x88>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	4604      	mov	r4, r0
 80011fa:	461d      	mov	r5, r3
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	6023      	str	r3, [r4, #0]
	for(uint8_t i = current_index_task-1; i > pos; i--){
 8001204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001208:	3b01      	subs	r3, #1
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800120e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8de      	bhi.n	80011d6 <SCH_shift+0x16>
	}
	SCH_tasks_G[pos] = emptyTask();
 8001218:	7ffa      	ldrb	r2, [r7, #31]
 800121a:	490b      	ldr	r1, [pc, #44]	; (8001248 <SCH_shift+0x88>)
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	18cc      	adds	r4, r1, r3
 8001226:	463b      	mov	r3, r7
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffae 	bl	800118a <emptyTask>
 800122e:	4625      	mov	r5, r4
 8001230:	463c      	mov	r4, r7
 8001232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	602b      	str	r3, [r5, #0]
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	2000068c 	.word	0x2000068c
 8001248:	2000036c 	.word	0x2000036c

0800124c <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	sTasks task;
	uint8_t insert_idx = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(current_index_task < SCH_MAX_TASKS){
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <SCH_Add_Task+0x128>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b27      	cmp	r3, #39	; 0x27
 8001264:	f200 8081 	bhi.w	800136a <SCH_Add_Task+0x11e>
		task.pTask = pFunction;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	613b      	str	r3, [r7, #16]
		task.Delay = DELAY;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	617b      	str	r3, [r7, #20]
		task.Period =  PERIOD;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	61bb      	str	r3, [r7, #24]
		task.RunMe = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
		task.TaskID = current_index_task;
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <SCH_Add_Task+0x128>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	623b      	str	r3, [r7, #32]
		if(current_index_task == 0){
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <SCH_Add_Task+0x128>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d121      	bne.n	80012ca <SCH_Add_Task+0x7e>
			SCH_tasks_G[0] = task;
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <SCH_Add_Task+0x12c>)
 8001288:	461d      	mov	r5, r3
 800128a:	f107 0410 	add.w	r4, r7, #16
 800128e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	602b      	str	r3, [r5, #0]
			current_index_task++;
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <SCH_Add_Task+0x128>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <SCH_Add_Task+0x128>)
 80012a0:	701a      	strb	r2, [r3, #0]
			return 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e062      	b.n	800136c <SCH_Add_Task+0x120>
		}
		while(task.Delay > SCH_tasks_G[insert_idx].Delay && insert_idx < current_index_task){
			task.Delay -= SCH_tasks_G[insert_idx].Delay;
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012ac:	4832      	ldr	r0, [pc, #200]	; (8001378 <SCH_Add_Task+0x12c>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4403      	add	r3, r0
 80012b8:	3304      	adds	r3, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1acb      	subs	r3, r1, r3
 80012be:	617b      	str	r3, [r7, #20]
			insert_idx++;
 80012c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c4:	3301      	adds	r3, #1
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(task.Delay > SCH_tasks_G[insert_idx].Delay && insert_idx < current_index_task){
 80012ca:	6979      	ldr	r1, [r7, #20]
 80012cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012d0:	4829      	ldr	r0, [pc, #164]	; (8001378 <SCH_Add_Task+0x12c>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4403      	add	r3, r0
 80012dc:	3304      	adds	r3, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4299      	cmp	r1, r3
 80012e2:	d905      	bls.n	80012f0 <SCH_Add_Task+0xa4>
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <SCH_Add_Task+0x128>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3da      	bcc.n	80012a6 <SCH_Add_Task+0x5a>
		}
		current_index_task++;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <SCH_Add_Task+0x128>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <SCH_Add_Task+0x128>)
 80012fa:	701a      	strb	r2, [r3, #0]
		SCH_shift(insert_idx);
 80012fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <SCH_shift>
		SCH_tasks_G[insert_idx] = task;
 8001306:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800130a:	491b      	ldr	r1, [pc, #108]	; (8001378 <SCH_Add_Task+0x12c>)
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	461d      	mov	r5, r3
 8001318:	f107 0410 	add.w	r4, r7, #16
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	602b      	str	r3, [r5, #0]
		SCH_tasks_G[insert_idx+1].Delay -=  SCH_tasks_G[insert_idx].Delay;
 8001324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	4913      	ldr	r1, [pc, #76]	; (8001378 <SCH_Add_Task+0x12c>)
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	3304      	adds	r3, #4
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <SCH_Add_Task+0x12c>)
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4403      	add	r3, r0
 800134a:	3304      	adds	r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001352:	3201      	adds	r2, #1
 8001354:	1ac9      	subs	r1, r1, r3
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <SCH_Add_Task+0x12c>)
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4403      	add	r3, r0
 8001362:	3304      	adds	r3, #4
 8001364:	6019      	str	r1, [r3, #0]
		return task.TaskID;
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	e000      	b.n	800136c <SCH_Add_Task+0x120>
	}
	return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bdb0      	pop	{r4, r5, r7, pc}
 8001374:	2000068c 	.word	0x2000068c
 8001378:	2000036c 	.word	0x2000036c

0800137c <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 800137c:	b5b0      	push	{r4, r5, r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	61f8      	str	r0, [r7, #28]
	if(SCH_tasks_G[taskID].pTask == 0x0000){
 8001384:	4926      	ldr	r1, [pc, #152]	; (8001420 <SCH_Delete_Task+0xa4>)
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <SCH_Delete_Task+0x22>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SCH_Delete_Task+0xa8>)
 800139a:	2209      	movs	r2, #9
 800139c:	601a      	str	r2, [r3, #0]
	}

	for(unsigned int idx=taskID; idx<current_index_task-1; idx++){
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e017      	b.n	80013d4 <SCH_Delete_Task+0x58>
		SCH_tasks_G[idx] = SCH_tasks_G[idx+1];
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <SCH_Delete_Task+0xa4>)
 80013aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ac:	460b      	mov	r3, r1
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4418      	add	r0, r3
 80013b6:	491a      	ldr	r1, [pc, #104]	; (8001420 <SCH_Delete_Task+0xa4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	4604      	mov	r4, r0
 80013c4:	461d      	mov	r5, r3
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	6023      	str	r3, [r4, #0]
	for(unsigned int idx=taskID; idx<current_index_task-1; idx++){
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	3301      	adds	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <SCH_Delete_Task+0xac>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	461a      	mov	r2, r3
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	4293      	cmp	r3, r2
 80013e0:	d3e0      	bcc.n	80013a4 <SCH_Delete_Task+0x28>
	}
	SCH_tasks_G[current_index_task-1] = emptyTask();
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <SCH_Delete_Task+0xac>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	490d      	ldr	r1, [pc, #52]	; (8001420 <SCH_Delete_Task+0xa4>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	18cc      	adds	r4, r1, r3
 80013f4:	463b      	mov	r3, r7
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fec7 	bl	800118a <emptyTask>
 80013fc:	4625      	mov	r5, r4
 80013fe:	463c      	mov	r4, r7
 8001400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	602b      	str	r3, [r5, #0]
	current_index_task--;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <SCH_Delete_Task+0xac>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SCH_Delete_Task+0xac>)
 8001412:	701a      	strb	r2, [r3, #0]
	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	2000036c 	.word	0x2000036c
 8001424:	20000368 	.word	0x20000368
 8001428:	2000068c 	.word	0x2000068c

0800142c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	while(SCH_tasks_G[0].pTask!=0x0000){
 8001430:	e024      	b.n	800147c <SCH_Dispatch_Tasks+0x50>
		if(SCH_tasks_G[0].RunMe > 0){
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d020      	beq.n	800147c <SCH_Dispatch_Tasks+0x50>
			(*SCH_tasks_G[0].pTask)();
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4798      	blx	r3
			SCH_tasks_G[0].RunMe--;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 8001448:	60d3      	str	r3, [r2, #12]
			if(SCH_tasks_G[1].Delay==0) SCH_tasks_G[1].RunMe++;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <SCH_Dispatch_Tasks+0x30>
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	3301      	adds	r3, #1
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800145a:	6213      	str	r3, [r2, #32]
			if(SCH_tasks_G[0].Period>0) SCH_Add_Task(SCH_tasks_G[0].pTask,
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <SCH_Dispatch_Tasks+0x4a>
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a08      	ldr	r2, [pc, #32]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800146a:	6891      	ldr	r1, [r2, #8]
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800146e:	6892      	ldr	r2, [r2, #8]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff feeb 	bl	800124c <SCH_Add_Task>
										             SCH_tasks_G[0].Period,
													 SCH_tasks_G[0].Period);
			SCH_Delete_Task(0);
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff ff80 	bl	800137c <SCH_Delete_Task>
	while(SCH_tasks_G[0].pTask!=0x0000){
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <SCH_Dispatch_Tasks+0x60>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1d6      	bne.n	8001432 <SCH_Dispatch_Tasks+0x6>
		}
	}
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000036c 	.word	0x2000036c

08001490 <SCH_Update>:

void SCH_Update(void){
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay > 0){
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <SCH_Update+0x40>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <SCH_Update+0x24>
		SCH_tasks_G[0].Delay--;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <SCH_Update+0x40>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <SCH_Update+0x40>)
 80014a4:	6053      	str	r3, [r2, #4]
		passed_time_since_last_task++;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <SCH_Update+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <SCH_Update+0x44>)
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e009      	b.n	80014c8 <SCH_Update+0x38>
	}
	else if(SCH_tasks_G[0].Delay==0){
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SCH_Update+0x40>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <SCH_Update+0x38>
		SCH_tasks_G[0].RunMe++;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SCH_Update+0x40>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <SCH_Update+0x40>)
 80014c4:	60d3      	str	r3, [r2, #12]
		return;
 80014c6:	bf00      	nop
	}
}
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000036c 	.word	0x2000036c
 80014d4:	2000068d 	.word	0x2000068d

080014d8 <getTemp>:
float humidity = 50.5;
int sensorCount = 0;
uint16_t value_x10[2] = {0, 0};
char tempBuf[30];

float getTemp(){
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	return temperature;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <getTemp+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000

080014ec <getHumid>:
float getHumid(){
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	return humidity;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <getHumid+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000004 	.word	0x20000004

08001500 <getSensorStatus>:

int getSensorStatus(){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	return sensorCount;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <getSensorStatus+0x10>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000690 	.word	0x20000690

08001514 <dht20Init>:

void dht20Init(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af02      	add	r7, sp, #8
	//Set register when call a wrong reset
	uint8_t init[3];

	init[0] = 0xA8;
 800151a:	23a8      	movs	r3, #168	; 0xa8
 800151c:	713b      	strb	r3, [r7, #4]
	init[1] = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8001526:	1d3a      	adds	r2, r7, #4
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2303      	movs	r3, #3
 800152e:	2170      	movs	r1, #112	; 0x70
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <dht20Init+0x54>)
 8001532:	f001 fd83 	bl	800303c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001536:	2014      	movs	r0, #20
 8001538:	f000 fe86 	bl	8002248 <HAL_Delay>

	init[0] = 0xBE;
 800153c:	23be      	movs	r3, #190	; 0xbe
 800153e:	713b      	strb	r3, [r7, #4]
	init[1] = 0x08;
 8001540:	2308      	movs	r3, #8
 8001542:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 8001544:	2300      	movs	r3, #0
 8001546:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8001548:	1d3a      	adds	r2, r7, #4
 800154a:	23ff      	movs	r3, #255	; 0xff
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2303      	movs	r3, #3
 8001550:	2170      	movs	r1, #112	; 0x70
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <dht20Init+0x54>)
 8001554:	f001 fd72 	bl	800303c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001558:	2014      	movs	r0, #20
 800155a:	f000 fe75 	bl	8002248 <HAL_Delay>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000234 	.word	0x20000234

0800156c <dht20Reset>:

void dht20Reset(uint8_t regist){
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	//reset register
	uint8_t reset[3], reply[3];

	reset[0] = regist;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	733b      	strb	r3, [r7, #12]
	reset[1] = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	737b      	strb	r3, [r7, #13]
	reset[2] = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	73bb      	strb	r3, [r7, #14]
 	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 8001582:	f107 020c 	add.w	r2, r7, #12
 8001586:	23ff      	movs	r3, #255	; 0xff
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2303      	movs	r3, #3
 800158c:	2170      	movs	r1, #112	; 0x70
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <dht20Reset+0x74>)
 8001590:	f001 fd54 	bl	800303c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fe57 	bl	8002248 <HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) reply, 3, 0xFF);
 800159a:	f107 0208 	add.w	r2, r7, #8
 800159e:	23ff      	movs	r3, #255	; 0xff
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2303      	movs	r3, #3
 80015a4:	2171      	movs	r1, #113	; 0x71
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <dht20Reset+0x74>)
 80015a8:	f001 fe46 	bl	8003238 <HAL_I2C_Master_Receive>
	reset[0] = 0xB0 | regist;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	733b      	strb	r3, [r7, #12]
	reset[1] = reply[1];
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	737b      	strb	r3, [r7, #13]
	reset[2] = reply[2];
 80015ba:	7abb      	ldrb	r3, [r7, #10]
 80015bc:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f000 fe42 	bl	8002248 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	23ff      	movs	r3, #255	; 0xff
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2303      	movs	r3, #3
 80015ce:	2170      	movs	r1, #112	; 0x70
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <dht20Reset+0x74>)
 80015d2:	f001 fd33 	bl	800303c <HAL_I2C_Master_Transmit>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000234 	.word	0x20000234

080015e4 <dht20Start>:
		sensorCount = 0;
	}
	else sensorCount = 1;
}

void dht20Start(void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af02      	add	r7, sp, #8
	//query the DHT20
	uint8_t status[1];
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) status, 1, 0xFF);
 80015ea:	1d3a      	adds	r2, r7, #4
 80015ec:	23ff      	movs	r3, #255	; 0xff
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	2171      	movs	r1, #113	; 0x71
 80015f4:	4813      	ldr	r0, [pc, #76]	; (8001644 <dht20Start+0x60>)
 80015f6:	f001 fe1f 	bl	8003238 <HAL_I2C_Master_Receive>

	if((status[0] & 0x18) != 0x18){
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	f003 0318 	and.w	r3, r3, #24
 8001600:	2b18      	cmp	r3, #24
 8001602:	d008      	beq.n	8001616 <dht20Start+0x32>
		dht20Reset(0x1B);
 8001604:	201b      	movs	r0, #27
 8001606:	f7ff ffb1 	bl	800156c <dht20Reset>
		dht20Reset(0x1C);
 800160a:	201c      	movs	r0, #28
 800160c:	f7ff ffae 	bl	800156c <dht20Reset>
		dht20Reset(0x1E);
 8001610:	201e      	movs	r0, #30
 8001612:	f7ff ffab 	bl	800156c <dht20Reset>
	}

	uint8_t data[3] = {0xAC, 0x33, 0x00};
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <dht20Start+0x64>)
 8001618:	463b      	mov	r3, r7
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	4611      	mov	r1, r2
 800161e:	8019      	strh	r1, [r3, #0]
 8001620:	3302      	adds	r3, #2
 8001622:	0c12      	lsrs	r2, r2, #16
 8001624:	701a      	strb	r2, [r3, #0]

	//HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) trigger, 1, 0xFF);
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) data, 3, 0xFF);
 8001626:	463a      	mov	r2, r7
 8001628:	23ff      	movs	r3, #255	; 0xff
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2303      	movs	r3, #3
 800162e:	2170      	movs	r1, #112	; 0x70
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <dht20Start+0x60>)
 8001632:	f001 fd03 	bl	800303c <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8001636:	2050      	movs	r0, #80	; 0x50
 8001638:	f000 fe06 	bl	8002248 <HAL_Delay>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000234 	.word	0x20000234
 8001648:	0800a1b0 	.word	0x0800a1b0

0800164c <dht20Read>:

void dht20Read(uint16_t* value){
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
	dht20Start();
 8001654:	f7ff ffc6 	bl	80015e4 <dht20Start>
	uint8_t data[7];
	uint32_t Temper = 0, Humid = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) data, 7, 0xFF);
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2307      	movs	r3, #7
 800166a:	2171      	movs	r1, #113	; 0x71
 800166c:	4845      	ldr	r0, [pc, #276]	; (8001784 <dht20Read+0x138>)
 800166e:	f001 fde3 	bl	8003238 <HAL_I2C_Master_Receive>

	//Humid
	Humid = (Humid | data[1]) << 8;
 8001672:	7a7b      	ldrb	r3, [r7, #9]
 8001674:	461a      	mov	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	613b      	str	r3, [r7, #16]
	Humid = (Humid | data[2]) << 8;
 800167e:	7abb      	ldrb	r3, [r7, #10]
 8001680:	461a      	mov	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	613b      	str	r3, [r7, #16]
	Humid = Humid | data[3];
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	461a      	mov	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
	Humid = Humid >> 4;
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	613b      	str	r3, [r7, #16]
    Humid = (Humid * 100 * 10 / 1024 / 1024);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	0d1b      	lsrs	r3, r3, #20
 80016a6:	613b      	str	r3, [r7, #16]
    value[0] = Humid;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	801a      	strh	r2, [r3, #0]
    humidity = value[0]/10 + (value[0]%10)/10;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	4a34      	ldr	r2, [pc, #208]	; (8001788 <dht20Read+0x13c>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	881a      	ldrh	r2, [r3, #0]
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <dht20Read+0x13c>)
 80016c6:	fba3 1302 	umull	r1, r3, r3, r2
 80016ca:	08d9      	lsrs	r1, r3, #3
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <dht20Read+0x13c>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4403      	add	r3, r0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa89 	bl	8000bfc <__aeabi_i2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a27      	ldr	r2, [pc, #156]	; (800178c <dht20Read+0x140>)
 80016ee:	6013      	str	r3, [r2, #0]
	//Temperature
    Temper = (Temper | data[3]) << 8;
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	461a      	mov	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	617b      	str	r3, [r7, #20]
    Temper = (Temper | data[4]) << 8;
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	461a      	mov	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	617b      	str	r3, [r7, #20]
    Temper = Temper | data[5];
 8001708:	7b7b      	ldrb	r3, [r7, #13]
 800170a:	461a      	mov	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
    Temper = Temper & 0xfffff;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001718:	617b      	str	r3, [r7, #20]
    Temper = Temper*200*10/1024/1024 - 500;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	0d1b      	lsrs	r3, r3, #20
 8001726:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800172a:	617b      	str	r3, [r7, #20]
	value[1] = Temper;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3302      	adds	r3, #2
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	b292      	uxth	r2, r2
 8001734:	801a      	strh	r2, [r3, #0]
	temperature = value[1]/10 + (value[1]%10)/10;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3302      	adds	r3, #2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <dht20Read+0x13c>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3302      	adds	r3, #2
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <dht20Read+0x13c>)
 8001750:	fba3 1302 	umull	r1, r3, r3, r2
 8001754:	08d9      	lsrs	r1, r3, #3
 8001756:	460b      	mov	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <dht20Read+0x13c>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	b29b      	uxth	r3, r3
 800176c:	4403      	add	r3, r0
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fa44 	bl	8000bfc <__aeabi_i2f>
 8001774:	4603      	mov	r3, r0
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <dht20Read+0x144>)
 8001778:	6013      	str	r3, [r2, #0]

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000234 	.word	0x20000234
 8001788:	cccccccd 	.word	0xcccccccd
 800178c:	20000004 	.word	0x20000004
 8001790:	20000000 	.word	0x20000000

08001794 <pullSensor>:

void pullSensor(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	dht20Read(&(value_x10[0]));
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <pullSensor+0x10>)
 800179a:	f7ff ff57 	bl	800164c <dht20Read>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000694 	.word	0x20000694

080017a8 <initReading>:

void initReading(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	dht20Init();
 80017ac:	f7ff feb2 	bl	8001514 <dht20Init>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <scanAddr>:

void scanAddr() {
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b098      	sub	sp, #96	; 0x60
 80017b8:	af00      	add	r7, sp, #0
    char info[] = "\n\n Scanning I2C bus...\n\n";
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <scanAddr+0x78>)
 80017bc:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80017c0:	461d      	mov	r5, r3
 80017c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ca:	c403      	stmia	r4!, {r0, r1}
 80017cc:	7022      	strb	r2, [r4, #0]
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80017d4:	e020      	b.n	8001818 <scanAddr+0x64>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80017d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	b299      	uxth	r1, r3
 80017de:	230a      	movs	r3, #10
 80017e0:	2201      	movs	r2, #1
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <scanAddr+0x7c>)
 80017e4:	f001 ff88 	bl	80036f8 <HAL_I2C_IsDeviceReady>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80017ee:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10b      	bne.n	800180e <scanAddr+0x5a>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80017f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80017fa:	1d38      	adds	r0, r7, #4
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <scanAddr+0x80>)
 80017fe:	2140      	movs	r1, #64	; 0x40
 8001800:	f006 fa1e 	bl	8007c40 <sniprintf>
            sensorCount++;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <scanAddr+0x84>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <scanAddr+0x84>)
 800180c:	6013      	str	r3, [r2, #0]
    for(uint16_t i = 0; i < 128; i++) {
 800180e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001812:	3301      	adds	r3, #1
 8001814:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001818:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800181c:	2b7f      	cmp	r3, #127	; 0x7f
 800181e:	d9da      	bls.n	80017d6 <scanAddr+0x22>
        } else {
        }
    }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3760      	adds	r7, #96	; 0x60
 8001826:	46bd      	mov	sp, r7
 8001828:	bdb0      	pop	{r4, r5, r7, pc}
 800182a:	bf00      	nop
 800182c:	0800a1bc 	.word	0x0800a1bc
 8001830:	20000234 	.word	0x20000234
 8001834:	0800a1b4 	.word	0x0800a1b4
 8001838:	20000690 	.word	0x20000690

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_MspInit+0x40>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_MspInit+0x40>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_MspInit+0x40>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_MspInit+0x40>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_MspInit+0x40>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_MspInit+0x40>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <HAL_ADC_MspInit+0x6c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d121      	bne.n	80018e4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d0:	2301      	movs	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_ADC_MspInit+0x74>)
 80018e0:	f001 f8b2 	bl	8002a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012400 	.word	0x40012400
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <HAL_I2C_MspInit+0x104>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13b      	bne.n	8001990 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	482f      	ldr	r0, [pc, #188]	; (8001a04 <HAL_I2C_MspInit+0x10c>)
 8001946:	f001 f87f 	bl	8002a48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_I2C_MspInit+0x110>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001960:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_I2C_MspInit+0x110>)
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 800196c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	201f      	movs	r0, #31
 8001984:	f000 ff6d 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001988:	201f      	movs	r0, #31
 800198a:	f000 ff86 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800198e:	e031      	b.n	80019f4 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_I2C_MspInit+0x114>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12c      	bne.n	80019f4 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6193      	str	r3, [r2, #24]
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	480f      	ldr	r0, [pc, #60]	; (8001a04 <HAL_I2C_MspInit+0x10c>)
 80019c8:	f001 f83e 	bl	8002a48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 80019d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_I2C_MspInit+0x108>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2021      	movs	r0, #33	; 0x21
 80019ea:	f000 ff3a 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019ee:	2021      	movs	r0, #33	; 0x21
 80019f0:	f000 ff53 	bl	800289a <HAL_NVIC_EnableIRQ>
}
 80019f4:	bf00      	nop
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40005400 	.word	0x40005400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40005800 	.word	0x40005800

08001a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a20:	d113      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_TIM_Base_MspInit+0x44>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_TIM_Base_MspInit+0x44>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x44>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	201c      	movs	r0, #28
 8001a40:	f000 ff0f 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a44:	201c      	movs	r0, #28
 8001a46:	f000 ff28 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3f      	ldr	r2, [pc, #252]	; (8001b70 <HAL_UART_MspInit+0x118>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d13a      	bne.n	8001aee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a78:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a37      	ldr	r2, [pc, #220]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	4619      	mov	r1, r3
 8001abc:	482e      	ldr	r0, [pc, #184]	; (8001b78 <HAL_UART_MspInit+0x120>)
 8001abe:	f000 ffc3 	bl	8002a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4828      	ldr	r0, [pc, #160]	; (8001b78 <HAL_UART_MspInit+0x120>)
 8001ad8:	f000 ffb6 	bl	8002a48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2025      	movs	r0, #37	; 0x25
 8001ae2:	f000 febe 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ae6:	2025      	movs	r0, #37	; 0x25
 8001ae8:	f000 fed7 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aec:	e03c      	b.n	8001b68 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d137      	bne.n	8001b68 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	61d3      	str	r3, [r2, #28]
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0x11c>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <HAL_UART_MspInit+0x120>)
 8001b3c:	f000 ff84 	bl	8002a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b40:	2308      	movs	r3, #8
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	4619      	mov	r1, r3
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_UART_MspInit+0x120>)
 8001b54:	f000 ff78 	bl	8002a48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2026      	movs	r0, #38	; 0x26
 8001b5e:	f000 fe80 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b62:	2026      	movs	r0, #38	; 0x26
 8001b64:	f000 fe99 	bl	800289a <HAL_NVIC_EnableIRQ>
}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40004400 	.word	0x40004400

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc6:	f000 fb23 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM2_IRQHandler+0x10>)
 8001bd6:	f004 fb11 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200002dc 	.word	0x200002dc

08001be4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <I2C1_EV_IRQHandler+0x10>)
 8001bea:	f001 feb3 	bl	8003954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000234 	.word	0x20000234

08001bf8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <I2C2_EV_IRQHandler+0x10>)
 8001bfe:	f001 fea9 	bl	8003954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000288 	.word	0x20000288

08001c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <USART1_IRQHandler+0x10>)
 8001c12:	f004 ff5b 	bl	8006acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000069c 	.word	0x2000069c

08001c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <USART2_IRQHandler+0x10>)
 8001c26:	f004 ff51 	bl	8006acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000324 	.word	0x20000324

08001c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return 1;
 8001c38:	2301      	movs	r3, #1
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_kill>:

int _kill(int pid, int sig)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c4c:	f005 fb66 	bl	800731c <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2216      	movs	r2, #22
 8001c54:	601a      	str	r2, [r3, #0]
  return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_exit>:

void _exit (int status)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffe7 	bl	8001c42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c74:	e7fe      	b.n	8001c74 <_exit+0x12>

08001c76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e00a      	b.n	8001c9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c88:	f3af 8000 	nop.w
 8001c8c:	4601      	mov	r1, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbf0      	blt.n	8001c88 <_read+0x12>
  }

  return len;
 8001ca6:	687b      	ldr	r3, [r7, #4]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e009      	b.n	8001cd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf1      	blt.n	8001cc2 <_write+0x12>
  }
  return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_close>:

int _close(int file)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f005 fad0 	bl	800731c <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20005000 	.word	0x20005000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000698 	.word	0x20000698
 8001db0:	20000780 	.word	0x20000780

08001db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <checksumCalc>:

uint32_t checksumResult = 0;
int idx = 0;
int whatToSend = SEND_TEMP;

uint32_t checksumCalc(uint8_t* str, uint32_t n){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	uint32_t result = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<n; i++){
 8001dce:	2300      	movs	r3, #0
 8001dd0:	72fb      	strb	r3, [r7, #11]
 8001dd2:	e00a      	b.n	8001dea <checksumCalc+0x2a>
		result += str[i];
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<n; i++){
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	3301      	adds	r3, #1
 8001de8:	72fb      	strb	r3, [r7, #11]
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d8f0      	bhi.n	8001dd4 <checksumCalc+0x14>
	}
	return result;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <resetCmdBuf>:
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
		str[i] = 0;
	}
}

void resetCmdBuf(){
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	e007      	b.n	8001e1c <resetCmdBuf+0x1c>
		cmd_buffer[i] = 0;
 8001e0c:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <resetCmdBuf+0x30>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b1d      	cmp	r3, #29
 8001e20:	ddf4      	ble.n	8001e0c <resetCmdBuf+0xc>
	}
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000744 	.word	0x20000744

08001e34 <resetBuf>:

void resetBuf(){
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e007      	b.n	8001e50 <resetBuf+0x1c>
		buffer[i] = 0;
 8001e40:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <resetBuf+0x30>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b1d      	cmp	r3, #29
 8001e54:	ddf4      	ble.n	8001e40 <resetBuf+0xc>
	}
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200006e0 	.word	0x200006e0

08001e68 <sendMCUInfo>:

void sendMCUInfo(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	checksumResult = checksumCalc(&(tempStr[0]),
								  sprintf( &(tempStr[0]), "VER:%s:%s", MCU_VER, FIRMWARE_VER));
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <sendMCUInfo+0x48>)
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <sendMCUInfo+0x4c>)
 8001e70:	4911      	ldr	r1, [pc, #68]	; (8001eb8 <sendMCUInfo+0x50>)
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <sendMCUInfo+0x54>)
 8001e74:	f005 ff18 	bl	8007ca8 <siprintf>
 8001e78:	4603      	mov	r3, r0
	checksumResult = checksumCalc(&(tempStr[0]),
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480f      	ldr	r0, [pc, #60]	; (8001ebc <sendMCUInfo+0x54>)
 8001e7e:	f7ff ff9f 	bl	8001dc0 <checksumCalc>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <sendMCUInfo+0x58>)
 8001e86:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, &(str[0]),
					  sprintf( &(str[0]), "!%s:%u#\n", tempStr, checksumResult), 100);
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <sendMCUInfo+0x58>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <sendMCUInfo+0x54>)
 8001e8e:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <sendMCUInfo+0x5c>)
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <sendMCUInfo+0x60>)
 8001e92:	f005 ff09 	bl	8007ca8 <siprintf>
 8001e96:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, &(str[0]),
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <sendMCUInfo+0x60>)
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <sendMCUInfo+0x64>)
 8001ea0:	f004 fd51 	bl	8006946 <HAL_UART_Transmit>
	checksumResult = 0;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <sendMCUInfo+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	0800a1d8 	.word	0x0800a1d8
 8001eb4:	0800a1e0 	.word	0x0800a1e0
 8001eb8:	0800a1f0 	.word	0x0800a1f0
 8001ebc:	20000724 	.word	0x20000724
 8001ec0:	20000764 	.word	0x20000764
 8001ec4:	0800a1fc 	.word	0x0800a1fc
 8001ec8:	20000704 	.word	0x20000704
 8001ecc:	2000069c 	.word	0x2000069c

08001ed0 <sendSensorInfo>:

void sendSensorInfo(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
	char status[8];
	if(getSensorStatus()){
 8001ed6:	f7ff fb13 	bl	8001500 <getSensorStatus>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <sendSensorInfo+0x28>
		sprintf(&(status[0]), "!OK#");
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	490d      	ldr	r1, [pc, #52]	; (8001f18 <sendSensorInfo+0x48>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f005 fedf 	bl	8007ca8 <siprintf>
		HAL_UART_Transmit(&huart1, &(status[0]), 8, 100);
 8001eea:	4639      	mov	r1, r7
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	2208      	movs	r2, #8
 8001ef0:	480a      	ldr	r0, [pc, #40]	; (8001f1c <sendSensorInfo+0x4c>)
 8001ef2:	f004 fd28 	bl	8006946 <HAL_UART_Transmit>
	} else{
		sprintf(&(status[0]), "!ERROR#");
		HAL_UART_Transmit(&huart1, &(status[0]), 8, 100);
	}
}
 8001ef6:	e00a      	b.n	8001f0e <sendSensorInfo+0x3e>
		sprintf(&(status[0]), "!ERROR#");
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4909      	ldr	r1, [pc, #36]	; (8001f20 <sendSensorInfo+0x50>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f005 fed3 	bl	8007ca8 <siprintf>
		HAL_UART_Transmit(&huart1, &(status[0]), 8, 100);
 8001f02:	4639      	mov	r1, r7
 8001f04:	2364      	movs	r3, #100	; 0x64
 8001f06:	2208      	movs	r2, #8
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <sendSensorInfo+0x4c>)
 8001f0a:	f004 fd1c 	bl	8006946 <HAL_UART_Transmit>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800a208 	.word	0x0800a208
 8001f1c:	2000069c 	.word	0x2000069c
 8001f20:	0800a210 	.word	0x0800a210

08001f24 <command_parser_fsm>:

void command_parser_fsm(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
//We collect all char sent to process at once
//Remember to flush buffer using the resetBuf and resetCmdBuf(), or else your buffer
//Will be dirty
	switch(cmd_flag){
 8001f28:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <command_parser_fsm+0x100>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <command_parser_fsm+0x12>
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d00f      	beq.n	8001f54 <command_parser_fsm+0x30>
				resetBuf();
				resetCmdBuf();
			}
			break;
		default:
			break;
 8001f34:	e073      	b.n	800201e <command_parser_fsm+0xfa>
			if (buffer[idx] == '!') {
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <command_parser_fsm+0x104>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	; (800202c <command_parser_fsm+0x108>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	2b21      	cmp	r3, #33	; 0x21
 8001f40:	d16a      	bne.n	8002018 <command_parser_fsm+0xf4>
				idx++;
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <command_parser_fsm+0x104>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a37      	ldr	r2, [pc, #220]	; (8002028 <command_parser_fsm+0x104>)
 8001f4a:	6013      	str	r3, [r2, #0]
				cmd_flag = READING;
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <command_parser_fsm+0x100>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
			break;
 8001f52:	e061      	b.n	8002018 <command_parser_fsm+0xf4>
			if (buffer[idx] != '!' && buffer[idx] != '#'){
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <command_parser_fsm+0x104>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a34      	ldr	r2, [pc, #208]	; (800202c <command_parser_fsm+0x108>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	2b21      	cmp	r3, #33	; 0x21
 8001f5e:	d01a      	beq.n	8001f96 <command_parser_fsm+0x72>
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <command_parser_fsm+0x104>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a31      	ldr	r2, [pc, #196]	; (800202c <command_parser_fsm+0x108>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	2b23      	cmp	r3, #35	; 0x23
 8001f6a:	d014      	beq.n	8001f96 <command_parser_fsm+0x72>
				cmd_buffer[cmd_index] = buffer[idx];
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <command_parser_fsm+0x104>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <command_parser_fsm+0x10c>)
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <command_parser_fsm+0x108>)
 8001f78:	5cd2      	ldrb	r2, [r2, r3]
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <command_parser_fsm+0x110>)
 8001f7c:	545a      	strb	r2, [r3, r1]
				cmd_index++;
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <command_parser_fsm+0x10c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <command_parser_fsm+0x10c>)
 8001f88:	701a      	strb	r2, [r3, #0]
				idx++;
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <command_parser_fsm+0x104>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <command_parser_fsm+0x104>)
 8001f92:	6013      	str	r3, [r2, #0]
			break;
 8001f94:	e042      	b.n	800201c <command_parser_fsm+0xf8>
			else if (buffer[idx] == '!'){
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <command_parser_fsm+0x104>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <command_parser_fsm+0x108>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	2b21      	cmp	r3, #33	; 0x21
 8001fa0:	d106      	bne.n	8001fb0 <command_parser_fsm+0x8c>
				cmd_flag = INIT_UART;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <command_parser_fsm+0x100>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
				idx = 0;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <command_parser_fsm+0x104>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
			break;
 8001fae:	e035      	b.n	800201c <command_parser_fsm+0xf8>
			else if (buffer[idx] == '#'){
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <command_parser_fsm+0x104>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <command_parser_fsm+0x108>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	2b23      	cmp	r3, #35	; 0x23
 8001fba:	d12f      	bne.n	800201c <command_parser_fsm+0xf8>
				cmd_flag = INIT_UART;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <command_parser_fsm+0x100>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
				if (cmd_buffer[0] == 'R') action_flag = SEND;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <command_parser_fsm+0x110>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b52      	cmp	r3, #82	; 0x52
 8001fc8:	d103      	bne.n	8001fd2 <command_parser_fsm+0xae>
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <command_parser_fsm+0x114>)
 8001fcc:	2203      	movs	r2, #3
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e014      	b.n	8001ffc <command_parser_fsm+0xd8>
				else if (cmd_buffer[0] == 'O') action_flag = STOP_SEND;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <command_parser_fsm+0x110>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b4f      	cmp	r3, #79	; 0x4f
 8001fd8:	d103      	bne.n	8001fe2 <command_parser_fsm+0xbe>
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <command_parser_fsm+0x114>)
 8001fdc:	2204      	movs	r2, #4
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e00c      	b.n	8001ffc <command_parser_fsm+0xd8>
				else if (cmd_buffer[0] == 'V') sendMCUInfo();
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <command_parser_fsm+0x110>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b56      	cmp	r3, #86	; 0x56
 8001fe8:	d102      	bne.n	8001ff0 <command_parser_fsm+0xcc>
 8001fea:	f7ff ff3d 	bl	8001e68 <sendMCUInfo>
 8001fee:	e005      	b.n	8001ffc <command_parser_fsm+0xd8>
				else if (cmd_buffer[0] == 'S') sendSensorInfo();
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <command_parser_fsm+0x110>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b53      	cmp	r3, #83	; 0x53
 8001ff6:	d101      	bne.n	8001ffc <command_parser_fsm+0xd8>
 8001ff8:	f7ff ff6a 	bl	8001ed0 <sendSensorInfo>
				index_buffer = 0;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <command_parser_fsm+0x118>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <command_parser_fsm+0x10c>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
				idx = 0;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <command_parser_fsm+0x104>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
				resetBuf();
 800200e:	f7ff ff11 	bl	8001e34 <resetBuf>
				resetCmdBuf();
 8002012:	f7ff fef5 	bl	8001e00 <resetCmdBuf>
			break;
 8002016:	e001      	b.n	800201c <command_parser_fsm+0xf8>
			break;
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <command_parser_fsm+0xfa>
			break;
 800201c:	bf00      	nop
	}
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000763 	.word	0x20000763
 8002028:	20000768 	.word	0x20000768
 800202c:	200006e0 	.word	0x200006e0
 8002030:	20000762 	.word	0x20000762
 8002034:	20000744 	.word	0x20000744
 8002038:	2000000c 	.word	0x2000000c
 800203c:	200006fe 	.word	0x200006fe

08002040 <uart_communiation_fsm>:

void uart_communiation_fsm(){
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af02      	add	r7, sp, #8
	if(action_flag==SEND){
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <uart_communiation_fsm+0xd8>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d15e      	bne.n	800210c <uart_communiation_fsm+0xcc>
		//resetStr();
		if(getSensorStatus()==0){
 800204e:	f7ff fa57 	bl	8001500 <getSensorStatus>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d127      	bne.n	80020a8 <uart_communiation_fsm+0x68>
			checksumResult = checksumCalc(&(tempStr[0]),
										  sprintf( &(tempStr[0]), "ERR:%.2f:%.2f", 0.0, 0.0));
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9cd 2300 	strd	r2, r3, [sp]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	492b      	ldr	r1, [pc, #172]	; (800211c <uart_communiation_fsm+0xdc>)
 800206e:	482c      	ldr	r0, [pc, #176]	; (8002120 <uart_communiation_fsm+0xe0>)
 8002070:	f005 fe1a 	bl	8007ca8 <siprintf>
 8002074:	4603      	mov	r3, r0
			checksumResult = checksumCalc(&(tempStr[0]),
 8002076:	4619      	mov	r1, r3
 8002078:	4829      	ldr	r0, [pc, #164]	; (8002120 <uart_communiation_fsm+0xe0>)
 800207a:	f7ff fea1 	bl	8001dc0 <checksumCalc>
 800207e:	4603      	mov	r3, r0
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <uart_communiation_fsm+0xe4>)
 8002082:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1,
							  &(str[0]), sprintf( &(str[0]), "!%s:%u#\n", tempStr, checksumResult), 100);
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <uart_communiation_fsm+0xe4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <uart_communiation_fsm+0xe0>)
 800208a:	4927      	ldr	r1, [pc, #156]	; (8002128 <uart_communiation_fsm+0xe8>)
 800208c:	4827      	ldr	r0, [pc, #156]	; (800212c <uart_communiation_fsm+0xec>)
 800208e:	f005 fe0b 	bl	8007ca8 <siprintf>
 8002092:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1,
 8002094:	b29a      	uxth	r2, r3
 8002096:	2364      	movs	r3, #100	; 0x64
 8002098:	4924      	ldr	r1, [pc, #144]	; (800212c <uart_communiation_fsm+0xec>)
 800209a:	4825      	ldr	r0, [pc, #148]	; (8002130 <uart_communiation_fsm+0xf0>)
 800209c:	f004 fc53 	bl	8006946 <HAL_UART_Transmit>
			checksumResult = 0;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <uart_communiation_fsm+0xe4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
			return;
 80020a6:	e034      	b.n	8002112 <uart_communiation_fsm+0xd2>
		}
		checksumResult = checksumCalc(&(tempStr[0]),
									  sprintf( &(tempStr[0]), "OK:%.2f:%.2f", getTemp(), getHumid()));
 80020a8:	f7ff fa16 	bl	80014d8 <getTemp>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9ba 	bl	8000428 <__aeabi_f2d>
 80020b4:	4604      	mov	r4, r0
 80020b6:	460d      	mov	r5, r1
 80020b8:	f7ff fa18 	bl	80014ec <getHumid>
 80020bc:	4603      	mov	r3, r0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9b2 	bl	8000428 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	e9cd 2300 	strd	r2, r3, [sp]
 80020cc:	4622      	mov	r2, r4
 80020ce:	462b      	mov	r3, r5
 80020d0:	4918      	ldr	r1, [pc, #96]	; (8002134 <uart_communiation_fsm+0xf4>)
 80020d2:	4813      	ldr	r0, [pc, #76]	; (8002120 <uart_communiation_fsm+0xe0>)
 80020d4:	f005 fde8 	bl	8007ca8 <siprintf>
 80020d8:	4603      	mov	r3, r0
		checksumResult = checksumCalc(&(tempStr[0]),
 80020da:	4619      	mov	r1, r3
 80020dc:	4810      	ldr	r0, [pc, #64]	; (8002120 <uart_communiation_fsm+0xe0>)
 80020de:	f7ff fe6f 	bl	8001dc0 <checksumCalc>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <uart_communiation_fsm+0xe4>)
 80020e6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1,
						  &(str[0]), sprintf( &(str[0]), "!%s:%u#\n", tempStr, checksumResult), 100);
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <uart_communiation_fsm+0xe4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <uart_communiation_fsm+0xe0>)
 80020ee:	490e      	ldr	r1, [pc, #56]	; (8002128 <uart_communiation_fsm+0xe8>)
 80020f0:	480e      	ldr	r0, [pc, #56]	; (800212c <uart_communiation_fsm+0xec>)
 80020f2:	f005 fdd9 	bl	8007ca8 <siprintf>
 80020f6:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1,
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	2364      	movs	r3, #100	; 0x64
 80020fc:	490b      	ldr	r1, [pc, #44]	; (800212c <uart_communiation_fsm+0xec>)
 80020fe:	480c      	ldr	r0, [pc, #48]	; (8002130 <uart_communiation_fsm+0xf0>)
 8002100:	f004 fc21 	bl	8006946 <HAL_UART_Transmit>
		checksumResult = 0;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <uart_communiation_fsm+0xe4>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e002      	b.n	8002112 <uart_communiation_fsm+0xd2>
	}
	else if(action_flag==STOP_SEND){
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <uart_communiation_fsm+0xd8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b04      	cmp	r3, #4
		return;
	}
}
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	bf00      	nop
 8002118:	2000000c 	.word	0x2000000c
 800211c:	0800a218 	.word	0x0800a218
 8002120:	20000724 	.word	0x20000724
 8002124:	20000764 	.word	0x20000764
 8002128:	0800a1fc 	.word	0x0800a1fc
 800212c:	20000704 	.word	0x20000704
 8002130:	2000069c 	.word	0x2000069c
 8002134:	0800a228 	.word	0x0800a228

08002138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213a:	490d      	ldr	r1, [pc, #52]	; (8002170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002150:	4c0a      	ldr	r4, [pc, #40]	; (800217c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800215e:	f7ff fe29 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f005 f8e1 	bl	8007328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002166:	f7fe fdf3 	bl	8000d50 <main>
  bx lr
 800216a:	4770      	bx	lr
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002174:	0800a644 	.word	0x0800a644
  ldr r2, =_sbss
 8002178:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800217c:	20000780 	.word	0x20000780

08002180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC1_2_IRQHandler>
	...

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_Init+0x28>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x28>)
 800218e:	f043 0310 	orr.w	r3, r3, #16
 8002192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 fb59 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219a:	200f      	movs	r0, #15
 800219c:	f000 f808 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a0:	f7ff fb4c 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x54>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fb71 	bl	80028b6 <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f000 fb39 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_InitTick+0x5c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000008 	.word	0x20000008
 8002208:	20000014 	.word	0x20000014
 800220c:	20000010 	.word	0x20000010

08002210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_IncTick+0x1c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_IncTick+0x20>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_IncTick+0x20>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000014 	.word	0x20000014
 8002230:	2000076c 	.word	0x2000076c

08002234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_GetTick+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	2000076c 	.word	0x2000076c

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fff0 	bl	8002234 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffe0 	bl	8002234 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000014 	.word	0x20000014

08002290 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0be      	b.n	8002430 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fad6 	bl	8001880 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f9ab 	bl	8002630 <ADC_ConversionStop_Disable>
 80022da:	4603      	mov	r3, r0
 80022dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8099 	bne.w	800241e <HAL_ADC_Init+0x18e>
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 8095 	bne.w	800241e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022fc:	f023 0302 	bic.w	r3, r3, #2
 8002300:	f043 0202 	orr.w	r2, r3, #2
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002310:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7b1b      	ldrb	r3, [r3, #12]
 8002316:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002318:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002328:	d003      	beq.n	8002332 <HAL_ADC_Init+0xa2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_ADC_Init+0xa8>
 8002332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002336:	e000      	b.n	800233a <HAL_ADC_Init+0xaa>
 8002338:	2300      	movs	r3, #0
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7d1b      	ldrb	r3, [r3, #20]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d119      	bne.n	800237c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7b1b      	ldrb	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	3b01      	subs	r3, #1
 8002356:	035a      	lsls	r2, r3, #13
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	e00b      	b.n	800237c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_ADC_Init+0x1a8>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ac:	d003      	beq.n	80023b6 <HAL_ADC_Init+0x126>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d104      	bne.n	80023c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	051b      	lsls	r3, r3, #20
 80023be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_ADC_Init+0x1ac>)
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d10b      	bne.n	80023fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fa:	e018      	b.n	800242e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f023 0312 	bic.w	r3, r3, #18
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241c:	e007      	b.n	800242e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	ffe1f7fd 	.word	0xffe1f7fd
 800243c:	ff1f0efe 	.word	0xff1f0efe

08002440 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x20>
 800245c:	2302      	movs	r3, #2
 800245e:	e0dc      	b.n	800261a <HAL_ADC_ConfigChannel+0x1da>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d81c      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b05      	subs	r3, #5
 8002482:	221f      	movs	r2, #31
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	4019      	ands	r1, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	3b05      	subs	r3, #5
 800249c:	fa00 f203 	lsl.w	r2, r0, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34
 80024a8:	e03c      	b.n	8002524 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d81c      	bhi.n	80024ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3b23      	subs	r3, #35	; 0x23
 80024c4:	221f      	movs	r2, #31
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4019      	ands	r1, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b23      	subs	r3, #35	; 0x23
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ea:	e01b      	b.n	8002524 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b41      	subs	r3, #65	; 0x41
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	4019      	ands	r1, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	3b41      	subs	r3, #65	; 0x41
 8002518:	fa00 f203 	lsl.w	r2, r0, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d91c      	bls.n	8002566 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	3b1e      	subs	r3, #30
 800253e:	2207      	movs	r2, #7
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	4019      	ands	r1, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6898      	ldr	r0, [r3, #8]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	3b1e      	subs	r3, #30
 8002558:	fa00 f203 	lsl.w	r2, r0, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	e019      	b.n	800259a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6919      	ldr	r1, [r3, #16]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4019      	ands	r1, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6898      	ldr	r0, [r3, #8]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	fa00 f203 	lsl.w	r2, r0, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d003      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025a6:	2b11      	cmp	r3, #17
 80025a8:	d132      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_ADC_ConfigChannel+0x1e4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d125      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d126      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d11a      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_ADC_ConfigChannel+0x1e8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <HAL_ADC_ConfigChannel+0x1ec>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	0c9a      	lsrs	r2, r3, #18
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x1b2>
 80025fe:	e007      	b.n	8002610 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40012400 	.word	0x40012400
 8002628:	20000008 	.word	0x20000008
 800262c:	431bde83 	.word	0x431bde83

08002630 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d12e      	bne.n	80026a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800265a:	f7ff fdeb 	bl	8002234 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002660:	e01b      	b.n	800269a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002662:	f7ff fde7 	bl	8002234 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d914      	bls.n	800269a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10d      	bne.n	800269a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d0dc      	beq.n	8002662 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d0:	4013      	ands	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <__NVIC_GetPriorityGrouping+0x18>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	f003 0307 	and.w	r3, r3, #7
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db0b      	blt.n	8002742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	4906      	ldr	r1, [pc, #24]	; (800274c <__NVIC_EnableIRQ+0x34>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282c:	f7ff ff90 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff2d 	bl	80026b4 <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff42 	bl	80026fc <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff90 	bl	80027a4 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5f 	bl	8002750 <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff35 	bl	8002718 <__NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa2 	bl	8002808 <SysTick_Config>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d008      	beq.n	80028f6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2204      	movs	r2, #4
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e020      	b.n	8002938 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 020e 	bic.w	r2, r2, #14
 8002904:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002936:	7bfb      	ldrb	r3, [r7, #15]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
	...

08002944 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002956:	2b02      	cmp	r3, #2
 8002958:	d005      	beq.n	8002966 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2204      	movs	r2, #4
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	e051      	b.n	8002a0a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 020e 	bic.w	r2, r2, #14
 8002974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_DMA_Abort_IT+0xd0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d029      	beq.n	80029e4 <HAL_DMA_Abort_IT+0xa0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_DMA_Abort_IT+0xd4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_Abort_IT+0x9c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_DMA_Abort_IT+0xd8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01a      	beq.n	80029da <HAL_DMA_Abort_IT+0x96>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_DMA_Abort_IT+0xdc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d012      	beq.n	80029d4 <HAL_DMA_Abort_IT+0x90>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_DMA_Abort_IT+0xe0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00a      	beq.n	80029ce <HAL_DMA_Abort_IT+0x8a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_DMA_Abort_IT+0xe4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d102      	bne.n	80029c8 <HAL_DMA_Abort_IT+0x84>
 80029c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029c6:	e00e      	b.n	80029e6 <HAL_DMA_Abort_IT+0xa2>
 80029c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029cc:	e00b      	b.n	80029e6 <HAL_DMA_Abort_IT+0xa2>
 80029ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d2:	e008      	b.n	80029e6 <HAL_DMA_Abort_IT+0xa2>
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	e005      	b.n	80029e6 <HAL_DMA_Abort_IT+0xa2>
 80029da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029de:	e002      	b.n	80029e6 <HAL_DMA_Abort_IT+0xa2>
 80029e0:	2310      	movs	r3, #16
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_Abort_IT+0xa2>
 80029e4:	2301      	movs	r3, #1
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_DMA_Abort_IT+0xe8>)
 80029e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
    } 
  }
  return status;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40020008 	.word	0x40020008
 8002a18:	4002001c 	.word	0x4002001c
 8002a1c:	40020030 	.word	0x40020030
 8002a20:	40020044 	.word	0x40020044
 8002a24:	40020058 	.word	0x40020058
 8002a28:	4002006c 	.word	0x4002006c
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b08b      	sub	sp, #44	; 0x2c
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5a:	e169      	b.n	8002d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 8158 	bne.w	8002d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a9a      	ldr	r2, [pc, #616]	; (8002ce8 <HAL_GPIO_Init+0x2a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d05e      	beq.n	8002b42 <HAL_GPIO_Init+0xfa>
 8002a84:	4a98      	ldr	r2, [pc, #608]	; (8002ce8 <HAL_GPIO_Init+0x2a0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d875      	bhi.n	8002b76 <HAL_GPIO_Init+0x12e>
 8002a8a:	4a98      	ldr	r2, [pc, #608]	; (8002cec <HAL_GPIO_Init+0x2a4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d058      	beq.n	8002b42 <HAL_GPIO_Init+0xfa>
 8002a90:	4a96      	ldr	r2, [pc, #600]	; (8002cec <HAL_GPIO_Init+0x2a4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d86f      	bhi.n	8002b76 <HAL_GPIO_Init+0x12e>
 8002a96:	4a96      	ldr	r2, [pc, #600]	; (8002cf0 <HAL_GPIO_Init+0x2a8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d052      	beq.n	8002b42 <HAL_GPIO_Init+0xfa>
 8002a9c:	4a94      	ldr	r2, [pc, #592]	; (8002cf0 <HAL_GPIO_Init+0x2a8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d869      	bhi.n	8002b76 <HAL_GPIO_Init+0x12e>
 8002aa2:	4a94      	ldr	r2, [pc, #592]	; (8002cf4 <HAL_GPIO_Init+0x2ac>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d04c      	beq.n	8002b42 <HAL_GPIO_Init+0xfa>
 8002aa8:	4a92      	ldr	r2, [pc, #584]	; (8002cf4 <HAL_GPIO_Init+0x2ac>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d863      	bhi.n	8002b76 <HAL_GPIO_Init+0x12e>
 8002aae:	4a92      	ldr	r2, [pc, #584]	; (8002cf8 <HAL_GPIO_Init+0x2b0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d046      	beq.n	8002b42 <HAL_GPIO_Init+0xfa>
 8002ab4:	4a90      	ldr	r2, [pc, #576]	; (8002cf8 <HAL_GPIO_Init+0x2b0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d85d      	bhi.n	8002b76 <HAL_GPIO_Init+0x12e>
 8002aba:	2b12      	cmp	r3, #18
 8002abc:	d82a      	bhi.n	8002b14 <HAL_GPIO_Init+0xcc>
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d859      	bhi.n	8002b76 <HAL_GPIO_Init+0x12e>
 8002ac2:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <HAL_GPIO_Init+0x80>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002b43 	.word	0x08002b43
 8002acc:	08002b1d 	.word	0x08002b1d
 8002ad0:	08002b2f 	.word	0x08002b2f
 8002ad4:	08002b71 	.word	0x08002b71
 8002ad8:	08002b77 	.word	0x08002b77
 8002adc:	08002b77 	.word	0x08002b77
 8002ae0:	08002b77 	.word	0x08002b77
 8002ae4:	08002b77 	.word	0x08002b77
 8002ae8:	08002b77 	.word	0x08002b77
 8002aec:	08002b77 	.word	0x08002b77
 8002af0:	08002b77 	.word	0x08002b77
 8002af4:	08002b77 	.word	0x08002b77
 8002af8:	08002b77 	.word	0x08002b77
 8002afc:	08002b77 	.word	0x08002b77
 8002b00:	08002b77 	.word	0x08002b77
 8002b04:	08002b77 	.word	0x08002b77
 8002b08:	08002b77 	.word	0x08002b77
 8002b0c:	08002b25 	.word	0x08002b25
 8002b10:	08002b39 	.word	0x08002b39
 8002b14:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <HAL_GPIO_Init+0x2b4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b1a:	e02c      	b.n	8002b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	623b      	str	r3, [r7, #32]
          break;
 8002b22:	e029      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	623b      	str	r3, [r7, #32]
          break;
 8002b2c:	e024      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	3308      	adds	r3, #8
 8002b34:	623b      	str	r3, [r7, #32]
          break;
 8002b36:	e01f      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	623b      	str	r3, [r7, #32]
          break;
 8002b40:	e01a      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	623b      	str	r3, [r7, #32]
          break;
 8002b4e:	e013      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	611a      	str	r2, [r3, #16]
          break;
 8002b62:	e009      	b.n	8002b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b64:	2308      	movs	r3, #8
 8002b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	615a      	str	r2, [r3, #20]
          break;
 8002b6e:	e003      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b70:	2300      	movs	r3, #0
 8002b72:	623b      	str	r3, [r7, #32]
          break;
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_Init+0x130>
          break;
 8002b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2bff      	cmp	r3, #255	; 0xff
 8002b7c:	d801      	bhi.n	8002b82 <HAL_GPIO_Init+0x13a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	e001      	b.n	8002b86 <HAL_GPIO_Init+0x13e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d802      	bhi.n	8002b94 <HAL_GPIO_Init+0x14c>
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	e002      	b.n	8002b9a <HAL_GPIO_Init+0x152>
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	3b08      	subs	r3, #8
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	210f      	movs	r1, #15
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	6a39      	ldr	r1, [r7, #32]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80b1 	beq.w	8002d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_GPIO_Init+0x2b8>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_GPIO_Init+0x2b8>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6193      	str	r3, [r2, #24]
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_GPIO_Init+0x2b8>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002be0:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3302      	adds	r3, #2
 8002be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4013      	ands	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <HAL_GPIO_Init+0x2c0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_GPIO_Init+0x1ec>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_GPIO_Init+0x2c4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00d      	beq.n	8002c30 <HAL_GPIO_Init+0x1e8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3e      	ldr	r2, [pc, #248]	; (8002d10 <HAL_GPIO_Init+0x2c8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <HAL_GPIO_Init+0x1e4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3d      	ldr	r2, [pc, #244]	; (8002d14 <HAL_GPIO_Init+0x2cc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_GPIO_Init+0x1e0>
 8002c24:	2303      	movs	r3, #3
 8002c26:	e006      	b.n	8002c36 <HAL_GPIO_Init+0x1ee>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	e004      	b.n	8002c36 <HAL_GPIO_Init+0x1ee>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0x1ee>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_GPIO_Init+0x1ee>
 8002c34:	2300      	movs	r3, #0
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	f002 0203 	and.w	r2, r2, #3
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	4093      	lsls	r3, r2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c46:	492f      	ldr	r1, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	492c      	ldr	r1, [pc, #176]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	4928      	ldr	r1, [pc, #160]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4922      	ldr	r1, [pc, #136]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	491e      	ldr	r1, [pc, #120]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	4918      	ldr	r1, [pc, #96]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4914      	ldr	r1, [pc, #80]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	490e      	ldr	r1, [pc, #56]	; (8002d18 <HAL_GPIO_Init+0x2d0>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
 8002ce4:	e021      	b.n	8002d2a <HAL_GPIO_Init+0x2e2>
 8002ce6:	bf00      	nop
 8002ce8:	10320000 	.word	0x10320000
 8002cec:	10310000 	.word	0x10310000
 8002cf0:	10220000 	.word	0x10220000
 8002cf4:	10210000 	.word	0x10210000
 8002cf8:	10120000 	.word	0x10120000
 8002cfc:	10110000 	.word	0x10110000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010800 	.word	0x40010800
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	40011000 	.word	0x40011000
 8002d14:	40011400 	.word	0x40011400
 8002d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_GPIO_Init+0x304>)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <HAL_GPIO_Init+0x304>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f47f ae8e 	bne.w	8002a5c <HAL_GPIO_Init+0x14>
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	372c      	adds	r7, #44	; 0x2c
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40010400 	.word	0x40010400

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43d9      	mvns	r1, r3
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	400b      	ands	r3, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	611a      	str	r2, [r3, #16]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fd8c 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f003 f852 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
 800304c:	4613      	mov	r3, r2
 800304e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff f8f0 	bl	8002234 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	f040 80e0 	bne.w	8003224 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	4970      	ldr	r1, [pc, #448]	; (8003230 <HAL_I2C_Master_Transmit+0x1f4>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f002 f92a 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	e0d3      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2C_Master_Transmit+0x50>
 8003088:	2302      	movs	r3, #2
 800308a:	e0cc      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d007      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f001 feec 	bl	8004ed8 <I2C_MasterRequestWrite>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08d      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003120:	e066      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f002 f9a4 	bl	8005474 <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06b      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f002 f994 	bl	80054f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01a      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d194      	bne.n	8003122 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	00100002 	.word	0x00100002
 8003234:	ffff0000 	.word	0xffff0000

08003238 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7fe fff0 	bl	8002234 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	f040 823f 	bne.w	80036e2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2319      	movs	r3, #25
 800326a:	2201      	movs	r2, #1
 800326c:	497f      	ldr	r1, [pc, #508]	; (800346c <HAL_I2C_Master_Receive+0x234>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f002 f82a 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
 800327c:	e232      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2C_Master_Receive+0x54>
 8003288:	2302      	movs	r3, #2
 800328a:	e22b      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d007      	beq.n	80032b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2222      	movs	r2, #34	; 0x22
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2210      	movs	r2, #16
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a5f      	ldr	r2, [pc, #380]	; (8003470 <HAL_I2C_Master_Receive+0x238>)
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f001 fe6e 	bl	8004fdc <I2C_MasterRequestRead>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e1ec      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d113      	bne.n	800333a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e1c0      	b.n	80036bc <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b01      	cmp	r3, #1
 8003340:	d11e      	bne.n	8003380 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003352:	b672      	cpsid	i
}
 8003354:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800337c:	b662      	cpsie	i
}
 800337e:	e035      	b.n	80033ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b02      	cmp	r3, #2
 8003386:	d11e      	bne.n	80033c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003396:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003398:	b672      	cpsid	i
}
 800339a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033c2:	b662      	cpsie	i
}
 80033c4:	e012      	b.n	80033ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033ec:	e166      	b.n	80036bc <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	f200 811f 	bhi.w	8003636 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d123      	bne.n	8003448 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f002 f8e9 	bl	80055dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e167      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003446:	e139      	b.n	80036bc <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	2b02      	cmp	r3, #2
 800344e:	d152      	bne.n	80034f6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	2200      	movs	r2, #0
 8003458:	4906      	ldr	r1, [pc, #24]	; (8003474 <HAL_I2C_Master_Receive+0x23c>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f001 ff34 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e13c      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
 800346a:	bf00      	nop
 800346c:	00100002 	.word	0x00100002
 8003470:	ffff0000 	.word	0xffff0000
 8003474:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003478:	b672      	cpsid	i
}
 800347a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034be:	b662      	cpsie	i
}
 80034c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f4:	e0e2      	b.n	80036bc <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	2200      	movs	r2, #0
 80034fe:	497b      	ldr	r1, [pc, #492]	; (80036ec <HAL_I2C_Master_Receive+0x4b4>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f001 fee1 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0e9      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003520:	b672      	cpsid	i
}
 8003522:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003556:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_I2C_Master_Receive+0x4b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	08db      	lsrs	r3, r3, #3
 800355c:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_I2C_Master_Receive+0x4bc>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0a1a      	lsrs	r2, r3, #8
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00da      	lsls	r2, r3, #3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	3b01      	subs	r3, #1
 8003574:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d118      	bne.n	80035ae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800359e:	b662      	cpsie	i
}
 80035a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e09a      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d1d9      	bne.n	8003570 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035fe:	b662      	cpsie	i
}
 8003600:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003634:	e042      	b.n	80036bc <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f001 ffce 	bl	80055dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e04c      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d118      	bne.n	80036bc <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f47f ae94 	bne.w	80033ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	00010004 	.word	0x00010004
 80036f0:	20000008 	.word	0x20000008
 80036f4:	14f8b589 	.word	0x14f8b589

080036f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	460b      	mov	r3, r1
 8003706:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7fe fd94 	bl	8002234 <HAL_GetTick>
 800370c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800370e:	2301      	movs	r3, #1
 8003710:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	f040 8111 	bne.w	8003942 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2319      	movs	r3, #25
 8003726:	2201      	movs	r2, #1
 8003728:	4988      	ldr	r1, [pc, #544]	; (800394c <HAL_I2C_IsDeviceReady+0x254>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f001 fdcc 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	e104      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_I2C_IsDeviceReady+0x50>
 8003744:	2302      	movs	r3, #2
 8003746:	e0fd      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d007      	beq.n	800376e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2224      	movs	r2, #36	; 0x24
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a70      	ldr	r2, [pc, #448]	; (8003950 <HAL_I2C_IsDeviceReady+0x258>)
 8003790:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f001 fd8a 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c8:	d103      	bne.n	80037d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0b6      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fd25 	bl	8002234 <HAL_GetTick>
 80037ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800381a:	e025      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800381c:	f7fe fd0a 	bl	8002234 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <HAL_I2C_IsDeviceReady+0x13a>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	22a0      	movs	r2, #160	; 0xa0
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2ba0      	cmp	r3, #160	; 0xa0
 8003872:	d005      	beq.n	8003880 <HAL_I2C_IsDeviceReady+0x188>
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_I2C_IsDeviceReady+0x188>
 800387a:	7dbb      	ldrb	r3, [r7, #22]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0cd      	beq.n	800381c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d129      	bne.n	80038ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2319      	movs	r3, #25
 80038c2:	2201      	movs	r2, #1
 80038c4:	4921      	ldr	r1, [pc, #132]	; (800394c <HAL_I2C_IsDeviceReady+0x254>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f001 fcfe 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e036      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e02c      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003902:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2319      	movs	r3, #25
 800390a:	2201      	movs	r2, #1
 800390c:	490f      	ldr	r1, [pc, #60]	; (800394c <HAL_I2C_IsDeviceReady+0x254>)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f001 fcda 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e012      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	3301      	adds	r3, #1
 8003922:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	f4ff af32 	bcc.w	8003792 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000

08003954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003974:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b10      	cmp	r3, #16
 8003982:	d003      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x38>
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	f040 80c1 	bne.w	8003b0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039ac:	d003      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x62>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_EV_IRQHandler+0x66>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_I2C_EV_IRQHandler+0x68>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f000 8132 	beq.w	8003c26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00c      	beq.n	80039e6 <HAL_I2C_EV_IRQHandler+0x92>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	0a5b      	lsrs	r3, r3, #9
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f001 fe83 	bl	80056e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fcc8 	bl	8004374 <I2C_Master_SB>
 80039e4:	e092      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	08db      	lsrs	r3, r3, #3
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_I2C_EV_IRQHandler+0xb2>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	0a5b      	lsrs	r3, r3, #9
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fd3d 	bl	800447e <I2C_Master_ADD10>
 8003a04:	e082      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0xd2>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0a5b      	lsrs	r3, r3, #9
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fd56 	bl	80044d0 <I2C_Master_ADDR>
 8003a24:	e072      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03b      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a40:	f000 80f3 	beq.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00f      	beq.n	8003a70 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f942 	bl	8003cf2 <I2C_MasterTransmit_TXE>
 8003a6e:	e04d      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80d6 	beq.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	0a5b      	lsrs	r3, r3, #9
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80cf 	beq.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	2b21      	cmp	r3, #33	; 0x21
 8003a90:	d103      	bne.n	8003a9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9c9 	bl	8003e2a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a98:	e0c7      	b.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	f040 80c4 	bne.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa37 	bl	8003f16 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa8:	e0bf      	b.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab8:	f000 80b7 	beq.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00f      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x194>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x194>
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 faac 	bl	800403e <I2C_MasterReceive_RXNE>
 8003ae6:	e011      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 809a 	beq.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	0a5b      	lsrs	r3, r3, #9
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8093 	beq.w	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb4b 	bl	80041a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0a:	e08e      	b.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b0c:	e08d      	b.n	8003c2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e007      	b.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_I2C_EV_IRQHandler+0x20e>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	0a5b      	lsrs	r3, r3, #9
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 ff0f 	bl	800497e <I2C_Slave_ADDR>
 8003b60:	e066      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x22e>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	0a5b      	lsrs	r3, r3, #9
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 ff4a 	bl	8004a14 <I2C_Slave_STOPF>
 8003b80:	e056      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b82:	7bbb      	ldrb	r3, [r7, #14]
 8003b84:	2b21      	cmp	r3, #33	; 0x21
 8003b86:	d002      	beq.n	8003b8e <HAL_I2C_EV_IRQHandler+0x23a>
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	2b29      	cmp	r3, #41	; 0x29
 8003b8c:	d125      	bne.n	8003bda <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	09db      	lsrs	r3, r3, #7
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00f      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x266>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	0a9b      	lsrs	r3, r3, #10
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x266>
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fe27 	bl	8004806 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bb8:	e039      	b.n	8003c2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d033      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0x2da>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02d      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fe54 	bl	8004880 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bd8:	e029      	b.n	8003c2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00f      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0a9b      	lsrs	r3, r3, #10
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fe5e 	bl	80048c0 <I2C_SlaveReceive_RXNE>
 8003c04:	e014      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	0a5b      	lsrs	r3, r3, #9
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fe8c 	bl	800493c <I2C_SlaveReceive_BTF>
 8003c24:	e004      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003c26:	bf00      	nop
 8003c28:	e002      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d08:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d150      	bne.n	8003dba <I2C_MasterTransmit_TXE+0xc8>
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2b21      	cmp	r3, #33	; 0x21
 8003d1c:	d14d      	bne.n	8003dba <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d01d      	beq.n	8003d60 <I2C_MasterTransmit_TXE+0x6e>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d01a      	beq.n	8003d60 <I2C_MasterTransmit_TXE+0x6e>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d30:	d016      	beq.n	8003d60 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d40:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2211      	movs	r2, #17
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff6c 	bl	8003c36 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d5e:	e060      	b.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d6e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d107      	bne.n	8003daa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff81 	bl	8003caa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003da8:	e03b      	b.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ff3f 	bl	8003c36 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003db8:	e033      	b.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b21      	cmp	r3, #33	; 0x21
 8003dbe:	d005      	beq.n	8003dcc <I2C_MasterTransmit_TXE+0xda>
 8003dc0:	7bbb      	ldrb	r3, [r7, #14]
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d12d      	bne.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b22      	cmp	r3, #34	; 0x22
 8003dca:	d12a      	bne.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003de6:	e01c      	b.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d103      	bne.n	8003dfc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f88e 	bl	8003f16 <I2C_MemoryTransmit_TXE_BTF>
}
 8003dfa:	e012      	b.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e20:	e7ff      	b.n	8003e22 <I2C_MasterTransmit_TXE+0x130>
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b21      	cmp	r3, #33	; 0x21
 8003e42:	d164      	bne.n	8003f0e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e72:	e04c      	b.n	8003f0e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d01d      	beq.n	8003eb6 <I2C_MasterTransmit_BTF+0x8c>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d01a      	beq.n	8003eb6 <I2C_MasterTransmit_BTF+0x8c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e86:	d016      	beq.n	8003eb6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e96:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2211      	movs	r2, #17
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fec1 	bl	8003c36 <HAL_I2C_MasterTxCpltCallback>
}
 8003eb4:	e02b      	b.n	8003f0e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ec4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d107      	bne.n	8003f00 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fed6 	bl	8003caa <HAL_I2C_MemTxCpltCallback>
}
 8003efe:	e006      	b.n	8003f0e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fe94 	bl	8003c36 <HAL_I2C_MasterTxCpltCallback>
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11d      	bne.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10b      	bne.n	8003f4e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003f4c:	e073      	b.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	121b      	asrs	r3, r3, #8
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f68:	e065      	b.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10b      	bne.n	8003f8a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f88:	e055      	b.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d151      	bne.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b22      	cmp	r3, #34	; 0x22
 8003f96:	d10d      	bne.n	8003fb4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fb2:	e040      	b.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d015      	beq.n	8003fea <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b21      	cmp	r3, #33	; 0x21
 8003fc2:	d112      	bne.n	8003fea <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fe8:	e025      	b.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d120      	bne.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b21      	cmp	r3, #33	; 0x21
 8003ff8:	d11d      	bne.n	8004036 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004008:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004018:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fe3a 	bl	8003caa <HAL_I2C_MemTxCpltCallback>
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b22      	cmp	r3, #34	; 0x22
 8004050:	f040 80a2 	bne.w	8004198 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d921      	bls.n	80040a6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b03      	cmp	r3, #3
 8004090:	f040 8082 	bne.w	8004198 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80040a4:	e078      	b.n	8004198 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d074      	beq.n	8004198 <I2C_MasterReceive_RXNE+0x15a>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <I2C_MasterReceive_RXNE+0x7c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d16e      	bne.n	8004198 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 fa5c 	bl	8005578 <I2C_WaitOnSTOPRequestThroughIT>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d142      	bne.n	800414c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d10a      	bne.n	8004136 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fdc4 	bl	8003cbc <HAL_I2C_MemRxCpltCallback>
}
 8004134:	e030      	b.n	8004198 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2212      	movs	r2, #18
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fd7f 	bl	8003c48 <HAL_I2C_MasterRxCpltCallback>
}
 800414a:	e025      	b.n	8004198 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800415a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fd9b 	bl	8003cce <HAL_I2C_ErrorCallback>
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11b      	bne.n	80041f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041ee:	e0bd      	b.n	800436c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d129      	bne.n	800424e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004208:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d00a      	beq.n	8004226 <I2C_MasterReceive_BTF+0x86>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d007      	beq.n	8004226 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004224:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800424c:	e08e      	b.n	800436c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d176      	bne.n	8004346 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d002      	beq.n	8004264 <I2C_MasterReceive_BTF+0xc4>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b10      	cmp	r3, #16
 8004262:	d108      	bne.n	8004276 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e019      	b.n	80042aa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b04      	cmp	r3, #4
 800427a:	d002      	beq.n	8004282 <I2C_MasterReceive_BTF+0xe2>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d108      	bne.n	8004294 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e00a      	b.n	80042aa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b10      	cmp	r3, #16
 8004298:	d007      	beq.n	80042aa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004304:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d10a      	bne.n	8004330 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fcc7 	bl	8003cbc <HAL_I2C_MemRxCpltCallback>
}
 800432e:	e01d      	b.n	800436c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2212      	movs	r2, #18
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fc82 	bl	8003c48 <HAL_I2C_MasterRxCpltCallback>
}
 8004344:	e012      	b.n	800436c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d117      	bne.n	80043b8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043a2:	e067      	b.n	8004474 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	611a      	str	r2, [r3, #16]
}
 80043b6:	e05d      	b.n	8004474 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c0:	d133      	bne.n	800442a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b21      	cmp	r3, #33	; 0x21
 80043cc:	d109      	bne.n	80043e2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	e008      	b.n	80043f4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <I2C_Master_SB+0x92>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <I2C_Master_SB+0x100>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02d      	beq.n	8004474 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]
}
 8004428:	e024      	b.n	8004474 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10e      	bne.n	8004450 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	b29b      	uxth	r3, r3
 8004438:	11db      	asrs	r3, r3, #7
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 0306 	and.w	r3, r3, #6
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f063 030f 	orn	r3, r3, #15
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	611a      	str	r2, [r3, #16]
}
 800444e:	e011      	b.n	8004474 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	2b01      	cmp	r3, #1
 8004456:	d10d      	bne.n	8004474 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	b29b      	uxth	r3, r3
 800445e:	11db      	asrs	r3, r3, #7
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0306 	and.w	r3, r3, #6
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f063 030e 	orn	r3, r3, #14
 800446c:	b2da      	uxtb	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	b2da      	uxtb	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <I2C_Master_ADD10+0x26>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d108      	bne.n	80044b6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <I2C_Master_ADD10+0x48>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c4:	605a      	str	r2, [r3, #4]
  }
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b091      	sub	sp, #68	; 0x44
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b22      	cmp	r3, #34	; 0x22
 80044f8:	f040 8174 	bne.w	80047e4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <I2C_Master_ADDR+0x54>
 8004504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d10b      	bne.n	8004524 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450c:	2300      	movs	r3, #0
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	e16b      	b.n	80047fc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11d      	bne.n	8004568 <I2C_Master_ADDR+0x98>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004534:	d118      	bne.n	8004568 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	651a      	str	r2, [r3, #80]	; 0x50
 8004566:	e149      	b.n	80047fc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d113      	bne.n	800459a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004572:	2300      	movs	r3, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e120      	b.n	80047dc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	f040 808a 	bne.w	80046ba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ac:	d137      	bne.n	800461e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045bc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045cc:	d113      	bne.n	80045f6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045dc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	e0f2      	b.n	80047dc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	623b      	str	r3, [r7, #32]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e0de      	b.n	80047dc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b08      	cmp	r3, #8
 8004622:	d02e      	beq.n	8004682 <I2C_Master_ADDR+0x1b2>
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	2b20      	cmp	r3, #32
 8004628:	d02b      	beq.n	8004682 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	2b12      	cmp	r3, #18
 800462e:	d102      	bne.n	8004636 <I2C_Master_ADDR+0x166>
 8004630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004632:	2b01      	cmp	r3, #1
 8004634:	d125      	bne.n	8004682 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	2b04      	cmp	r3, #4
 800463a:	d00e      	beq.n	800465a <I2C_Master_ADDR+0x18a>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	2b02      	cmp	r3, #2
 8004640:	d00b      	beq.n	800465a <I2C_Master_ADDR+0x18a>
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b10      	cmp	r3, #16
 8004646:	d008      	beq.n	800465a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e007      	b.n	800466a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004668:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	e0ac      	b.n	80047dc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e090      	b.n	80047dc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d158      	bne.n	8004776 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d021      	beq.n	800470e <I2C_Master_ADDR+0x23e>
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d01e      	beq.n	800470e <I2C_Master_ADDR+0x23e>
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d01b      	beq.n	800470e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e012      	b.n	8004734 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800471c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004742:	d14b      	bne.n	80047dc <I2C_Master_ADDR+0x30c>
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800474a:	d00b      	beq.n	8004764 <I2C_Master_ADDR+0x294>
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	2b01      	cmp	r3, #1
 8004750:	d008      	beq.n	8004764 <I2C_Master_ADDR+0x294>
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	2b08      	cmp	r3, #8
 8004756:	d005      	beq.n	8004764 <I2C_Master_ADDR+0x294>
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	2b10      	cmp	r3, #16
 800475c:	d002      	beq.n	8004764 <I2C_Master_ADDR+0x294>
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	2b20      	cmp	r3, #32
 8004762:	d13b      	bne.n	80047dc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	e032      	b.n	80047dc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004784:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d117      	bne.n	80047c6 <I2C_Master_ADDR+0x2f6>
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800479c:	d00b      	beq.n	80047b6 <I2C_Master_ADDR+0x2e6>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d008      	beq.n	80047b6 <I2C_Master_ADDR+0x2e6>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d005      	beq.n	80047b6 <I2C_Master_ADDR+0x2e6>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d002      	beq.n	80047b6 <I2C_Master_ADDR+0x2e6>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d107      	bne.n	80047c6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047e2:	e00b      	b.n	80047fc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
}
 80047fa:	e7ff      	b.n	80047fc <I2C_Master_ADDR+0x32c>
 80047fc:	bf00      	nop
 80047fe:	3744      	adds	r7, #68	; 0x44
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02b      	beq.n	8004878 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d114      	bne.n	8004878 <I2C_SlaveTransmit_TXE+0x72>
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b29      	cmp	r3, #41	; 0x29
 8004852:	d111      	bne.n	8004878 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004862:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2221      	movs	r2, #33	; 0x21
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2228      	movs	r2, #40	; 0x28
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff f9f1 	bl	8003c5a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d011      	beq.n	80048b6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02c      	beq.n	8004934 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d114      	bne.n	8004934 <I2C_SlaveReceive_RXNE+0x74>
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b2a      	cmp	r3, #42	; 0x2a
 800490e:	d111      	bne.n	8004934 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2222      	movs	r2, #34	; 0x22
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2228      	movs	r2, #40	; 0x28
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff f99c 	bl	8003c6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d012      	beq.n	8004974 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d127      	bne.n	80049ec <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049aa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	09db      	lsrs	r3, r3, #7
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	81bb      	strh	r3, [r7, #12]
 80049ce:	e002      	b.n	80049d6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049de:	89ba      	ldrh	r2, [r7, #12]
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff f94a 	bl	8003c7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049ea:	e00e      	b.n	8004a0a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a70:	d172      	bne.n	8004b58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b22      	cmp	r3, #34	; 0x22
 8004a76:	d002      	beq.n	8004a7e <I2C_Slave_STOPF+0x6a>
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7c:	d135      	bne.n	8004aea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0204 	orr.w	r2, r3, #4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd ffba 	bl	8002a30 <HAL_DMA_GetState>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d049      	beq.n	8004b56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	4a69      	ldr	r2, [pc, #420]	; (8004c6c <I2C_Slave_STOPF+0x258>)
 8004ac8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd ff38 	bl	8002944 <HAL_DMA_Abort_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d03d      	beq.n	8004b56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae8:	e035      	b.n	8004b56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0204 	orr.w	r2, r3, #4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd ff84 	bl	8002a30 <HAL_DMA_GetState>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d014      	beq.n	8004b58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	4a4e      	ldr	r2, [pc, #312]	; (8004c6c <I2C_Slave_STOPF+0x258>)
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd ff02 	bl	8002944 <HAL_DMA_Abort_IT>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b50:	4610      	mov	r0, r2
 8004b52:	4798      	blx	r3
 8004b54:	e000      	b.n	8004b58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d03e      	beq.n	8004be0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d112      	bne.n	8004b96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d112      	bne.n	8004bca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	f043 0204 	orr.w	r2, r3, #4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f843 	bl	8004c74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bee:	e039      	b.n	8004c64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf4:	d109      	bne.n	8004c0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2228      	movs	r2, #40	; 0x28
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff f831 	bl	8003c6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b28      	cmp	r3, #40	; 0x28
 8004c14:	d111      	bne.n	8004c3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <I2C_Slave_STOPF+0x25c>)
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff f830 	bl	8003c98 <HAL_I2C_ListenCpltCallback>
}
 8004c38:	e014      	b.n	8004c64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	2b22      	cmp	r3, #34	; 0x22
 8004c40:	d002      	beq.n	8004c48 <I2C_Slave_STOPF+0x234>
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b22      	cmp	r3, #34	; 0x22
 8004c46:	d10d      	bne.n	8004c64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff f804 	bl	8003c6c <HAL_I2C_SlaveRxCpltCallback>
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	08005179 	.word	0x08005179
 8004c70:	ffff0000 	.word	0xffff0000

08004c74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d002      	beq.n	8004c98 <I2C_ITError+0x24>
 8004c92:	7bbb      	ldrb	r3, [r7, #14]
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d10a      	bne.n	8004cae <I2C_ITError+0x3a>
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b22      	cmp	r3, #34	; 0x22
 8004c9c:	d107      	bne.n	8004cae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cb4:	2b28      	cmp	r3, #40	; 0x28
 8004cb6:	d107      	bne.n	8004cc8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2228      	movs	r2, #40	; 0x28
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cc6:	e015      	b.n	8004cf4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd6:	d00a      	beq.n	8004cee <I2C_ITError+0x7a>
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b60      	cmp	r3, #96	; 0x60
 8004cdc:	d007      	beq.n	8004cee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d02:	d161      	bne.n	8004dc8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d020      	beq.n	8004d62 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	4a6a      	ldr	r2, [pc, #424]	; (8004ed0 <I2C_ITError+0x25c>)
 8004d26:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fd fe09 	bl	8002944 <HAL_DMA_Abort_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8089 	beq.w	8004e4c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
 8004d60:	e074      	b.n	8004e4c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	4a5a      	ldr	r2, [pc, #360]	; (8004ed0 <I2C_ITError+0x25c>)
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fde8 	bl	8002944 <HAL_DMA_Abort_IT>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d068      	beq.n	8004e4c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d10b      	bne.n	8004da0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4798      	blx	r3
 8004dc6:	e041      	b.n	8004e4c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b60      	cmp	r3, #96	; 0x60
 8004dd2:	d125      	bne.n	8004e20 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d10b      	bne.n	8004e08 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fe ff61 	bl	8003ce0 <HAL_I2C_AbortCpltCallback>
 8004e1e:	e015      	b.n	8004e4c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d10b      	bne.n	8004e46 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fe ff41 	bl	8003cce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10e      	bne.n	8004e7a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e88:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d113      	bne.n	8004ec6 <I2C_ITError+0x252>
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b28      	cmp	r3, #40	; 0x28
 8004ea2:	d110      	bne.n	8004ec6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <I2C_ITError+0x260>)
 8004ea8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fe fee9 	bl	8003c98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	08005179 	.word	0x08005179
 8004ed4:	ffff0000 	.word	0xffff0000

08004ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d006      	beq.n	8004f02 <I2C_MasterRequestWrite+0x2a>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d003      	beq.n	8004f02 <I2C_MasterRequestWrite+0x2a>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f00:	d108      	bne.n	8004f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00b      	b.n	8004f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	2b12      	cmp	r3, #18
 8004f1a:	d107      	bne.n	8004f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f9c5 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d103      	bne.n	8004f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e035      	b.n	8004fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f68:	d108      	bne.n	8004f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e01b      	b.n	8004fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f7c:	897b      	ldrh	r3, [r7, #10]
 8004f7e:	11db      	asrs	r3, r3, #7
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0306 	and.w	r3, r3, #6
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f063 030f 	orn	r3, r3, #15
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <I2C_MasterRequestWrite+0xfc>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f9eb 	bl	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e010      	b.n	8004fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4907      	ldr	r1, [pc, #28]	; (8004fd8 <I2C_MasterRequestWrite+0x100>)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f9db 	bl	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	00010008 	.word	0x00010008
 8004fd8:	00010002 	.word	0x00010002

08004fdc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b08      	cmp	r3, #8
 8005006:	d006      	beq.n	8005016 <I2C_MasterRequestRead+0x3a>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d003      	beq.n	8005016 <I2C_MasterRequestRead+0x3a>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005014:	d108      	bne.n	8005028 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e00b      	b.n	8005040 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	2b11      	cmp	r3, #17
 800502e:	d107      	bne.n	8005040 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f93b 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d103      	bne.n	8005070 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e079      	b.n	8005168 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800507c:	d108      	bne.n	8005090 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800507e:	897b      	ldrh	r3, [r7, #10]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]
 800508e:	e05f      	b.n	8005150 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005090:	897b      	ldrh	r3, [r7, #10]
 8005092:	11db      	asrs	r3, r3, #7
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0306 	and.w	r3, r3, #6
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f063 030f 	orn	r3, r3, #15
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4930      	ldr	r1, [pc, #192]	; (8005170 <I2C_MasterRequestRead+0x194>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f961 	bl	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e054      	b.n	8005168 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4929      	ldr	r1, [pc, #164]	; (8005174 <I2C_MasterRequestRead+0x198>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f951 	bl	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e044      	b.n	8005168 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005102:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f8d9 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d103      	bne.n	8005134 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e017      	b.n	8005168 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005138:	897b      	ldrh	r3, [r7, #10]
 800513a:	11db      	asrs	r3, r3, #7
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0306 	and.w	r3, r3, #6
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f063 030e 	orn	r3, r3, #14
 8005148:	b2da      	uxtb	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4907      	ldr	r1, [pc, #28]	; (8005174 <I2C_MasterRequestRead+0x198>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f90d 	bl	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	00010008 	.word	0x00010008
 8005174:	00010002 	.word	0x00010002

08005178 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005192:	4b4b      	ldr	r3, [pc, #300]	; (80052c0 <I2C_DMAAbort+0x148>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	4a4a      	ldr	r2, [pc, #296]	; (80052c4 <I2C_DMAAbort+0x14c>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	0a1a      	lsrs	r2, r3, #8
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00da      	lsls	r2, r3, #3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051be:	e00a      	b.n	80051d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d0ea      	beq.n	80051ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	2200      	movs	r2, #0
 80051e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	2200      	movs	r2, #0
 80051f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005204:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	2200      	movs	r2, #0
 800521a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	2200      	movs	r2, #0
 800522a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b60      	cmp	r3, #96	; 0x60
 8005246:	d10e      	bne.n	8005266 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f7fe fd3e 	bl	8003ce0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005264:	e027      	b.n	80052b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800526c:	2b28      	cmp	r3, #40	; 0x28
 800526e:	d117      	bne.n	80052a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800528e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2228      	movs	r2, #40	; 0x28
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800529e:	e007      	b.n	80052b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052b0:	6978      	ldr	r0, [r7, #20]
 80052b2:	f7fe fd0c 	bl	8003cce <HAL_I2C_ErrorCallback>
}
 80052b6:	bf00      	nop
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000008 	.word	0x20000008
 80052c4:	14f8b589 	.word	0x14f8b589

080052c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d8:	e025      	b.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e0:	d021      	beq.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7fc ffa7 	bl	8002234 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d116      	bne.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e023      	b.n	800536e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10d      	bne.n	800534c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	43da      	mvns	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4013      	ands	r3, r2
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	e00c      	b.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d0b6      	beq.n	80052da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005384:	e051      	b.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005394:	d123      	bne.n	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e046      	b.n	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e4:	d021      	beq.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fc ff25 	bl	8002234 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d116      	bne.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e020      	b.n	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10c      	bne.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	43da      	mvns	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf14      	ite	ne
 8005446:	2301      	movne	r3, #1
 8005448:	2300      	moveq	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	e00b      	b.n	8005466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	43da      	mvns	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d18d      	bne.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005480:	e02d      	b.n	80054de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f900 	bl	8005688 <I2C_IsAcknowledgeFailed>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e02d      	b.n	80054ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005498:	d021      	beq.n	80054de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fc fecb 	bl	8002234 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d116      	bne.n	80054de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e007      	b.n	80054ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d1ca      	bne.n	8005482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005502:	e02d      	b.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f8bf 	bl	8005688 <I2C_IsAcknowledgeFailed>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e02d      	b.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551a:	d021      	beq.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551c:	f7fc fe8a 	bl	8002234 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	d302      	bcc.n	8005532 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d116      	bne.n	8005560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e007      	b.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b04      	cmp	r3, #4
 800556c:	d1ca      	bne.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	0a1a      	lsrs	r2, r3, #8
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b01      	subs	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e008      	b.n	80055c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c4:	d0e9      	beq.n	800559a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000008 	.word	0x20000008
 80055d8:	14f8b589 	.word	0x14f8b589

080055dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055e8:	e042      	b.n	8005670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d119      	bne.n	800562c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0210 	mvn.w	r2, #16
 8005600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e029      	b.n	8005680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562c:	f7fc fe02 	bl	8002234 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	d302      	bcc.n	8005642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d116      	bne.n	8005670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f043 0220 	orr.w	r2, r3, #32
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e007      	b.n	8005680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d1b5      	bne.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569e:	d11b      	bne.n	80056d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0204 	orr.w	r2, r3, #4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80056f4:	d103      	bne.n	80056fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056fc:	e007      	b.n	800570e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005706:	d102      	bne.n	800570e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2208      	movs	r2, #8
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e272      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8087 	beq.w	8005846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005738:	4b92      	ldr	r3, [pc, #584]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b04      	cmp	r3, #4
 8005742:	d00c      	beq.n	800575e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005744:	4b8f      	ldr	r3, [pc, #572]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d112      	bne.n	8005776 <HAL_RCC_OscConfig+0x5e>
 8005750:	4b8c      	ldr	r3, [pc, #560]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d10b      	bne.n	8005776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575e:	4b89      	ldr	r3, [pc, #548]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d06c      	beq.n	8005844 <HAL_RCC_OscConfig+0x12c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d168      	bne.n	8005844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e24c      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577e:	d106      	bne.n	800578e <HAL_RCC_OscConfig+0x76>
 8005780:	4b80      	ldr	r3, [pc, #512]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7f      	ldr	r2, [pc, #508]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e02e      	b.n	80057ec <HAL_RCC_OscConfig+0xd4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x98>
 8005796:	4b7b      	ldr	r3, [pc, #492]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a7a      	ldr	r2, [pc, #488]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 800579c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4b78      	ldr	r3, [pc, #480]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a77      	ldr	r2, [pc, #476]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e01d      	b.n	80057ec <HAL_RCC_OscConfig+0xd4>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCC_OscConfig+0xbc>
 80057ba:	4b72      	ldr	r3, [pc, #456]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a71      	ldr	r2, [pc, #452]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b6f      	ldr	r3, [pc, #444]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a6e      	ldr	r2, [pc, #440]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e00b      	b.n	80057ec <HAL_RCC_OscConfig+0xd4>
 80057d4:	4b6b      	ldr	r3, [pc, #428]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a6a      	ldr	r2, [pc, #424]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b68      	ldr	r3, [pc, #416]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a67      	ldr	r2, [pc, #412]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fc fd1e 	bl	8002234 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fc fd1a 	bl	8002234 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e200      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	4b5d      	ldr	r3, [pc, #372]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0xe4>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fc fd0a 	bl	8002234 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fc fd06 	bl	8002234 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1ec      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	4b53      	ldr	r3, [pc, #332]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x10c>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d063      	beq.n	800591a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005852:	4b4c      	ldr	r3, [pc, #304]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800585e:	4b49      	ldr	r3, [pc, #292]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b08      	cmp	r3, #8
 8005868:	d11c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x18c>
 800586a:	4b46      	ldr	r3, [pc, #280]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d116      	bne.n	80058a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005876:	4b43      	ldr	r3, [pc, #268]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_RCC_OscConfig+0x176>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d001      	beq.n	800588e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e1c0      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588e:	4b3d      	ldr	r3, [pc, #244]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4939      	ldr	r1, [pc, #228]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a2:	e03a      	b.n	800591a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ac:	4b36      	ldr	r3, [pc, #216]	; (8005988 <HAL_RCC_OscConfig+0x270>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b2:	f7fc fcbf 	bl	8002234 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ba:	f7fc fcbb 	bl	8002234 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e1a1      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058cc:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d8:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4927      	ldr	r1, [pc, #156]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	e015      	b.n	800591a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ee:	4b26      	ldr	r3, [pc, #152]	; (8005988 <HAL_RCC_OscConfig+0x270>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fc fc9e 	bl	8002234 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fc:	f7fc fc9a 	bl	8002234 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e180      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590e:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d03a      	beq.n	800599c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d019      	beq.n	8005962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800592e:	4b17      	ldr	r3, [pc, #92]	; (800598c <HAL_RCC_OscConfig+0x274>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005934:	f7fc fc7e 	bl	8002234 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593c:	f7fc fc7a 	bl	8002234 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e160      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800595a:	2001      	movs	r0, #1
 800595c:	f000 fad8 	bl	8005f10 <RCC_Delay>
 8005960:	e01c      	b.n	800599c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <HAL_RCC_OscConfig+0x274>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005968:	f7fc fc64 	bl	8002234 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800596e:	e00f      	b.n	8005990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005970:	f7fc fc60 	bl	8002234 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d908      	bls.n	8005990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e146      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	42420000 	.word	0x42420000
 800598c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	4b92      	ldr	r3, [pc, #584]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e9      	bne.n	8005970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80a6 	beq.w	8005af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ae:	4b8b      	ldr	r3, [pc, #556]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10d      	bne.n	80059d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	4a87      	ldr	r2, [pc, #540]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c4:	61d3      	str	r3, [r2, #28]
 80059c6:	4b85      	ldr	r3, [pc, #532]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b82      	ldr	r3, [pc, #520]	; (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d118      	bne.n	8005a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e2:	4b7f      	ldr	r3, [pc, #508]	; (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7e      	ldr	r2, [pc, #504]	; (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ee:	f7fc fc21 	bl	8002234 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fc fc1d 	bl	8002234 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b64      	cmp	r3, #100	; 0x64
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e103      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	4b75      	ldr	r3, [pc, #468]	; (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <HAL_RCC_OscConfig+0x312>
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	4a6e      	ldr	r2, [pc, #440]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6213      	str	r3, [r2, #32]
 8005a28:	e02d      	b.n	8005a86 <HAL_RCC_OscConfig+0x36e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCC_OscConfig+0x334>
 8005a32:	4b6a      	ldr	r3, [pc, #424]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	4a69      	ldr	r2, [pc, #420]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6213      	str	r3, [r2, #32]
 8005a3e:	4b67      	ldr	r3, [pc, #412]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a66      	ldr	r2, [pc, #408]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	6213      	str	r3, [r2, #32]
 8005a4a:	e01c      	b.n	8005a86 <HAL_RCC_OscConfig+0x36e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCC_OscConfig+0x356>
 8005a54:	4b61      	ldr	r3, [pc, #388]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	4a60      	ldr	r2, [pc, #384]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6213      	str	r3, [r2, #32]
 8005a60:	4b5e      	ldr	r3, [pc, #376]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	4a5d      	ldr	r2, [pc, #372]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6213      	str	r3, [r2, #32]
 8005a6c:	e00b      	b.n	8005a86 <HAL_RCC_OscConfig+0x36e>
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4a5a      	ldr	r2, [pc, #360]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	6213      	str	r3, [r2, #32]
 8005a7a:	4b58      	ldr	r3, [pc, #352]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a57      	ldr	r2, [pc, #348]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d015      	beq.n	8005aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a8e:	f7fc fbd1 	bl	8002234 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fc fbcd 	bl	8002234 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e0b1      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	4b4b      	ldr	r3, [pc, #300]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ee      	beq.n	8005a96 <HAL_RCC_OscConfig+0x37e>
 8005ab8:	e014      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aba:	f7fc fbbb 	bl	8002234 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc fbb7 	bl	8002234 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e09b      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad8:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aea:	4b3c      	ldr	r3, [pc, #240]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	4a3b      	ldr	r2, [pc, #236]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8087 	beq.w	8005c0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b00:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d061      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d146      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b14:	4b33      	ldr	r3, [pc, #204]	; (8005be4 <HAL_RCC_OscConfig+0x4cc>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fb8b 	bl	8002234 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fc fb87 	bl	8002234 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e06d      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b34:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d108      	bne.n	8005b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	4921      	ldr	r1, [pc, #132]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a19      	ldr	r1, [r3, #32]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	491b      	ldr	r1, [pc, #108]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b74:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCC_OscConfig+0x4cc>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7a:	f7fc fb5b 	bl	8002234 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fc fb57 	bl	8002234 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e03d      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x46a>
 8005ba0:	e035      	b.n	8005c0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_RCC_OscConfig+0x4cc>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fc fb44 	bl	8002234 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fc fb40 	bl	8002234 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e026      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x498>
 8005bce:	e01e      	b.n	8005c0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e019      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40007000 	.word	0x40007000
 8005be4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_OscConfig+0x500>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d001      	beq.n	8005c0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000

08005c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0d0      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c30:	4b6a      	ldr	r3, [pc, #424]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d910      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b67      	ldr	r3, [pc, #412]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 0207 	bic.w	r2, r3, #7
 8005c46:	4965      	ldr	r1, [pc, #404]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4e:	4b63      	ldr	r3, [pc, #396]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0b8      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c78:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c90:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a52      	ldr	r2, [pc, #328]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	494d      	ldr	r1, [pc, #308]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d040      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc2:	4b47      	ldr	r3, [pc, #284]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d115      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e07f      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d107      	bne.n	8005cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e073      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cea:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06b      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cfa:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f023 0203 	bic.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4936      	ldr	r1, [pc, #216]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d0c:	f7fc fa92 	bl	8002234 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d14:	f7fc fa8e 	bl	8002234 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e053      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 020c 	and.w	r2, r3, #12
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d1eb      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d210      	bcs.n	8005d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	4922      	ldr	r1, [pc, #136]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e032      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d78:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4916      	ldr	r1, [pc, #88]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	490e      	ldr	r1, [pc, #56]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005daa:	f000 f821 	bl	8005df0 <HAL_RCC_GetSysClockFreq>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	091b      	lsrs	r3, r3, #4
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	490a      	ldr	r1, [pc, #40]	; (8005de4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <HAL_RCC_ClockConfig+0x1cc>)
 8005dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <HAL_RCC_ClockConfig+0x1d0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fc f9f0 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40021000 	.word	0x40021000
 8005de4:	0800a248 	.word	0x0800a248
 8005de8:	20000008 	.word	0x20000008
 8005dec:	20000010 	.word	0x20000010

08005df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df0:	b490      	push	{r4, r7}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005df6:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xac>)
 8005df8:	1d3c      	adds	r4, r7, #4
 8005dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e00:	f240 2301 	movw	r3, #513	; 0x201
 8005e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e1a:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d002      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x40>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0x46>
 8005e2e:	e02b      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e30:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e32:	623b      	str	r3, [r7, #32]
      break;
 8005e34:	e02b      	b.n	8005e8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	0c9b      	lsrs	r3, r3, #18
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	3328      	adds	r3, #40	; 0x28
 8005e40:	443b      	add	r3, r7
 8005e42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d012      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	0c5b      	lsrs	r3, r3, #17
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	3328      	adds	r3, #40	; 0x28
 8005e5e:	443b      	add	r3, r7
 8005e60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4a0e      	ldr	r2, [pc, #56]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e6a:	fb03 f202 	mul.w	r2, r3, r2
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
 8005e76:	e004      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	623b      	str	r3, [r7, #32]
      break;
 8005e86:	e002      	b.n	8005e8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e8a:	623b      	str	r3, [r7, #32]
      break;
 8005e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3728      	adds	r7, #40	; 0x28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc90      	pop	{r4, r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	0800a238 	.word	0x0800a238
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	007a1200 	.word	0x007a1200
 8005ea8:	003d0900 	.word	0x003d0900

08005eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	20000008 	.word	0x20000008

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ec4:	f7ff fff2 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4903      	ldr	r1, [pc, #12]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	0800a258 	.word	0x0800a258

08005ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eec:	f7ff ffde 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	0adb      	lsrs	r3, r3, #11
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	4903      	ldr	r1, [pc, #12]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	0800a258 	.word	0x0800a258

08005f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <RCC_Delay+0x34>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <RCC_Delay+0x38>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	0a5b      	lsrs	r3, r3, #9
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f2c:	bf00      	nop
  }
  while (Delay --);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	60fa      	str	r2, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f9      	bne.n	8005f2c <RCC_Delay+0x1c>
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	20000008 	.word	0x20000008
 8005f48:	10624dd3 	.word	0x10624dd3

08005f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d07d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6c:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f78:	4b4c      	ldr	r3, [pc, #304]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4a4b      	ldr	r2, [pc, #300]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	61d3      	str	r3, [r2, #28]
 8005f84:	4b49      	ldr	r3, [pc, #292]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f94:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d118      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa0:	4b43      	ldr	r3, [pc, #268]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a42      	ldr	r2, [pc, #264]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fac:	f7fc f942 	bl	8002234 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb4:	f7fc f93e 	bl	8002234 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	; 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e06d      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc6:	4b3a      	ldr	r3, [pc, #232]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fd2:	4b36      	ldr	r3, [pc, #216]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02e      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d027      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006000:	4b2c      	ldr	r3, [pc, #176]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006006:	4a29      	ldr	r2, [pc, #164]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d014      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006016:	f7fc f90d 	bl	8002234 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601c:	e00a      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601e:	f7fc f909 	bl	8002234 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f241 3288 	movw	r2, #5000	; 0x1388
 800602c:	4293      	cmp	r3, r2
 800602e:	d901      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e036      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ee      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006040:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4917      	ldr	r1, [pc, #92]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604e:	4313      	orrs	r3, r2
 8006050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006058:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	490b      	ldr	r1, [pc, #44]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	4313      	orrs	r3, r2
 8006080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	4904      	ldr	r1, [pc, #16]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40007000 	.word	0x40007000
 80060b4:	42420440 	.word	0x42420440

080060b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e041      	b.n	800614e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fb fc96 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f000 fa70 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d001      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e03a      	b.n	80061e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_TIM_Base_Start_IT+0x98>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x58>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619a:	d009      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x58>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a14      	ldr	r2, [pc, #80]	; (80061f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x58>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d111      	bne.n	80061d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d010      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	e007      	b.n	80061e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800

080061fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0202 	mvn.w	r2, #2
 8006228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9b1 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9a4 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9b3 	bl	80065b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b04      	cmp	r3, #4
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b04      	cmp	r3, #4
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0204 	mvn.w	r2, #4
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f987 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f97a 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f989 	bl	80065b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0208 	mvn.w	r2, #8
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2204      	movs	r2, #4
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f95d 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f950 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f95f 	bl	80065b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b10      	cmp	r3, #16
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b10      	cmp	r3, #16
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0210 	mvn.w	r2, #16
 8006324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2208      	movs	r2, #8
 800632a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f933 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f926 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f935 	bl	80065b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10e      	bne.n	8006380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d107      	bne.n	8006380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0201 	mvn.w	r2, #1
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fa fef6 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d10e      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d107      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa77 	bl	800689a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d10e      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d107      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8f9 	bl	80065ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d10e      	bne.n	8006404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d107      	bne.n	8006404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0220 	mvn.w	r2, #32
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa42 	bl	8006888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_TIM_ConfigClockSource+0x18>
 8006420:	2302      	movs	r3, #2
 8006422:	e0b3      	b.n	800658c <HAL_TIM_ConfigClockSource+0x180>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800644a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d03e      	beq.n	80064dc <HAL_TIM_ConfigClockSource+0xd0>
 800645e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006462:	f200 8087 	bhi.w	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	f000 8085 	beq.w	8006578 <HAL_TIM_ConfigClockSource+0x16c>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	d87f      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006474:	2b70      	cmp	r3, #112	; 0x70
 8006476:	d01a      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0xa2>
 8006478:	2b70      	cmp	r3, #112	; 0x70
 800647a:	d87b      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 800647c:	2b60      	cmp	r3, #96	; 0x60
 800647e:	d050      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x116>
 8006480:	2b60      	cmp	r3, #96	; 0x60
 8006482:	d877      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006484:	2b50      	cmp	r3, #80	; 0x50
 8006486:	d03c      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0xf6>
 8006488:	2b50      	cmp	r3, #80	; 0x50
 800648a:	d873      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d058      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x136>
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d86f      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	d064      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
 8006498:	2b30      	cmp	r3, #48	; 0x30
 800649a:	d86b      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 800649c:	2b20      	cmp	r3, #32
 800649e:	d060      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d867      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d05c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d05a      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064ac:	e062      	b.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6899      	ldr	r1, [r3, #8]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f000 f966 	bl	800678e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	609a      	str	r2, [r3, #8]
      break;
 80064da:	e04e      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6899      	ldr	r1, [r3, #8]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f000 f94f 	bl	800678e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064fe:	609a      	str	r2, [r3, #8]
      break;
 8006500:	e03b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	461a      	mov	r2, r3
 8006510:	f000 f8c6 	bl	80066a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2150      	movs	r1, #80	; 0x50
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f91d 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 8006520:	e02b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	461a      	mov	r2, r3
 8006530:	f000 f8e4 	bl	80066fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2160      	movs	r1, #96	; 0x60
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f90d 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 8006540:	e01b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	f000 f8a6 	bl	80066a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2140      	movs	r1, #64	; 0x40
 800655a:	4618      	mov	r0, r3
 800655c:	f000 f8fd 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 8006560:	e00b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f000 f8f4 	bl	800675a <TIM_ITRx_SetConfig>
        break;
 8006572:	e002      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr

080065a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr

080065ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a29      	ldr	r2, [pc, #164]	; (8006694 <TIM_Base_SetConfig+0xb8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_Base_SetConfig+0x30>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d007      	beq.n	800660c <TIM_Base_SetConfig+0x30>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a26      	ldr	r2, [pc, #152]	; (8006698 <TIM_Base_SetConfig+0xbc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0x30>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a25      	ldr	r2, [pc, #148]	; (800669c <TIM_Base_SetConfig+0xc0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d108      	bne.n	800661e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <TIM_Base_SetConfig+0xb8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_Base_SetConfig+0x62>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662c:	d007      	beq.n	800663e <TIM_Base_SetConfig+0x62>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a19      	ldr	r2, [pc, #100]	; (8006698 <TIM_Base_SetConfig+0xbc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_Base_SetConfig+0x62>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <TIM_Base_SetConfig+0xc0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d108      	bne.n	8006650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <TIM_Base_SetConfig+0xb8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d103      	bne.n	8006684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	615a      	str	r2, [r3, #20]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800

080066a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 030a 	bic.w	r3, r3, #10
 80066dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f023 0210 	bic.w	r2, r3, #16
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006726:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	031b      	lsls	r3, r3, #12
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006738:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	f043 0307 	orr.w	r3, r3, #7
 800677c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr

0800678e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800678e:	b480      	push	{r7}
 8006790:	b087      	sub	sp, #28
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	021a      	lsls	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	609a      	str	r2, [r3, #8]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e046      	b.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a16      	ldr	r2, [pc, #88]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d009      	beq.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a10      	ldr	r2, [pc, #64]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d10c      	bne.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	4313      	orrs	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	40012c00 	.word	0x40012c00
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800

08006888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e03f      	b.n	800693e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fb f8c0 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2224      	movs	r2, #36	; 0x24
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc85 	bl	8007200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b08a      	sub	sp, #40	; 0x28
 800694a:	af02      	add	r7, sp, #8
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b20      	cmp	r3, #32
 8006964:	d17c      	bne.n	8006a60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <HAL_UART_Transmit+0x2c>
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e075      	b.n	8006a62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_UART_Transmit+0x3e>
 8006980:	2302      	movs	r3, #2
 8006982:	e06e      	b.n	8006a62 <HAL_UART_Transmit+0x11c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2221      	movs	r2, #33	; 0x21
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800699a:	f7fb fc4b 	bl	8002234 <HAL_GetTick>
 800699e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	d108      	bne.n	80069c8 <HAL_UART_Transmit+0x82>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	e003      	b.n	80069d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069d8:	e02a      	b.n	8006a30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	2180      	movs	r1, #128	; 0x80
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fa38 	bl	8006e5a <UART_WaitOnFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e036      	b.n	8006a62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	e007      	b.n	8006a22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1cf      	bne.n	80069da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2140      	movs	r1, #64	; 0x40
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa08 	bl	8006e5a <UART_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e006      	b.n	8006a62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e000      	b.n	8006a62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a60:	2302      	movs	r3, #2
  }
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	4613      	mov	r3, r2
 8006a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d11d      	bne.n	8006ac0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_UART_Receive_IT+0x26>
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e016      	b.n	8006ac2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_UART_Receive_IT+0x38>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e00f      	b.n	8006ac2 <HAL_UART_Receive_IT+0x58>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fa19 	bl	8006eee <UART_Start_Receive_IT>
 8006abc:	4603      	mov	r3, r0
 8006abe:	e000      	b.n	8006ac2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_UART_IRQHandler+0x52>
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fac9 	bl	80070ae <UART_Receive_IT>
      return;
 8006b1c:	e17b      	b.n	8006e16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80b1 	beq.w	8006c88 <HAL_UART_IRQHandler+0x1bc>
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <HAL_UART_IRQHandler+0x70>
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80a6 	beq.w	8006c88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <HAL_UART_IRQHandler+0x90>
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	f043 0201 	orr.w	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_UART_IRQHandler+0xb0>
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f043 0202 	orr.w	r2, r3, #2
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_UART_IRQHandler+0xd0>
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	f043 0204 	orr.w	r2, r3, #4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00f      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xfa>
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_UART_IRQHandler+0xee>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f043 0208 	orr.w	r2, r3, #8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 811e 	beq.w	8006e0c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <HAL_UART_IRQHandler+0x11e>
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa62 	bl	80070ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <HAL_UART_IRQHandler+0x146>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d031      	beq.n	8006c76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9a4 	bl	8006f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d023      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695a      	ldr	r2, [r3, #20]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d013      	beq.n	8006c66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	4a76      	ldr	r2, [pc, #472]	; (8006e1c <HAL_UART_IRQHandler+0x350>)
 8006c44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fb fe7a 	bl	8002944 <HAL_DMA_Abort_IT>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	e00e      	b.n	8006c84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8e3 	bl	8006e32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	e00a      	b.n	8006c84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8df 	bl	8006e32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	e006      	b.n	8006c84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8db 	bl	8006e32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c82:	e0c3      	b.n	8006e0c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	bf00      	nop
    return;
 8006c86:	e0c1      	b.n	8006e0c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	f040 80a1 	bne.w	8006dd4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 809b 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8095 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d04e      	beq.n	8006d6c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006cd8:	8a3b      	ldrh	r3, [r7, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8098 	beq.w	8006e10 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ce4:	8a3a      	ldrh	r2, [r7, #16]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	f080 8092 	bcs.w	8006e10 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8a3a      	ldrh	r2, [r7, #16]
 8006cf0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d02b      	beq.n	8006d54 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d0a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0210 	bic.w	r2, r2, #16
 8006d48:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fb fdbd 	bl	80028ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f86d 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d6a:	e051      	b.n	8006e10 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d047      	beq.n	8006e14 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006d84:	8a7b      	ldrh	r3, [r7, #18]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d044      	beq.n	8006e14 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d98:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0210 	bic.w	r2, r2, #16
 8006dc6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc8:	8a7b      	ldrh	r3, [r7, #18]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f839 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dd2:	e01f      	b.n	8006e14 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d008      	beq.n	8006df0 <HAL_UART_IRQHandler+0x324>
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8f9 	bl	8006fe0 <UART_Transmit_IT>
    return;
 8006dee:	e012      	b.n	8006e16 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_UART_IRQHandler+0x34a>
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f93a 	bl	800707e <UART_EndTransmit_IT>
    return;
 8006e0a:	e004      	b.n	8006e16 <HAL_UART_IRQHandler+0x34a>
    return;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <HAL_UART_IRQHandler+0x34a>
      return;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <HAL_UART_IRQHandler+0x34a>
      return;
 8006e14:	bf00      	nop
  }
}
 8006e16:	3728      	adds	r7, #40	; 0x28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	08006fb9 	.word	0x08006fb9

08006e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr

08006e32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	603b      	str	r3, [r7, #0]
 8006e66:	4613      	mov	r3, r2
 8006e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6a:	e02c      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e72:	d028      	beq.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e7a:	f7fb f9db 	bl	8002234 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d21d      	bcs.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e00f      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	bf0c      	ite	eq
 8006ed6:	2301      	moveq	r3, #1
 8006ed8:	2300      	movne	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d0c3      	beq.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	88fa      	ldrh	r2, [r7, #6]
 8006f06:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2222      	movs	r2, #34	; 0x22
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f32:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695a      	ldr	r2, [r3, #20]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0220 	orr.w	r2, r2, #32
 8006f52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0201 	bic.w	r2, r2, #1
 8006f86:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d107      	bne.n	8006fa0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0210 	bic.w	r2, r2, #16
 8006f9e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff ff2d 	bl	8006e32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b21      	cmp	r3, #33	; 0x21
 8006ff2:	d13e      	bne.n	8007072 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d114      	bne.n	8007028 <UART_Transmit_IT+0x48>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d110      	bne.n	8007028 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800701a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	1c9a      	adds	r2, r3, #2
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]
 8007026:	e008      	b.n	800703a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	1c59      	adds	r1, r3, #1
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6211      	str	r1, [r2, #32]
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29b      	uxth	r3, r3
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4619      	mov	r1, r3
 8007048:	84d1      	strh	r1, [r2, #38]	; 0x26
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff febe 	bl	8006e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b22      	cmp	r3, #34	; 0x22
 80070c0:	f040 8099 	bne.w	80071f6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	d117      	bne.n	80070fe <UART_Receive_IT+0x50>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d113      	bne.n	80070fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	1c9a      	adds	r2, r3, #2
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
 80070fc:	e026      	b.n	800714c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d007      	beq.n	8007122 <UART_Receive_IT+0x74>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <UART_Receive_IT+0x82>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e008      	b.n	8007142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713c:	b2da      	uxtb	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29b      	uxth	r3, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4619      	mov	r1, r3
 800715a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800715c:	2b00      	cmp	r3, #0
 800715e:	d148      	bne.n	80071f2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0220 	bic.w	r2, r2, #32
 800716e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	2b01      	cmp	r3, #1
 800719e:	d123      	bne.n	80071e8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0210 	bic.w	r2, r2, #16
 80071b4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d10a      	bne.n	80071da <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff fe2f 	bl	8006e44 <HAL_UARTEx_RxEventCallback>
 80071e6:	e002      	b.n	80071ee <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7f9 fd5b 	bl	8000ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e002      	b.n	80071f8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e000      	b.n	80071f8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
  }
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800723a:	f023 030c 	bic.w	r3, r3, #12
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	430b      	orrs	r3, r1
 8007246:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <UART_SetConfig+0x114>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d103      	bne.n	8007270 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007268:	f7fe fe3e 	bl	8005ee8 <HAL_RCC_GetPCLK2Freq>
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	e002      	b.n	8007276 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007270:	f7fe fe26 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8007274:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009a      	lsls	r2, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	4a22      	ldr	r2, [pc, #136]	; (8007318 <UART_SetConfig+0x118>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	0119      	lsls	r1, r3, #4
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009a      	lsls	r2, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ac:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <UART_SetConfig+0x118>)
 80072ae:	fba3 0302 	umull	r0, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2064      	movs	r0, #100	; 0x64
 80072b6:	fb00 f303 	mul.w	r3, r0, r3
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	3332      	adds	r3, #50	; 0x32
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <UART_SetConfig+0x118>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072cc:	4419      	add	r1, r3
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009a      	lsls	r2, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <UART_SetConfig+0x118>)
 80072e6:	fba3 0302 	umull	r0, r3, r3, r2
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	2064      	movs	r0, #100	; 0x64
 80072ee:	fb00 f303 	mul.w	r3, r0, r3
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	3332      	adds	r3, #50	; 0x32
 80072f8:	4a07      	ldr	r2, [pc, #28]	; (8007318 <UART_SetConfig+0x118>)
 80072fa:	fba2 2303 	umull	r2, r3, r2, r3
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	f003 020f 	and.w	r2, r3, #15
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	440a      	add	r2, r1
 800730a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40013800 	.word	0x40013800
 8007318:	51eb851f 	.word	0x51eb851f

0800731c <__errno>:
 800731c:	4b01      	ldr	r3, [pc, #4]	; (8007324 <__errno+0x8>)
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000018 	.word	0x20000018

08007328 <__libc_init_array>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	2600      	movs	r6, #0
 800732c:	4d0c      	ldr	r5, [pc, #48]	; (8007360 <__libc_init_array+0x38>)
 800732e:	4c0d      	ldr	r4, [pc, #52]	; (8007364 <__libc_init_array+0x3c>)
 8007330:	1b64      	subs	r4, r4, r5
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	42a6      	cmp	r6, r4
 8007336:	d109      	bne.n	800734c <__libc_init_array+0x24>
 8007338:	f002 ff2e 	bl	800a198 <_init>
 800733c:	2600      	movs	r6, #0
 800733e:	4d0a      	ldr	r5, [pc, #40]	; (8007368 <__libc_init_array+0x40>)
 8007340:	4c0a      	ldr	r4, [pc, #40]	; (800736c <__libc_init_array+0x44>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	42a6      	cmp	r6, r4
 8007348:	d105      	bne.n	8007356 <__libc_init_array+0x2e>
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007350:	4798      	blx	r3
 8007352:	3601      	adds	r6, #1
 8007354:	e7ee      	b.n	8007334 <__libc_init_array+0xc>
 8007356:	f855 3b04 	ldr.w	r3, [r5], #4
 800735a:	4798      	blx	r3
 800735c:	3601      	adds	r6, #1
 800735e:	e7f2      	b.n	8007346 <__libc_init_array+0x1e>
 8007360:	0800a63c 	.word	0x0800a63c
 8007364:	0800a63c 	.word	0x0800a63c
 8007368:	0800a63c 	.word	0x0800a63c
 800736c:	0800a640 	.word	0x0800a640

08007370 <memset>:
 8007370:	4603      	mov	r3, r0
 8007372:	4402      	add	r2, r0
 8007374:	4293      	cmp	r3, r2
 8007376:	d100      	bne.n	800737a <memset+0xa>
 8007378:	4770      	bx	lr
 800737a:	f803 1b01 	strb.w	r1, [r3], #1
 800737e:	e7f9      	b.n	8007374 <memset+0x4>

08007380 <__cvt>:
 8007380:	2b00      	cmp	r3, #0
 8007382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007386:	461f      	mov	r7, r3
 8007388:	bfbb      	ittet	lt
 800738a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800738e:	461f      	movlt	r7, r3
 8007390:	2300      	movge	r3, #0
 8007392:	232d      	movlt	r3, #45	; 0x2d
 8007394:	b088      	sub	sp, #32
 8007396:	4614      	mov	r4, r2
 8007398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800739a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800739c:	7013      	strb	r3, [r2, #0]
 800739e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80073a4:	f023 0820 	bic.w	r8, r3, #32
 80073a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073ac:	d005      	beq.n	80073ba <__cvt+0x3a>
 80073ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073b2:	d100      	bne.n	80073b6 <__cvt+0x36>
 80073b4:	3501      	adds	r5, #1
 80073b6:	2302      	movs	r3, #2
 80073b8:	e000      	b.n	80073bc <__cvt+0x3c>
 80073ba:	2303      	movs	r3, #3
 80073bc:	aa07      	add	r2, sp, #28
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	aa06      	add	r2, sp, #24
 80073c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80073c6:	e9cd 3500 	strd	r3, r5, [sp]
 80073ca:	4622      	mov	r2, r4
 80073cc:	463b      	mov	r3, r7
 80073ce:	f000 fd17 	bl	8007e00 <_dtoa_r>
 80073d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073d6:	4606      	mov	r6, r0
 80073d8:	d102      	bne.n	80073e0 <__cvt+0x60>
 80073da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073dc:	07db      	lsls	r3, r3, #31
 80073de:	d522      	bpl.n	8007426 <__cvt+0xa6>
 80073e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073e4:	eb06 0905 	add.w	r9, r6, r5
 80073e8:	d110      	bne.n	800740c <__cvt+0x8c>
 80073ea:	7833      	ldrb	r3, [r6, #0]
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	d10a      	bne.n	8007406 <__cvt+0x86>
 80073f0:	2200      	movs	r2, #0
 80073f2:	2300      	movs	r3, #0
 80073f4:	4620      	mov	r0, r4
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80073fc:	b918      	cbnz	r0, 8007406 <__cvt+0x86>
 80073fe:	f1c5 0501 	rsb	r5, r5, #1
 8007402:	f8ca 5000 	str.w	r5, [sl]
 8007406:	f8da 3000 	ldr.w	r3, [sl]
 800740a:	4499      	add	r9, r3
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	4620      	mov	r0, r4
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8007418:	b108      	cbz	r0, 800741e <__cvt+0x9e>
 800741a:	f8cd 901c 	str.w	r9, [sp, #28]
 800741e:	2230      	movs	r2, #48	; 0x30
 8007420:	9b07      	ldr	r3, [sp, #28]
 8007422:	454b      	cmp	r3, r9
 8007424:	d307      	bcc.n	8007436 <__cvt+0xb6>
 8007426:	4630      	mov	r0, r6
 8007428:	9b07      	ldr	r3, [sp, #28]
 800742a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800742c:	1b9b      	subs	r3, r3, r6
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	b008      	add	sp, #32
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	1c59      	adds	r1, r3, #1
 8007438:	9107      	str	r1, [sp, #28]
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	e7f0      	b.n	8007420 <__cvt+0xa0>

0800743e <__exponent>:
 800743e:	4603      	mov	r3, r0
 8007440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007442:	2900      	cmp	r1, #0
 8007444:	f803 2b02 	strb.w	r2, [r3], #2
 8007448:	bfb6      	itet	lt
 800744a:	222d      	movlt	r2, #45	; 0x2d
 800744c:	222b      	movge	r2, #43	; 0x2b
 800744e:	4249      	neglt	r1, r1
 8007450:	2909      	cmp	r1, #9
 8007452:	7042      	strb	r2, [r0, #1]
 8007454:	dd2b      	ble.n	80074ae <__exponent+0x70>
 8007456:	f10d 0407 	add.w	r4, sp, #7
 800745a:	46a4      	mov	ip, r4
 800745c:	270a      	movs	r7, #10
 800745e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007462:	460a      	mov	r2, r1
 8007464:	46a6      	mov	lr, r4
 8007466:	fb07 1516 	mls	r5, r7, r6, r1
 800746a:	2a63      	cmp	r2, #99	; 0x63
 800746c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007470:	4631      	mov	r1, r6
 8007472:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007476:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800747a:	dcf0      	bgt.n	800745e <__exponent+0x20>
 800747c:	3130      	adds	r1, #48	; 0x30
 800747e:	f1ae 0502 	sub.w	r5, lr, #2
 8007482:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007486:	4629      	mov	r1, r5
 8007488:	1c44      	adds	r4, r0, #1
 800748a:	4561      	cmp	r1, ip
 800748c:	d30a      	bcc.n	80074a4 <__exponent+0x66>
 800748e:	f10d 0209 	add.w	r2, sp, #9
 8007492:	eba2 020e 	sub.w	r2, r2, lr
 8007496:	4565      	cmp	r5, ip
 8007498:	bf88      	it	hi
 800749a:	2200      	movhi	r2, #0
 800749c:	4413      	add	r3, r2
 800749e:	1a18      	subs	r0, r3, r0
 80074a0:	b003      	add	sp, #12
 80074a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80074ac:	e7ed      	b.n	800748a <__exponent+0x4c>
 80074ae:	2330      	movs	r3, #48	; 0x30
 80074b0:	3130      	adds	r1, #48	; 0x30
 80074b2:	7083      	strb	r3, [r0, #2]
 80074b4:	70c1      	strb	r1, [r0, #3]
 80074b6:	1d03      	adds	r3, r0, #4
 80074b8:	e7f1      	b.n	800749e <__exponent+0x60>
	...

080074bc <_printf_float>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	b091      	sub	sp, #68	; 0x44
 80074c2:	460c      	mov	r4, r1
 80074c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80074c8:	4616      	mov	r6, r2
 80074ca:	461f      	mov	r7, r3
 80074cc:	4605      	mov	r5, r0
 80074ce:	f001 fa85 	bl	80089dc <_localeconv_r>
 80074d2:	6803      	ldr	r3, [r0, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	9309      	str	r3, [sp, #36]	; 0x24
 80074d8:	f7f8 fe3a 	bl	8000150 <strlen>
 80074dc:	2300      	movs	r3, #0
 80074de:	930e      	str	r3, [sp, #56]	; 0x38
 80074e0:	f8d8 3000 	ldr.w	r3, [r8]
 80074e4:	900a      	str	r0, [sp, #40]	; 0x28
 80074e6:	3307      	adds	r3, #7
 80074e8:	f023 0307 	bic.w	r3, r3, #7
 80074ec:	f103 0208 	add.w	r2, r3, #8
 80074f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074f4:	f8d4 b000 	ldr.w	fp, [r4]
 80074f8:	f8c8 2000 	str.w	r2, [r8]
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007504:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007508:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800750c:	930b      	str	r3, [sp, #44]	; 0x2c
 800750e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007512:	4640      	mov	r0, r8
 8007514:	4b9c      	ldr	r3, [pc, #624]	; (8007788 <_printf_float+0x2cc>)
 8007516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007518:	f7f9 fa78 	bl	8000a0c <__aeabi_dcmpun>
 800751c:	bb70      	cbnz	r0, 800757c <_printf_float+0xc0>
 800751e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007522:	4640      	mov	r0, r8
 8007524:	4b98      	ldr	r3, [pc, #608]	; (8007788 <_printf_float+0x2cc>)
 8007526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007528:	f7f9 fa52 	bl	80009d0 <__aeabi_dcmple>
 800752c:	bb30      	cbnz	r0, 800757c <_printf_float+0xc0>
 800752e:	2200      	movs	r2, #0
 8007530:	2300      	movs	r3, #0
 8007532:	4640      	mov	r0, r8
 8007534:	4651      	mov	r1, sl
 8007536:	f7f9 fa41 	bl	80009bc <__aeabi_dcmplt>
 800753a:	b110      	cbz	r0, 8007542 <_printf_float+0x86>
 800753c:	232d      	movs	r3, #45	; 0x2d
 800753e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007542:	4b92      	ldr	r3, [pc, #584]	; (800778c <_printf_float+0x2d0>)
 8007544:	4892      	ldr	r0, [pc, #584]	; (8007790 <_printf_float+0x2d4>)
 8007546:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800754a:	bf94      	ite	ls
 800754c:	4698      	movls	r8, r3
 800754e:	4680      	movhi	r8, r0
 8007550:	2303      	movs	r3, #3
 8007552:	f04f 0a00 	mov.w	sl, #0
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	f02b 0304 	bic.w	r3, fp, #4
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	4633      	mov	r3, r6
 8007560:	4621      	mov	r1, r4
 8007562:	4628      	mov	r0, r5
 8007564:	9700      	str	r7, [sp, #0]
 8007566:	aa0f      	add	r2, sp, #60	; 0x3c
 8007568:	f000 f9d4 	bl	8007914 <_printf_common>
 800756c:	3001      	adds	r0, #1
 800756e:	f040 8090 	bne.w	8007692 <_printf_float+0x1d6>
 8007572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007576:	b011      	add	sp, #68	; 0x44
 8007578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757c:	4642      	mov	r2, r8
 800757e:	4653      	mov	r3, sl
 8007580:	4640      	mov	r0, r8
 8007582:	4651      	mov	r1, sl
 8007584:	f7f9 fa42 	bl	8000a0c <__aeabi_dcmpun>
 8007588:	b148      	cbz	r0, 800759e <_printf_float+0xe2>
 800758a:	f1ba 0f00 	cmp.w	sl, #0
 800758e:	bfb8      	it	lt
 8007590:	232d      	movlt	r3, #45	; 0x2d
 8007592:	4880      	ldr	r0, [pc, #512]	; (8007794 <_printf_float+0x2d8>)
 8007594:	bfb8      	it	lt
 8007596:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800759a:	4b7f      	ldr	r3, [pc, #508]	; (8007798 <_printf_float+0x2dc>)
 800759c:	e7d3      	b.n	8007546 <_printf_float+0x8a>
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	d142      	bne.n	800762e <_printf_float+0x172>
 80075a8:	2306      	movs	r3, #6
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	9206      	str	r2, [sp, #24]
 80075b0:	aa0e      	add	r2, sp, #56	; 0x38
 80075b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80075b6:	aa0d      	add	r2, sp, #52	; 0x34
 80075b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80075bc:	9203      	str	r2, [sp, #12]
 80075be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80075c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	4642      	mov	r2, r8
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	4628      	mov	r0, r5
 80075d0:	4653      	mov	r3, sl
 80075d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80075d4:	f7ff fed4 	bl	8007380 <__cvt>
 80075d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075da:	4680      	mov	r8, r0
 80075dc:	2947      	cmp	r1, #71	; 0x47
 80075de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075e0:	d108      	bne.n	80075f4 <_printf_float+0x138>
 80075e2:	1cc8      	adds	r0, r1, #3
 80075e4:	db02      	blt.n	80075ec <_printf_float+0x130>
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	4299      	cmp	r1, r3
 80075ea:	dd40      	ble.n	800766e <_printf_float+0x1b2>
 80075ec:	f1a9 0902 	sub.w	r9, r9, #2
 80075f0:	fa5f f989 	uxtb.w	r9, r9
 80075f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075f8:	d81f      	bhi.n	800763a <_printf_float+0x17e>
 80075fa:	464a      	mov	r2, r9
 80075fc:	3901      	subs	r1, #1
 80075fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007602:	910d      	str	r1, [sp, #52]	; 0x34
 8007604:	f7ff ff1b 	bl	800743e <__exponent>
 8007608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800760a:	4682      	mov	sl, r0
 800760c:	1813      	adds	r3, r2, r0
 800760e:	2a01      	cmp	r2, #1
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	dc02      	bgt.n	800761a <_printf_float+0x15e>
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	07d2      	lsls	r2, r2, #31
 8007618:	d501      	bpl.n	800761e <_printf_float+0x162>
 800761a:	3301      	adds	r3, #1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007622:	2b00      	cmp	r3, #0
 8007624:	d09b      	beq.n	800755e <_printf_float+0xa2>
 8007626:	232d      	movs	r3, #45	; 0x2d
 8007628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800762c:	e797      	b.n	800755e <_printf_float+0xa2>
 800762e:	2947      	cmp	r1, #71	; 0x47
 8007630:	d1bc      	bne.n	80075ac <_printf_float+0xf0>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1ba      	bne.n	80075ac <_printf_float+0xf0>
 8007636:	2301      	movs	r3, #1
 8007638:	e7b7      	b.n	80075aa <_printf_float+0xee>
 800763a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800763e:	d118      	bne.n	8007672 <_printf_float+0x1b6>
 8007640:	2900      	cmp	r1, #0
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	dd0b      	ble.n	800765e <_printf_float+0x1a2>
 8007646:	6121      	str	r1, [r4, #16]
 8007648:	b913      	cbnz	r3, 8007650 <_printf_float+0x194>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	07d0      	lsls	r0, r2, #31
 800764e:	d502      	bpl.n	8007656 <_printf_float+0x19a>
 8007650:	3301      	adds	r3, #1
 8007652:	440b      	add	r3, r1
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	f04f 0a00 	mov.w	sl, #0
 800765a:	65a1      	str	r1, [r4, #88]	; 0x58
 800765c:	e7df      	b.n	800761e <_printf_float+0x162>
 800765e:	b913      	cbnz	r3, 8007666 <_printf_float+0x1aa>
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	07d2      	lsls	r2, r2, #31
 8007664:	d501      	bpl.n	800766a <_printf_float+0x1ae>
 8007666:	3302      	adds	r3, #2
 8007668:	e7f4      	b.n	8007654 <_printf_float+0x198>
 800766a:	2301      	movs	r3, #1
 800766c:	e7f2      	b.n	8007654 <_printf_float+0x198>
 800766e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007674:	4299      	cmp	r1, r3
 8007676:	db05      	blt.n	8007684 <_printf_float+0x1c8>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	6121      	str	r1, [r4, #16]
 800767c:	07d8      	lsls	r0, r3, #31
 800767e:	d5ea      	bpl.n	8007656 <_printf_float+0x19a>
 8007680:	1c4b      	adds	r3, r1, #1
 8007682:	e7e7      	b.n	8007654 <_printf_float+0x198>
 8007684:	2900      	cmp	r1, #0
 8007686:	bfcc      	ite	gt
 8007688:	2201      	movgt	r2, #1
 800768a:	f1c1 0202 	rsble	r2, r1, #2
 800768e:	4413      	add	r3, r2
 8007690:	e7e0      	b.n	8007654 <_printf_float+0x198>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	055a      	lsls	r2, r3, #21
 8007696:	d407      	bmi.n	80076a8 <_printf_float+0x1ec>
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	4642      	mov	r2, r8
 800769c:	4631      	mov	r1, r6
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	d12b      	bne.n	80076fe <_printf_float+0x242>
 80076a6:	e764      	b.n	8007572 <_printf_float+0xb6>
 80076a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076ac:	f240 80dd 	bls.w	800786a <_printf_float+0x3ae>
 80076b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	f7f9 f976 	bl	80009a8 <__aeabi_dcmpeq>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d033      	beq.n	8007728 <_printf_float+0x26c>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	4a35      	ldr	r2, [pc, #212]	; (800779c <_printf_float+0x2e0>)
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f af51 	beq.w	8007572 <_printf_float+0xb6>
 80076d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076d4:	429a      	cmp	r2, r3
 80076d6:	db02      	blt.n	80076de <_printf_float+0x222>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07d8      	lsls	r0, r3, #31
 80076dc:	d50f      	bpl.n	80076fe <_printf_float+0x242>
 80076de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e2:	4631      	mov	r1, r6
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b8      	blx	r7
 80076e8:	3001      	adds	r0, #1
 80076ea:	f43f af42 	beq.w	8007572 <_printf_float+0xb6>
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	f104 091a 	add.w	r9, r4, #26
 80076f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076f8:	3b01      	subs	r3, #1
 80076fa:	4543      	cmp	r3, r8
 80076fc:	dc09      	bgt.n	8007712 <_printf_float+0x256>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	f100 8102 	bmi.w	800790a <_printf_float+0x44e>
 8007706:	68e0      	ldr	r0, [r4, #12]
 8007708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800770a:	4298      	cmp	r0, r3
 800770c:	bfb8      	it	lt
 800770e:	4618      	movlt	r0, r3
 8007710:	e731      	b.n	8007576 <_printf_float+0xba>
 8007712:	2301      	movs	r3, #1
 8007714:	464a      	mov	r2, r9
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f43f af28 	beq.w	8007572 <_printf_float+0xb6>
 8007722:	f108 0801 	add.w	r8, r8, #1
 8007726:	e7e6      	b.n	80076f6 <_printf_float+0x23a>
 8007728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772a:	2b00      	cmp	r3, #0
 800772c:	dc38      	bgt.n	80077a0 <_printf_float+0x2e4>
 800772e:	2301      	movs	r3, #1
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <_printf_float+0x2e0>)
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f af1a 	beq.w	8007572 <_printf_float+0xb6>
 800773e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007742:	4313      	orrs	r3, r2
 8007744:	d102      	bne.n	800774c <_printf_float+0x290>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	07d9      	lsls	r1, r3, #31
 800774a:	d5d8      	bpl.n	80076fe <_printf_float+0x242>
 800774c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f af0b 	beq.w	8007572 <_printf_float+0xb6>
 800775c:	f04f 0900 	mov.w	r9, #0
 8007760:	f104 0a1a 	add.w	sl, r4, #26
 8007764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007766:	425b      	negs	r3, r3
 8007768:	454b      	cmp	r3, r9
 800776a:	dc01      	bgt.n	8007770 <_printf_float+0x2b4>
 800776c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800776e:	e794      	b.n	800769a <_printf_float+0x1de>
 8007770:	2301      	movs	r3, #1
 8007772:	4652      	mov	r2, sl
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f aef9 	beq.w	8007572 <_printf_float+0xb6>
 8007780:	f109 0901 	add.w	r9, r9, #1
 8007784:	e7ee      	b.n	8007764 <_printf_float+0x2a8>
 8007786:	bf00      	nop
 8007788:	7fefffff 	.word	0x7fefffff
 800778c:	0800a264 	.word	0x0800a264
 8007790:	0800a268 	.word	0x0800a268
 8007794:	0800a270 	.word	0x0800a270
 8007798:	0800a26c 	.word	0x0800a26c
 800779c:	0800a274 	.word	0x0800a274
 80077a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077a4:	429a      	cmp	r2, r3
 80077a6:	bfa8      	it	ge
 80077a8:	461a      	movge	r2, r3
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	4691      	mov	r9, r2
 80077ae:	dc37      	bgt.n	8007820 <_printf_float+0x364>
 80077b0:	f04f 0b00 	mov.w	fp, #0
 80077b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077b8:	f104 021a 	add.w	r2, r4, #26
 80077bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077c0:	ebaa 0309 	sub.w	r3, sl, r9
 80077c4:	455b      	cmp	r3, fp
 80077c6:	dc33      	bgt.n	8007830 <_printf_float+0x374>
 80077c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077cc:	429a      	cmp	r2, r3
 80077ce:	db3b      	blt.n	8007848 <_printf_float+0x38c>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	07da      	lsls	r2, r3, #31
 80077d4:	d438      	bmi.n	8007848 <_printf_float+0x38c>
 80077d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077da:	eba3 020a 	sub.w	r2, r3, sl
 80077de:	eba3 0901 	sub.w	r9, r3, r1
 80077e2:	4591      	cmp	r9, r2
 80077e4:	bfa8      	it	ge
 80077e6:	4691      	movge	r9, r2
 80077e8:	f1b9 0f00 	cmp.w	r9, #0
 80077ec:	dc34      	bgt.n	8007858 <_printf_float+0x39c>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077f6:	f104 0a1a 	add.w	sl, r4, #26
 80077fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	eba3 0309 	sub.w	r3, r3, r9
 8007804:	4543      	cmp	r3, r8
 8007806:	f77f af7a 	ble.w	80076fe <_printf_float+0x242>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	f43f aeac 	beq.w	8007572 <_printf_float+0xb6>
 800781a:	f108 0801 	add.w	r8, r8, #1
 800781e:	e7ec      	b.n	80077fa <_printf_float+0x33e>
 8007820:	4613      	mov	r3, r2
 8007822:	4631      	mov	r1, r6
 8007824:	4642      	mov	r2, r8
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	d1c0      	bne.n	80077b0 <_printf_float+0x2f4>
 800782e:	e6a0      	b.n	8007572 <_printf_float+0xb6>
 8007830:	2301      	movs	r3, #1
 8007832:	4631      	mov	r1, r6
 8007834:	4628      	mov	r0, r5
 8007836:	920b      	str	r2, [sp, #44]	; 0x2c
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f ae99 	beq.w	8007572 <_printf_float+0xb6>
 8007840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007842:	f10b 0b01 	add.w	fp, fp, #1
 8007846:	e7b9      	b.n	80077bc <_printf_float+0x300>
 8007848:	4631      	mov	r1, r6
 800784a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	d1bf      	bne.n	80077d6 <_printf_float+0x31a>
 8007856:	e68c      	b.n	8007572 <_printf_float+0xb6>
 8007858:	464b      	mov	r3, r9
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	eb08 020a 	add.w	r2, r8, sl
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	d1c2      	bne.n	80077ee <_printf_float+0x332>
 8007868:	e683      	b.n	8007572 <_printf_float+0xb6>
 800786a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800786c:	2a01      	cmp	r2, #1
 800786e:	dc01      	bgt.n	8007874 <_printf_float+0x3b8>
 8007870:	07db      	lsls	r3, r3, #31
 8007872:	d537      	bpl.n	80078e4 <_printf_float+0x428>
 8007874:	2301      	movs	r3, #1
 8007876:	4642      	mov	r2, r8
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f ae77 	beq.w	8007572 <_printf_float+0xb6>
 8007884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f ae6f 	beq.w	8007572 <_printf_float+0xb6>
 8007894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007898:	2200      	movs	r2, #0
 800789a:	2300      	movs	r3, #0
 800789c:	f7f9 f884 	bl	80009a8 <__aeabi_dcmpeq>
 80078a0:	b9d8      	cbnz	r0, 80078da <_printf_float+0x41e>
 80078a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a4:	f108 0201 	add.w	r2, r8, #1
 80078a8:	3b01      	subs	r3, #1
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	d10e      	bne.n	80078d2 <_printf_float+0x416>
 80078b4:	e65d      	b.n	8007572 <_printf_float+0xb6>
 80078b6:	2301      	movs	r3, #1
 80078b8:	464a      	mov	r2, r9
 80078ba:	4631      	mov	r1, r6
 80078bc:	4628      	mov	r0, r5
 80078be:	47b8      	blx	r7
 80078c0:	3001      	adds	r0, #1
 80078c2:	f43f ae56 	beq.w	8007572 <_printf_float+0xb6>
 80078c6:	f108 0801 	add.w	r8, r8, #1
 80078ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4543      	cmp	r3, r8
 80078d0:	dcf1      	bgt.n	80078b6 <_printf_float+0x3fa>
 80078d2:	4653      	mov	r3, sl
 80078d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078d8:	e6e0      	b.n	800769c <_printf_float+0x1e0>
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	f104 091a 	add.w	r9, r4, #26
 80078e2:	e7f2      	b.n	80078ca <_printf_float+0x40e>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4642      	mov	r2, r8
 80078e8:	e7df      	b.n	80078aa <_printf_float+0x3ee>
 80078ea:	2301      	movs	r3, #1
 80078ec:	464a      	mov	r2, r9
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	f43f ae3c 	beq.w	8007572 <_printf_float+0xb6>
 80078fa:	f108 0801 	add.w	r8, r8, #1
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007902:	1a5b      	subs	r3, r3, r1
 8007904:	4543      	cmp	r3, r8
 8007906:	dcf0      	bgt.n	80078ea <_printf_float+0x42e>
 8007908:	e6fd      	b.n	8007706 <_printf_float+0x24a>
 800790a:	f04f 0800 	mov.w	r8, #0
 800790e:	f104 0919 	add.w	r9, r4, #25
 8007912:	e7f4      	b.n	80078fe <_printf_float+0x442>

08007914 <_printf_common>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	4616      	mov	r6, r2
 800791a:	4699      	mov	r9, r3
 800791c:	688a      	ldr	r2, [r1, #8]
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	4607      	mov	r7, r0
 8007922:	4293      	cmp	r3, r2
 8007924:	bfb8      	it	lt
 8007926:	4613      	movlt	r3, r2
 8007928:	6033      	str	r3, [r6, #0]
 800792a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800792e:	460c      	mov	r4, r1
 8007930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007934:	b10a      	cbz	r2, 800793a <_printf_common+0x26>
 8007936:	3301      	adds	r3, #1
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	0699      	lsls	r1, r3, #26
 800793e:	bf42      	ittt	mi
 8007940:	6833      	ldrmi	r3, [r6, #0]
 8007942:	3302      	addmi	r3, #2
 8007944:	6033      	strmi	r3, [r6, #0]
 8007946:	6825      	ldr	r5, [r4, #0]
 8007948:	f015 0506 	ands.w	r5, r5, #6
 800794c:	d106      	bne.n	800795c <_printf_common+0x48>
 800794e:	f104 0a19 	add.w	sl, r4, #25
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	6832      	ldr	r2, [r6, #0]
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	42ab      	cmp	r3, r5
 800795a:	dc28      	bgt.n	80079ae <_printf_common+0x9a>
 800795c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007960:	1e13      	subs	r3, r2, #0
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	bf18      	it	ne
 8007966:	2301      	movne	r3, #1
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d42d      	bmi.n	80079c8 <_printf_common+0xb4>
 800796c:	4649      	mov	r1, r9
 800796e:	4638      	mov	r0, r7
 8007970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d020      	beq.n	80079bc <_printf_common+0xa8>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	68e5      	ldr	r5, [r4, #12]
 800797e:	f003 0306 	and.w	r3, r3, #6
 8007982:	2b04      	cmp	r3, #4
 8007984:	bf18      	it	ne
 8007986:	2500      	movne	r5, #0
 8007988:	6832      	ldr	r2, [r6, #0]
 800798a:	f04f 0600 	mov.w	r6, #0
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	bf08      	it	eq
 8007992:	1aad      	subeq	r5, r5, r2
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	bf08      	it	eq
 8007998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800799c:	4293      	cmp	r3, r2
 800799e:	bfc4      	itt	gt
 80079a0:	1a9b      	subgt	r3, r3, r2
 80079a2:	18ed      	addgt	r5, r5, r3
 80079a4:	341a      	adds	r4, #26
 80079a6:	42b5      	cmp	r5, r6
 80079a8:	d11a      	bne.n	80079e0 <_printf_common+0xcc>
 80079aa:	2000      	movs	r0, #0
 80079ac:	e008      	b.n	80079c0 <_printf_common+0xac>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4652      	mov	r2, sl
 80079b2:	4649      	mov	r1, r9
 80079b4:	4638      	mov	r0, r7
 80079b6:	47c0      	blx	r8
 80079b8:	3001      	adds	r0, #1
 80079ba:	d103      	bne.n	80079c4 <_printf_common+0xb0>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c4:	3501      	adds	r5, #1
 80079c6:	e7c4      	b.n	8007952 <_printf_common+0x3e>
 80079c8:	2030      	movs	r0, #48	; 0x30
 80079ca:	18e1      	adds	r1, r4, r3
 80079cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079d6:	4422      	add	r2, r4
 80079d8:	3302      	adds	r3, #2
 80079da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079de:	e7c5      	b.n	800796c <_printf_common+0x58>
 80079e0:	2301      	movs	r3, #1
 80079e2:	4622      	mov	r2, r4
 80079e4:	4649      	mov	r1, r9
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d0e6      	beq.n	80079bc <_printf_common+0xa8>
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7d9      	b.n	80079a6 <_printf_common+0x92>
	...

080079f4 <_printf_i>:
 80079f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	7e0f      	ldrb	r7, [r1, #24]
 80079fa:	4691      	mov	r9, r2
 80079fc:	2f78      	cmp	r7, #120	; 0x78
 80079fe:	4680      	mov	r8, r0
 8007a00:	460c      	mov	r4, r1
 8007a02:	469a      	mov	sl, r3
 8007a04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a0a:	d807      	bhi.n	8007a1c <_printf_i+0x28>
 8007a0c:	2f62      	cmp	r7, #98	; 0x62
 8007a0e:	d80a      	bhi.n	8007a26 <_printf_i+0x32>
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	f000 80d9 	beq.w	8007bc8 <_printf_i+0x1d4>
 8007a16:	2f58      	cmp	r7, #88	; 0x58
 8007a18:	f000 80a4 	beq.w	8007b64 <_printf_i+0x170>
 8007a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a24:	e03a      	b.n	8007a9c <_printf_i+0xa8>
 8007a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a2a:	2b15      	cmp	r3, #21
 8007a2c:	d8f6      	bhi.n	8007a1c <_printf_i+0x28>
 8007a2e:	a101      	add	r1, pc, #4	; (adr r1, 8007a34 <_printf_i+0x40>)
 8007a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007a1d 	.word	0x08007a1d
 8007a40:	08007a1d 	.word	0x08007a1d
 8007a44:	08007a1d 	.word	0x08007a1d
 8007a48:	08007a1d 	.word	0x08007a1d
 8007a4c:	08007aa1 	.word	0x08007aa1
 8007a50:	08007a1d 	.word	0x08007a1d
 8007a54:	08007a1d 	.word	0x08007a1d
 8007a58:	08007a1d 	.word	0x08007a1d
 8007a5c:	08007a1d 	.word	0x08007a1d
 8007a60:	08007baf 	.word	0x08007baf
 8007a64:	08007ad1 	.word	0x08007ad1
 8007a68:	08007b91 	.word	0x08007b91
 8007a6c:	08007a1d 	.word	0x08007a1d
 8007a70:	08007a1d 	.word	0x08007a1d
 8007a74:	08007bd1 	.word	0x08007bd1
 8007a78:	08007a1d 	.word	0x08007a1d
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007a1d 	.word	0x08007a1d
 8007a84:	08007a1d 	.word	0x08007a1d
 8007a88:	08007b99 	.word	0x08007b99
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	1d1a      	adds	r2, r3, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0a4      	b.n	8007bea <_printf_i+0x1f6>
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	6829      	ldr	r1, [r5, #0]
 8007aa4:	0606      	lsls	r6, r0, #24
 8007aa6:	f101 0304 	add.w	r3, r1, #4
 8007aaa:	d50a      	bpl.n	8007ac2 <_printf_i+0xce>
 8007aac:	680e      	ldr	r6, [r1, #0]
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	da03      	bge.n	8007abc <_printf_i+0xc8>
 8007ab4:	232d      	movs	r3, #45	; 0x2d
 8007ab6:	4276      	negs	r6, r6
 8007ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007abc:	230a      	movs	r3, #10
 8007abe:	485e      	ldr	r0, [pc, #376]	; (8007c38 <_printf_i+0x244>)
 8007ac0:	e019      	b.n	8007af6 <_printf_i+0x102>
 8007ac2:	680e      	ldr	r6, [r1, #0]
 8007ac4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	bf18      	it	ne
 8007acc:	b236      	sxthne	r6, r6
 8007ace:	e7ef      	b.n	8007ab0 <_printf_i+0xbc>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6029      	str	r1, [r5, #0]
 8007ad8:	0601      	lsls	r1, r0, #24
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0xec>
 8007adc:	681e      	ldr	r6, [r3, #0]
 8007ade:	e002      	b.n	8007ae6 <_printf_i+0xf2>
 8007ae0:	0646      	lsls	r6, r0, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0xe8>
 8007ae4:	881e      	ldrh	r6, [r3, #0]
 8007ae6:	2f6f      	cmp	r7, #111	; 0x6f
 8007ae8:	bf0c      	ite	eq
 8007aea:	2308      	moveq	r3, #8
 8007aec:	230a      	movne	r3, #10
 8007aee:	4852      	ldr	r0, [pc, #328]	; (8007c38 <_printf_i+0x244>)
 8007af0:	2100      	movs	r1, #0
 8007af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007af6:	6865      	ldr	r5, [r4, #4]
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	bfa8      	it	ge
 8007afc:	6821      	ldrge	r1, [r4, #0]
 8007afe:	60a5      	str	r5, [r4, #8]
 8007b00:	bfa4      	itt	ge
 8007b02:	f021 0104 	bicge.w	r1, r1, #4
 8007b06:	6021      	strge	r1, [r4, #0]
 8007b08:	b90e      	cbnz	r6, 8007b0e <_printf_i+0x11a>
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	d04d      	beq.n	8007baa <_printf_i+0x1b6>
 8007b0e:	4615      	mov	r5, r2
 8007b10:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b14:	fb03 6711 	mls	r7, r3, r1, r6
 8007b18:	5dc7      	ldrb	r7, [r0, r7]
 8007b1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b1e:	4637      	mov	r7, r6
 8007b20:	42bb      	cmp	r3, r7
 8007b22:	460e      	mov	r6, r1
 8007b24:	d9f4      	bls.n	8007b10 <_printf_i+0x11c>
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d10b      	bne.n	8007b42 <_printf_i+0x14e>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	07de      	lsls	r6, r3, #31
 8007b2e:	d508      	bpl.n	8007b42 <_printf_i+0x14e>
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	6861      	ldr	r1, [r4, #4]
 8007b34:	4299      	cmp	r1, r3
 8007b36:	bfde      	ittt	le
 8007b38:	2330      	movle	r3, #48	; 0x30
 8007b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b42:	1b52      	subs	r2, r2, r5
 8007b44:	6122      	str	r2, [r4, #16]
 8007b46:	464b      	mov	r3, r9
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f8cd a000 	str.w	sl, [sp]
 8007b50:	aa03      	add	r2, sp, #12
 8007b52:	f7ff fedf 	bl	8007914 <_printf_common>
 8007b56:	3001      	adds	r0, #1
 8007b58:	d14c      	bne.n	8007bf4 <_printf_i+0x200>
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b5e:	b004      	add	sp, #16
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	4834      	ldr	r0, [pc, #208]	; (8007c38 <_printf_i+0x244>)
 8007b66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b6a:	6829      	ldr	r1, [r5, #0]
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b72:	6029      	str	r1, [r5, #0]
 8007b74:	061d      	lsls	r5, r3, #24
 8007b76:	d514      	bpl.n	8007ba2 <_printf_i+0x1ae>
 8007b78:	07df      	lsls	r7, r3, #31
 8007b7a:	bf44      	itt	mi
 8007b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b80:	6023      	strmi	r3, [r4, #0]
 8007b82:	b91e      	cbnz	r6, 8007b8c <_printf_i+0x198>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	e7af      	b.n	8007af0 <_printf_i+0xfc>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	f043 0320 	orr.w	r3, r3, #32
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	2378      	movs	r3, #120	; 0x78
 8007b9a:	4828      	ldr	r0, [pc, #160]	; (8007c3c <_printf_i+0x248>)
 8007b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ba0:	e7e3      	b.n	8007b6a <_printf_i+0x176>
 8007ba2:	0659      	lsls	r1, r3, #25
 8007ba4:	bf48      	it	mi
 8007ba6:	b2b6      	uxthmi	r6, r6
 8007ba8:	e7e6      	b.n	8007b78 <_printf_i+0x184>
 8007baa:	4615      	mov	r5, r2
 8007bac:	e7bb      	b.n	8007b26 <_printf_i+0x132>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	6826      	ldr	r6, [r4, #0]
 8007bb2:	1d18      	adds	r0, r3, #4
 8007bb4:	6961      	ldr	r1, [r4, #20]
 8007bb6:	6028      	str	r0, [r5, #0]
 8007bb8:	0635      	lsls	r5, r6, #24
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	d501      	bpl.n	8007bc2 <_printf_i+0x1ce>
 8007bbe:	6019      	str	r1, [r3, #0]
 8007bc0:	e002      	b.n	8007bc8 <_printf_i+0x1d4>
 8007bc2:	0670      	lsls	r0, r6, #25
 8007bc4:	d5fb      	bpl.n	8007bbe <_printf_i+0x1ca>
 8007bc6:	8019      	strh	r1, [r3, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4615      	mov	r5, r2
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	e7ba      	b.n	8007b46 <_printf_i+0x152>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	1d1a      	adds	r2, r3, #4
 8007bd6:	602a      	str	r2, [r5, #0]
 8007bd8:	681d      	ldr	r5, [r3, #0]
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 ff09 	bl	80089f4 <memchr>
 8007be2:	b108      	cbz	r0, 8007be8 <_printf_i+0x1f4>
 8007be4:	1b40      	subs	r0, r0, r5
 8007be6:	6060      	str	r0, [r4, #4]
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	2300      	movs	r3, #0
 8007bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf2:	e7a8      	b.n	8007b46 <_printf_i+0x152>
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	47d0      	blx	sl
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d0ab      	beq.n	8007b5a <_printf_i+0x166>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	079b      	lsls	r3, r3, #30
 8007c06:	d413      	bmi.n	8007c30 <_printf_i+0x23c>
 8007c08:	68e0      	ldr	r0, [r4, #12]
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	4298      	cmp	r0, r3
 8007c0e:	bfb8      	it	lt
 8007c10:	4618      	movlt	r0, r3
 8007c12:	e7a4      	b.n	8007b5e <_printf_i+0x16a>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4632      	mov	r2, r6
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	47d0      	blx	sl
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d09b      	beq.n	8007b5a <_printf_i+0x166>
 8007c22:	3501      	adds	r5, #1
 8007c24:	68e3      	ldr	r3, [r4, #12]
 8007c26:	9903      	ldr	r1, [sp, #12]
 8007c28:	1a5b      	subs	r3, r3, r1
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	dcf2      	bgt.n	8007c14 <_printf_i+0x220>
 8007c2e:	e7eb      	b.n	8007c08 <_printf_i+0x214>
 8007c30:	2500      	movs	r5, #0
 8007c32:	f104 0619 	add.w	r6, r4, #25
 8007c36:	e7f5      	b.n	8007c24 <_printf_i+0x230>
 8007c38:	0800a276 	.word	0x0800a276
 8007c3c:	0800a287 	.word	0x0800a287

08007c40 <sniprintf>:
 8007c40:	b40c      	push	{r2, r3}
 8007c42:	b530      	push	{r4, r5, lr}
 8007c44:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <sniprintf+0x64>)
 8007c46:	1e0c      	subs	r4, r1, #0
 8007c48:	681d      	ldr	r5, [r3, #0]
 8007c4a:	b09d      	sub	sp, #116	; 0x74
 8007c4c:	da08      	bge.n	8007c60 <sniprintf+0x20>
 8007c4e:	238b      	movs	r3, #139	; 0x8b
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	b01d      	add	sp, #116	; 0x74
 8007c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c5c:	b002      	add	sp, #8
 8007c5e:	4770      	bx	lr
 8007c60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c68:	bf0c      	ite	eq
 8007c6a:	4623      	moveq	r3, r4
 8007c6c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c78:	9002      	str	r0, [sp, #8]
 8007c7a:	9006      	str	r0, [sp, #24]
 8007c7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c80:	4628      	mov	r0, r5
 8007c82:	ab21      	add	r3, sp, #132	; 0x84
 8007c84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c86:	a902      	add	r1, sp, #8
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	f001 fb9d 	bl	80093c8 <_svfiprintf_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	bfbc      	itt	lt
 8007c92:	238b      	movlt	r3, #139	; 0x8b
 8007c94:	602b      	strlt	r3, [r5, #0]
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	d0dd      	beq.n	8007c56 <sniprintf+0x16>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	701a      	strb	r2, [r3, #0]
 8007ca0:	e7d9      	b.n	8007c56 <sniprintf+0x16>
 8007ca2:	bf00      	nop
 8007ca4:	20000018 	.word	0x20000018

08007ca8 <siprintf>:
 8007ca8:	b40e      	push	{r1, r2, r3}
 8007caa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cae:	b500      	push	{lr}
 8007cb0:	b09c      	sub	sp, #112	; 0x70
 8007cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8007cb4:	9002      	str	r0, [sp, #8]
 8007cb6:	9006      	str	r0, [sp, #24]
 8007cb8:	9107      	str	r1, [sp, #28]
 8007cba:	9104      	str	r1, [sp, #16]
 8007cbc:	4808      	ldr	r0, [pc, #32]	; (8007ce0 <siprintf+0x38>)
 8007cbe:	4909      	ldr	r1, [pc, #36]	; (8007ce4 <siprintf+0x3c>)
 8007cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	6800      	ldr	r0, [r0, #0]
 8007cc8:	a902      	add	r1, sp, #8
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	f001 fb7c 	bl	80093c8 <_svfiprintf_r>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	9b02      	ldr	r3, [sp, #8]
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	b01c      	add	sp, #112	; 0x70
 8007cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cdc:	b003      	add	sp, #12
 8007cde:	4770      	bx	lr
 8007ce0:	20000018 	.word	0x20000018
 8007ce4:	ffff0208 	.word	0xffff0208

08007ce8 <quorem>:
 8007ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	6903      	ldr	r3, [r0, #16]
 8007cee:	690c      	ldr	r4, [r1, #16]
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	f2c0 8082 	blt.w	8007dfc <quorem+0x114>
 8007cf8:	3c01      	subs	r4, #1
 8007cfa:	f100 0514 	add.w	r5, r0, #20
 8007cfe:	f101 0814 	add.w	r8, r1, #20
 8007d02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d10:	3301      	adds	r3, #1
 8007d12:	429a      	cmp	r2, r3
 8007d14:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d20:	d331      	bcc.n	8007d86 <quorem+0x9e>
 8007d22:	f04f 0e00 	mov.w	lr, #0
 8007d26:	4640      	mov	r0, r8
 8007d28:	46ac      	mov	ip, r5
 8007d2a:	46f2      	mov	sl, lr
 8007d2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d30:	b293      	uxth	r3, r2
 8007d32:	fb06 e303 	mla	r3, r6, r3, lr
 8007d36:	0c12      	lsrs	r2, r2, #16
 8007d38:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	fb06 e202 	mla	r2, r6, r2, lr
 8007d42:	ebaa 0303 	sub.w	r3, sl, r3
 8007d46:	f8dc a000 	ldr.w	sl, [ip]
 8007d4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d4e:	fa1f fa8a 	uxth.w	sl, sl
 8007d52:	4453      	add	r3, sl
 8007d54:	f8dc a000 	ldr.w	sl, [ip]
 8007d58:	b292      	uxth	r2, r2
 8007d5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d68:	4581      	cmp	r9, r0
 8007d6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d6e:	f84c 3b04 	str.w	r3, [ip], #4
 8007d72:	d2db      	bcs.n	8007d2c <quorem+0x44>
 8007d74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d78:	b92b      	cbnz	r3, 8007d86 <quorem+0x9e>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	d32f      	bcc.n	8007de4 <quorem+0xfc>
 8007d84:	613c      	str	r4, [r7, #16]
 8007d86:	4638      	mov	r0, r7
 8007d88:	f001 f8ce 	bl	8008f28 <__mcmp>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	db25      	blt.n	8007ddc <quorem+0xf4>
 8007d90:	4628      	mov	r0, r5
 8007d92:	f04f 0c00 	mov.w	ip, #0
 8007d96:	3601      	adds	r6, #1
 8007d98:	f858 1b04 	ldr.w	r1, [r8], #4
 8007d9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007da0:	b28b      	uxth	r3, r1
 8007da2:	ebac 0303 	sub.w	r3, ip, r3
 8007da6:	fa1f f28e 	uxth.w	r2, lr
 8007daa:	4413      	add	r3, r2
 8007dac:	0c0a      	lsrs	r2, r1, #16
 8007dae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007db2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dbc:	45c1      	cmp	r9, r8
 8007dbe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dc2:	f840 3b04 	str.w	r3, [r0], #4
 8007dc6:	d2e7      	bcs.n	8007d98 <quorem+0xb0>
 8007dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dd0:	b922      	cbnz	r2, 8007ddc <quorem+0xf4>
 8007dd2:	3b04      	subs	r3, #4
 8007dd4:	429d      	cmp	r5, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	d30a      	bcc.n	8007df0 <quorem+0x108>
 8007dda:	613c      	str	r4, [r7, #16]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	b003      	add	sp, #12
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	3b04      	subs	r3, #4
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d1cb      	bne.n	8007d84 <quorem+0x9c>
 8007dec:	3c01      	subs	r4, #1
 8007dee:	e7c6      	b.n	8007d7e <quorem+0x96>
 8007df0:	6812      	ldr	r2, [r2, #0]
 8007df2:	3b04      	subs	r3, #4
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	d1f0      	bne.n	8007dda <quorem+0xf2>
 8007df8:	3c01      	subs	r4, #1
 8007dfa:	e7eb      	b.n	8007dd4 <quorem+0xec>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e7ee      	b.n	8007dde <quorem+0xf6>

08007e00 <_dtoa_r>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	4616      	mov	r6, r2
 8007e06:	461f      	mov	r7, r3
 8007e08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e0a:	b099      	sub	sp, #100	; 0x64
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007e16:	b974      	cbnz	r4, 8007e36 <_dtoa_r+0x36>
 8007e18:	2010      	movs	r0, #16
 8007e1a:	f000 fde3 	bl	80089e4 <malloc>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6268      	str	r0, [r5, #36]	; 0x24
 8007e22:	b920      	cbnz	r0, 8007e2e <_dtoa_r+0x2e>
 8007e24:	21ea      	movs	r1, #234	; 0xea
 8007e26:	4ba8      	ldr	r3, [pc, #672]	; (80080c8 <_dtoa_r+0x2c8>)
 8007e28:	48a8      	ldr	r0, [pc, #672]	; (80080cc <_dtoa_r+0x2cc>)
 8007e2a:	f001 fbdd 	bl	80095e8 <__assert_func>
 8007e2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e32:	6004      	str	r4, [r0, #0]
 8007e34:	60c4      	str	r4, [r0, #12]
 8007e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	b151      	cbz	r1, 8007e52 <_dtoa_r+0x52>
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4093      	lsls	r3, r2
 8007e42:	604a      	str	r2, [r1, #4]
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 fe30 	bl	8008aac <_Bfree>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	1e3b      	subs	r3, r7, #0
 8007e54:	bfaf      	iteee	ge
 8007e56:	2300      	movge	r3, #0
 8007e58:	2201      	movlt	r2, #1
 8007e5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	9305      	strlt	r3, [sp, #20]
 8007e60:	bfa8      	it	ge
 8007e62:	f8c8 3000 	strge.w	r3, [r8]
 8007e66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e6a:	4b99      	ldr	r3, [pc, #612]	; (80080d0 <_dtoa_r+0x2d0>)
 8007e6c:	bfb8      	it	lt
 8007e6e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e72:	ea33 0309 	bics.w	r3, r3, r9
 8007e76:	d119      	bne.n	8007eac <_dtoa_r+0xac>
 8007e78:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e84:	4333      	orrs	r3, r6
 8007e86:	f000 857f 	beq.w	8008988 <_dtoa_r+0xb88>
 8007e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e8c:	b953      	cbnz	r3, 8007ea4 <_dtoa_r+0xa4>
 8007e8e:	4b91      	ldr	r3, [pc, #580]	; (80080d4 <_dtoa_r+0x2d4>)
 8007e90:	e022      	b.n	8007ed8 <_dtoa_r+0xd8>
 8007e92:	4b91      	ldr	r3, [pc, #580]	; (80080d8 <_dtoa_r+0x2d8>)
 8007e94:	9303      	str	r3, [sp, #12]
 8007e96:	3308      	adds	r3, #8
 8007e98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	9803      	ldr	r0, [sp, #12]
 8007e9e:	b019      	add	sp, #100	; 0x64
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea4:	4b8b      	ldr	r3, [pc, #556]	; (80080d4 <_dtoa_r+0x2d4>)
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	3303      	adds	r3, #3
 8007eaa:	e7f5      	b.n	8007e98 <_dtoa_r+0x98>
 8007eac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007eb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f7f8 fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	b158      	cbz	r0, 8007edc <_dtoa_r+0xdc>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8558 	beq.w	8008982 <_dtoa_r+0xb82>
 8007ed2:	4882      	ldr	r0, [pc, #520]	; (80080dc <_dtoa_r+0x2dc>)
 8007ed4:	6018      	str	r0, [r3, #0]
 8007ed6:	1e43      	subs	r3, r0, #1
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	e7df      	b.n	8007e9c <_dtoa_r+0x9c>
 8007edc:	ab16      	add	r3, sp, #88	; 0x58
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007eea:	f001 f8c5 	bl	8009078 <__d2b>
 8007eee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ef2:	4683      	mov	fp, r0
 8007ef4:	2c00      	cmp	r4, #0
 8007ef6:	d07f      	beq.n	8007ff8 <_dtoa_r+0x1f8>
 8007ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007efe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007f0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007f0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f12:	2200      	movs	r2, #0
 8007f14:	4b72      	ldr	r3, [pc, #456]	; (80080e0 <_dtoa_r+0x2e0>)
 8007f16:	f7f8 f927 	bl	8000168 <__aeabi_dsub>
 8007f1a:	a365      	add	r3, pc, #404	; (adr r3, 80080b0 <_dtoa_r+0x2b0>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f7f8 fada 	bl	80004d8 <__aeabi_dmul>
 8007f24:	a364      	add	r3, pc, #400	; (adr r3, 80080b8 <_dtoa_r+0x2b8>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f7f8 f91f 	bl	800016c <__adddf3>
 8007f2e:	4606      	mov	r6, r0
 8007f30:	4620      	mov	r0, r4
 8007f32:	460f      	mov	r7, r1
 8007f34:	f7f8 fa66 	bl	8000404 <__aeabi_i2d>
 8007f38:	a361      	add	r3, pc, #388	; (adr r3, 80080c0 <_dtoa_r+0x2c0>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 facb 	bl	80004d8 <__aeabi_dmul>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 f90f 	bl	800016c <__adddf3>
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	f7f8 fd71 	bl	8000a38 <__aeabi_d2iz>
 8007f56:	2200      	movs	r2, #0
 8007f58:	4682      	mov	sl, r0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 fd2c 	bl	80009bc <__aeabi_dcmplt>
 8007f64:	b148      	cbz	r0, 8007f7a <_dtoa_r+0x17a>
 8007f66:	4650      	mov	r0, sl
 8007f68:	f7f8 fa4c 	bl	8000404 <__aeabi_i2d>
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	f7f8 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007f74:	b908      	cbnz	r0, 8007f7a <_dtoa_r+0x17a>
 8007f76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f7a:	f1ba 0f16 	cmp.w	sl, #22
 8007f7e:	d858      	bhi.n	8008032 <_dtoa_r+0x232>
 8007f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f84:	4b57      	ldr	r3, [pc, #348]	; (80080e4 <_dtoa_r+0x2e4>)
 8007f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 fd15 	bl	80009bc <__aeabi_dcmplt>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d04f      	beq.n	8008036 <_dtoa_r+0x236>
 8007f96:	2300      	movs	r3, #0
 8007f98:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fa0:	1b1c      	subs	r4, r3, r4
 8007fa2:	1e63      	subs	r3, r4, #1
 8007fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa6:	bf49      	itett	mi
 8007fa8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007fac:	2300      	movpl	r3, #0
 8007fae:	9306      	strmi	r3, [sp, #24]
 8007fb0:	2300      	movmi	r3, #0
 8007fb2:	bf54      	ite	pl
 8007fb4:	9306      	strpl	r3, [sp, #24]
 8007fb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007fb8:	f1ba 0f00 	cmp.w	sl, #0
 8007fbc:	db3d      	blt.n	800803a <_dtoa_r+0x23a>
 8007fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007fc4:	4453      	add	r3, sl
 8007fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc8:	2300      	movs	r3, #0
 8007fca:	930a      	str	r3, [sp, #40]	; 0x28
 8007fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fce:	2b09      	cmp	r3, #9
 8007fd0:	f200 808c 	bhi.w	80080ec <_dtoa_r+0x2ec>
 8007fd4:	2b05      	cmp	r3, #5
 8007fd6:	bfc4      	itt	gt
 8007fd8:	3b04      	subgt	r3, #4
 8007fda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fde:	bfc8      	it	gt
 8007fe0:	2400      	movgt	r4, #0
 8007fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8007fe6:	bfd8      	it	le
 8007fe8:	2401      	movle	r4, #1
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	f200 808a 	bhi.w	8008104 <_dtoa_r+0x304>
 8007ff0:	e8df f003 	tbb	[pc, r3]
 8007ff4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007ff8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007ffc:	441c      	add	r4, r3
 8007ffe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008002:	2b20      	cmp	r3, #32
 8008004:	bfc3      	ittte	gt
 8008006:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800800a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800800e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008012:	f1c3 0320 	rsble	r3, r3, #32
 8008016:	bfc6      	itte	gt
 8008018:	fa26 f000 	lsrgt.w	r0, r6, r0
 800801c:	4318      	orrgt	r0, r3
 800801e:	fa06 f003 	lslle.w	r0, r6, r3
 8008022:	f7f8 f9df 	bl	80003e4 <__aeabi_ui2d>
 8008026:	2301      	movs	r3, #1
 8008028:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800802c:	3c01      	subs	r4, #1
 800802e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008030:	e76f      	b.n	8007f12 <_dtoa_r+0x112>
 8008032:	2301      	movs	r3, #1
 8008034:	e7b2      	b.n	8007f9c <_dtoa_r+0x19c>
 8008036:	900f      	str	r0, [sp, #60]	; 0x3c
 8008038:	e7b1      	b.n	8007f9e <_dtoa_r+0x19e>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	eba3 030a 	sub.w	r3, r3, sl
 8008040:	9306      	str	r3, [sp, #24]
 8008042:	f1ca 0300 	rsb	r3, sl, #0
 8008046:	930a      	str	r3, [sp, #40]	; 0x28
 8008048:	2300      	movs	r3, #0
 800804a:	930e      	str	r3, [sp, #56]	; 0x38
 800804c:	e7be      	b.n	8007fcc <_dtoa_r+0x1cc>
 800804e:	2300      	movs	r3, #0
 8008050:	930b      	str	r3, [sp, #44]	; 0x2c
 8008052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008054:	2b00      	cmp	r3, #0
 8008056:	dc58      	bgt.n	800810a <_dtoa_r+0x30a>
 8008058:	f04f 0901 	mov.w	r9, #1
 800805c:	464b      	mov	r3, r9
 800805e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008062:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008066:	2200      	movs	r2, #0
 8008068:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800806a:	6042      	str	r2, [r0, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	f102 0614 	add.w	r6, r2, #20
 8008072:	429e      	cmp	r6, r3
 8008074:	6841      	ldr	r1, [r0, #4]
 8008076:	d94e      	bls.n	8008116 <_dtoa_r+0x316>
 8008078:	4628      	mov	r0, r5
 800807a:	f000 fcd7 	bl	8008a2c <_Balloc>
 800807e:	9003      	str	r0, [sp, #12]
 8008080:	2800      	cmp	r0, #0
 8008082:	d14c      	bne.n	800811e <_dtoa_r+0x31e>
 8008084:	4602      	mov	r2, r0
 8008086:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800808a:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <_dtoa_r+0x2e8>)
 800808c:	e6cc      	b.n	8007e28 <_dtoa_r+0x28>
 800808e:	2301      	movs	r3, #1
 8008090:	e7de      	b.n	8008050 <_dtoa_r+0x250>
 8008092:	2300      	movs	r3, #0
 8008094:	930b      	str	r3, [sp, #44]	; 0x2c
 8008096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008098:	eb0a 0903 	add.w	r9, sl, r3
 800809c:	f109 0301 	add.w	r3, r9, #1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	9308      	str	r3, [sp, #32]
 80080a4:	bfb8      	it	lt
 80080a6:	2301      	movlt	r3, #1
 80080a8:	e7dd      	b.n	8008066 <_dtoa_r+0x266>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e7f2      	b.n	8008094 <_dtoa_r+0x294>
 80080ae:	bf00      	nop
 80080b0:	636f4361 	.word	0x636f4361
 80080b4:	3fd287a7 	.word	0x3fd287a7
 80080b8:	8b60c8b3 	.word	0x8b60c8b3
 80080bc:	3fc68a28 	.word	0x3fc68a28
 80080c0:	509f79fb 	.word	0x509f79fb
 80080c4:	3fd34413 	.word	0x3fd34413
 80080c8:	0800a2a5 	.word	0x0800a2a5
 80080cc:	0800a2bc 	.word	0x0800a2bc
 80080d0:	7ff00000 	.word	0x7ff00000
 80080d4:	0800a2a1 	.word	0x0800a2a1
 80080d8:	0800a298 	.word	0x0800a298
 80080dc:	0800a275 	.word	0x0800a275
 80080e0:	3ff80000 	.word	0x3ff80000
 80080e4:	0800a3b0 	.word	0x0800a3b0
 80080e8:	0800a317 	.word	0x0800a317
 80080ec:	2401      	movs	r4, #1
 80080ee:	2300      	movs	r3, #0
 80080f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80080f2:	9322      	str	r3, [sp, #136]	; 0x88
 80080f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80080f8:	2200      	movs	r2, #0
 80080fa:	2312      	movs	r3, #18
 80080fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8008100:	9223      	str	r2, [sp, #140]	; 0x8c
 8008102:	e7b0      	b.n	8008066 <_dtoa_r+0x266>
 8008104:	2301      	movs	r3, #1
 8008106:	930b      	str	r3, [sp, #44]	; 0x2c
 8008108:	e7f4      	b.n	80080f4 <_dtoa_r+0x2f4>
 800810a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800810e:	464b      	mov	r3, r9
 8008110:	f8cd 9020 	str.w	r9, [sp, #32]
 8008114:	e7a7      	b.n	8008066 <_dtoa_r+0x266>
 8008116:	3101      	adds	r1, #1
 8008118:	6041      	str	r1, [r0, #4]
 800811a:	0052      	lsls	r2, r2, #1
 800811c:	e7a7      	b.n	800806e <_dtoa_r+0x26e>
 800811e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008120:	9a03      	ldr	r2, [sp, #12]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	2b0e      	cmp	r3, #14
 8008128:	f200 80a8 	bhi.w	800827c <_dtoa_r+0x47c>
 800812c:	2c00      	cmp	r4, #0
 800812e:	f000 80a5 	beq.w	800827c <_dtoa_r+0x47c>
 8008132:	f1ba 0f00 	cmp.w	sl, #0
 8008136:	dd34      	ble.n	80081a2 <_dtoa_r+0x3a2>
 8008138:	4a9a      	ldr	r2, [pc, #616]	; (80083a4 <_dtoa_r+0x5a4>)
 800813a:	f00a 030f 	and.w	r3, sl, #15
 800813e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008142:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008146:	e9d3 3400 	ldrd	r3, r4, [r3]
 800814a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800814e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008152:	d016      	beq.n	8008182 <_dtoa_r+0x382>
 8008154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008158:	4b93      	ldr	r3, [pc, #588]	; (80083a8 <_dtoa_r+0x5a8>)
 800815a:	2703      	movs	r7, #3
 800815c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008160:	f7f8 fae4 	bl	800072c <__aeabi_ddiv>
 8008164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008168:	f004 040f 	and.w	r4, r4, #15
 800816c:	4e8e      	ldr	r6, [pc, #568]	; (80083a8 <_dtoa_r+0x5a8>)
 800816e:	b954      	cbnz	r4, 8008186 <_dtoa_r+0x386>
 8008170:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008178:	f7f8 fad8 	bl	800072c <__aeabi_ddiv>
 800817c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008180:	e029      	b.n	80081d6 <_dtoa_r+0x3d6>
 8008182:	2702      	movs	r7, #2
 8008184:	e7f2      	b.n	800816c <_dtoa_r+0x36c>
 8008186:	07e1      	lsls	r1, r4, #31
 8008188:	d508      	bpl.n	800819c <_dtoa_r+0x39c>
 800818a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800818e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008192:	f7f8 f9a1 	bl	80004d8 <__aeabi_dmul>
 8008196:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800819a:	3701      	adds	r7, #1
 800819c:	1064      	asrs	r4, r4, #1
 800819e:	3608      	adds	r6, #8
 80081a0:	e7e5      	b.n	800816e <_dtoa_r+0x36e>
 80081a2:	f000 80a5 	beq.w	80082f0 <_dtoa_r+0x4f0>
 80081a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081aa:	f1ca 0400 	rsb	r4, sl, #0
 80081ae:	4b7d      	ldr	r3, [pc, #500]	; (80083a4 <_dtoa_r+0x5a4>)
 80081b0:	f004 020f 	and.w	r2, r4, #15
 80081b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 f98c 	bl	80004d8 <__aeabi_dmul>
 80081c0:	2702      	movs	r7, #2
 80081c2:	2300      	movs	r3, #0
 80081c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081c8:	4e77      	ldr	r6, [pc, #476]	; (80083a8 <_dtoa_r+0x5a8>)
 80081ca:	1124      	asrs	r4, r4, #4
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	f040 8084 	bne.w	80082da <_dtoa_r+0x4da>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1d2      	bne.n	800817c <_dtoa_r+0x37c>
 80081d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 808b 	beq.w	80082f4 <_dtoa_r+0x4f4>
 80081de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80081e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80081e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b6f      	ldr	r3, [pc, #444]	; (80083ac <_dtoa_r+0x5ac>)
 80081ee:	f7f8 fbe5 	bl	80009bc <__aeabi_dcmplt>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d07e      	beq.n	80082f4 <_dtoa_r+0x4f4>
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d07b      	beq.n	80082f4 <_dtoa_r+0x4f4>
 80081fc:	f1b9 0f00 	cmp.w	r9, #0
 8008200:	dd38      	ble.n	8008274 <_dtoa_r+0x474>
 8008202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008206:	2200      	movs	r2, #0
 8008208:	4b69      	ldr	r3, [pc, #420]	; (80083b0 <_dtoa_r+0x5b0>)
 800820a:	f7f8 f965 	bl	80004d8 <__aeabi_dmul>
 800820e:	464c      	mov	r4, r9
 8008210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008214:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008218:	3701      	adds	r7, #1
 800821a:	4638      	mov	r0, r7
 800821c:	f7f8 f8f2 	bl	8000404 <__aeabi_i2d>
 8008220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008224:	f7f8 f958 	bl	80004d8 <__aeabi_dmul>
 8008228:	2200      	movs	r2, #0
 800822a:	4b62      	ldr	r3, [pc, #392]	; (80083b4 <_dtoa_r+0x5b4>)
 800822c:	f7f7 ff9e 	bl	800016c <__adddf3>
 8008230:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008234:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008238:	9611      	str	r6, [sp, #68]	; 0x44
 800823a:	2c00      	cmp	r4, #0
 800823c:	d15d      	bne.n	80082fa <_dtoa_r+0x4fa>
 800823e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008242:	2200      	movs	r2, #0
 8008244:	4b5c      	ldr	r3, [pc, #368]	; (80083b8 <_dtoa_r+0x5b8>)
 8008246:	f7f7 ff8f 	bl	8000168 <__aeabi_dsub>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008252:	4633      	mov	r3, r6
 8008254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008256:	f7f8 fbcf 	bl	80009f8 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	f040 829c 	bne.w	8008798 <_dtoa_r+0x998>
 8008260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008266:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800826a:	f7f8 fba7 	bl	80009bc <__aeabi_dcmplt>
 800826e:	2800      	cmp	r0, #0
 8008270:	f040 8290 	bne.w	8008794 <_dtoa_r+0x994>
 8008274:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008278:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800827c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800827e:	2b00      	cmp	r3, #0
 8008280:	f2c0 8152 	blt.w	8008528 <_dtoa_r+0x728>
 8008284:	f1ba 0f0e 	cmp.w	sl, #14
 8008288:	f300 814e 	bgt.w	8008528 <_dtoa_r+0x728>
 800828c:	4b45      	ldr	r3, [pc, #276]	; (80083a4 <_dtoa_r+0x5a4>)
 800828e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008292:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008296:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800829a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800829c:	2b00      	cmp	r3, #0
 800829e:	f280 80db 	bge.w	8008458 <_dtoa_r+0x658>
 80082a2:	9b08      	ldr	r3, [sp, #32]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f300 80d7 	bgt.w	8008458 <_dtoa_r+0x658>
 80082aa:	f040 8272 	bne.w	8008792 <_dtoa_r+0x992>
 80082ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082b2:	2200      	movs	r2, #0
 80082b4:	4b40      	ldr	r3, [pc, #256]	; (80083b8 <_dtoa_r+0x5b8>)
 80082b6:	f7f8 f90f 	bl	80004d8 <__aeabi_dmul>
 80082ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082be:	f7f8 fb91 	bl	80009e4 <__aeabi_dcmpge>
 80082c2:	9c08      	ldr	r4, [sp, #32]
 80082c4:	4626      	mov	r6, r4
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f040 8248 	bne.w	800875c <_dtoa_r+0x95c>
 80082cc:	2331      	movs	r3, #49	; 0x31
 80082ce:	9f03      	ldr	r7, [sp, #12]
 80082d0:	f10a 0a01 	add.w	sl, sl, #1
 80082d4:	f807 3b01 	strb.w	r3, [r7], #1
 80082d8:	e244      	b.n	8008764 <_dtoa_r+0x964>
 80082da:	07e2      	lsls	r2, r4, #31
 80082dc:	d505      	bpl.n	80082ea <_dtoa_r+0x4ea>
 80082de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082e2:	f7f8 f8f9 	bl	80004d8 <__aeabi_dmul>
 80082e6:	2301      	movs	r3, #1
 80082e8:	3701      	adds	r7, #1
 80082ea:	1064      	asrs	r4, r4, #1
 80082ec:	3608      	adds	r6, #8
 80082ee:	e76d      	b.n	80081cc <_dtoa_r+0x3cc>
 80082f0:	2702      	movs	r7, #2
 80082f2:	e770      	b.n	80081d6 <_dtoa_r+0x3d6>
 80082f4:	46d0      	mov	r8, sl
 80082f6:	9c08      	ldr	r4, [sp, #32]
 80082f8:	e78f      	b.n	800821a <_dtoa_r+0x41a>
 80082fa:	9903      	ldr	r1, [sp, #12]
 80082fc:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <_dtoa_r+0x5a4>)
 80082fe:	4421      	add	r1, r4
 8008300:	9112      	str	r1, [sp, #72]	; 0x48
 8008302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008304:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008308:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800830c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008310:	2900      	cmp	r1, #0
 8008312:	d055      	beq.n	80083c0 <_dtoa_r+0x5c0>
 8008314:	2000      	movs	r0, #0
 8008316:	4929      	ldr	r1, [pc, #164]	; (80083bc <_dtoa_r+0x5bc>)
 8008318:	f7f8 fa08 	bl	800072c <__aeabi_ddiv>
 800831c:	463b      	mov	r3, r7
 800831e:	4632      	mov	r2, r6
 8008320:	f7f7 ff22 	bl	8000168 <__aeabi_dsub>
 8008324:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008328:	9f03      	ldr	r7, [sp, #12]
 800832a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800832e:	f7f8 fb83 	bl	8000a38 <__aeabi_d2iz>
 8008332:	4604      	mov	r4, r0
 8008334:	f7f8 f866 	bl	8000404 <__aeabi_i2d>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008340:	f7f7 ff12 	bl	8000168 <__aeabi_dsub>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	3430      	adds	r4, #48	; 0x30
 800834a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800834e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008352:	f807 4b01 	strb.w	r4, [r7], #1
 8008356:	f7f8 fb31 	bl	80009bc <__aeabi_dcmplt>
 800835a:	2800      	cmp	r0, #0
 800835c:	d174      	bne.n	8008448 <_dtoa_r+0x648>
 800835e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008362:	2000      	movs	r0, #0
 8008364:	4911      	ldr	r1, [pc, #68]	; (80083ac <_dtoa_r+0x5ac>)
 8008366:	f7f7 feff 	bl	8000168 <__aeabi_dsub>
 800836a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800836e:	f7f8 fb25 	bl	80009bc <__aeabi_dcmplt>
 8008372:	2800      	cmp	r0, #0
 8008374:	f040 80b7 	bne.w	80084e6 <_dtoa_r+0x6e6>
 8008378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800837a:	429f      	cmp	r7, r3
 800837c:	f43f af7a 	beq.w	8008274 <_dtoa_r+0x474>
 8008380:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008384:	2200      	movs	r2, #0
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <_dtoa_r+0x5b0>)
 8008388:	f7f8 f8a6 	bl	80004d8 <__aeabi_dmul>
 800838c:	2200      	movs	r2, #0
 800838e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <_dtoa_r+0x5b0>)
 8008398:	f7f8 f89e 	bl	80004d8 <__aeabi_dmul>
 800839c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083a0:	e7c3      	b.n	800832a <_dtoa_r+0x52a>
 80083a2:	bf00      	nop
 80083a4:	0800a3b0 	.word	0x0800a3b0
 80083a8:	0800a388 	.word	0x0800a388
 80083ac:	3ff00000 	.word	0x3ff00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	401c0000 	.word	0x401c0000
 80083b8:	40140000 	.word	0x40140000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	4630      	mov	r0, r6
 80083c2:	4639      	mov	r1, r7
 80083c4:	f7f8 f888 	bl	80004d8 <__aeabi_dmul>
 80083c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083ce:	9c03      	ldr	r4, [sp, #12]
 80083d0:	9314      	str	r3, [sp, #80]	; 0x50
 80083d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083d6:	f7f8 fb2f 	bl	8000a38 <__aeabi_d2iz>
 80083da:	9015      	str	r0, [sp, #84]	; 0x54
 80083dc:	f7f8 f812 	bl	8000404 <__aeabi_i2d>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e8:	f7f7 febe 	bl	8000168 <__aeabi_dsub>
 80083ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083ee:	4606      	mov	r6, r0
 80083f0:	3330      	adds	r3, #48	; 0x30
 80083f2:	f804 3b01 	strb.w	r3, [r4], #1
 80083f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083f8:	460f      	mov	r7, r1
 80083fa:	429c      	cmp	r4, r3
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	d124      	bne.n	800844c <_dtoa_r+0x64c>
 8008402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008406:	4bb0      	ldr	r3, [pc, #704]	; (80086c8 <_dtoa_r+0x8c8>)
 8008408:	f7f7 feb0 	bl	800016c <__adddf3>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 faf0 	bl	80009f8 <__aeabi_dcmpgt>
 8008418:	2800      	cmp	r0, #0
 800841a:	d163      	bne.n	80084e4 <_dtoa_r+0x6e4>
 800841c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008420:	2000      	movs	r0, #0
 8008422:	49a9      	ldr	r1, [pc, #676]	; (80086c8 <_dtoa_r+0x8c8>)
 8008424:	f7f7 fea0 	bl	8000168 <__aeabi_dsub>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fac4 	bl	80009bc <__aeabi_dcmplt>
 8008434:	2800      	cmp	r0, #0
 8008436:	f43f af1d 	beq.w	8008274 <_dtoa_r+0x474>
 800843a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800843c:	1e7b      	subs	r3, r7, #1
 800843e:	9314      	str	r3, [sp, #80]	; 0x50
 8008440:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008444:	2b30      	cmp	r3, #48	; 0x30
 8008446:	d0f8      	beq.n	800843a <_dtoa_r+0x63a>
 8008448:	46c2      	mov	sl, r8
 800844a:	e03b      	b.n	80084c4 <_dtoa_r+0x6c4>
 800844c:	4b9f      	ldr	r3, [pc, #636]	; (80086cc <_dtoa_r+0x8cc>)
 800844e:	f7f8 f843 	bl	80004d8 <__aeabi_dmul>
 8008452:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008456:	e7bc      	b.n	80083d2 <_dtoa_r+0x5d2>
 8008458:	9f03      	ldr	r7, [sp, #12]
 800845a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800845e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	f7f8 f961 	bl	800072c <__aeabi_ddiv>
 800846a:	f7f8 fae5 	bl	8000a38 <__aeabi_d2iz>
 800846e:	4604      	mov	r4, r0
 8008470:	f7f7 ffc8 	bl	8000404 <__aeabi_i2d>
 8008474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008478:	f7f8 f82e 	bl	80004d8 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f7 fe70 	bl	8000168 <__aeabi_dsub>
 8008488:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800848c:	f807 6b01 	strb.w	r6, [r7], #1
 8008490:	9e03      	ldr	r6, [sp, #12]
 8008492:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008496:	1bbe      	subs	r6, r7, r6
 8008498:	45b4      	cmp	ip, r6
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	d136      	bne.n	800850e <_dtoa_r+0x70e>
 80084a0:	f7f7 fe64 	bl	800016c <__adddf3>
 80084a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084a8:	4680      	mov	r8, r0
 80084aa:	4689      	mov	r9, r1
 80084ac:	f7f8 faa4 	bl	80009f8 <__aeabi_dcmpgt>
 80084b0:	bb58      	cbnz	r0, 800850a <_dtoa_r+0x70a>
 80084b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084b6:	4640      	mov	r0, r8
 80084b8:	4649      	mov	r1, r9
 80084ba:	f7f8 fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80084be:	b108      	cbz	r0, 80084c4 <_dtoa_r+0x6c4>
 80084c0:	07e1      	lsls	r1, r4, #31
 80084c2:	d422      	bmi.n	800850a <_dtoa_r+0x70a>
 80084c4:	4628      	mov	r0, r5
 80084c6:	4659      	mov	r1, fp
 80084c8:	f000 faf0 	bl	8008aac <_Bfree>
 80084cc:	2300      	movs	r3, #0
 80084ce:	703b      	strb	r3, [r7, #0]
 80084d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80084d2:	f10a 0001 	add.w	r0, sl, #1
 80084d6:	6018      	str	r0, [r3, #0]
 80084d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f43f acde 	beq.w	8007e9c <_dtoa_r+0x9c>
 80084e0:	601f      	str	r7, [r3, #0]
 80084e2:	e4db      	b.n	8007e9c <_dtoa_r+0x9c>
 80084e4:	4627      	mov	r7, r4
 80084e6:	463b      	mov	r3, r7
 80084e8:	461f      	mov	r7, r3
 80084ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ee:	2a39      	cmp	r2, #57	; 0x39
 80084f0:	d107      	bne.n	8008502 <_dtoa_r+0x702>
 80084f2:	9a03      	ldr	r2, [sp, #12]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d1f7      	bne.n	80084e8 <_dtoa_r+0x6e8>
 80084f8:	2230      	movs	r2, #48	; 0x30
 80084fa:	9903      	ldr	r1, [sp, #12]
 80084fc:	f108 0801 	add.w	r8, r8, #1
 8008500:	700a      	strb	r2, [r1, #0]
 8008502:	781a      	ldrb	r2, [r3, #0]
 8008504:	3201      	adds	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e79e      	b.n	8008448 <_dtoa_r+0x648>
 800850a:	46d0      	mov	r8, sl
 800850c:	e7eb      	b.n	80084e6 <_dtoa_r+0x6e6>
 800850e:	2200      	movs	r2, #0
 8008510:	4b6e      	ldr	r3, [pc, #440]	; (80086cc <_dtoa_r+0x8cc>)
 8008512:	f7f7 ffe1 	bl	80004d8 <__aeabi_dmul>
 8008516:	2200      	movs	r2, #0
 8008518:	2300      	movs	r3, #0
 800851a:	4680      	mov	r8, r0
 800851c:	4689      	mov	r9, r1
 800851e:	f7f8 fa43 	bl	80009a8 <__aeabi_dcmpeq>
 8008522:	2800      	cmp	r0, #0
 8008524:	d09b      	beq.n	800845e <_dtoa_r+0x65e>
 8008526:	e7cd      	b.n	80084c4 <_dtoa_r+0x6c4>
 8008528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800852a:	2a00      	cmp	r2, #0
 800852c:	f000 80d0 	beq.w	80086d0 <_dtoa_r+0x8d0>
 8008530:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008532:	2a01      	cmp	r2, #1
 8008534:	f300 80ae 	bgt.w	8008694 <_dtoa_r+0x894>
 8008538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800853a:	2a00      	cmp	r2, #0
 800853c:	f000 80a6 	beq.w	800868c <_dtoa_r+0x88c>
 8008540:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008544:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008546:	9f06      	ldr	r7, [sp, #24]
 8008548:	9a06      	ldr	r2, [sp, #24]
 800854a:	2101      	movs	r1, #1
 800854c:	441a      	add	r2, r3
 800854e:	9206      	str	r2, [sp, #24]
 8008550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008552:	4628      	mov	r0, r5
 8008554:	441a      	add	r2, r3
 8008556:	9209      	str	r2, [sp, #36]	; 0x24
 8008558:	f000 fb5e 	bl	8008c18 <__i2b>
 800855c:	4606      	mov	r6, r0
 800855e:	2f00      	cmp	r7, #0
 8008560:	dd0c      	ble.n	800857c <_dtoa_r+0x77c>
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	dd09      	ble.n	800857c <_dtoa_r+0x77c>
 8008568:	42bb      	cmp	r3, r7
 800856a:	bfa8      	it	ge
 800856c:	463b      	movge	r3, r7
 800856e:	9a06      	ldr	r2, [sp, #24]
 8008570:	1aff      	subs	r7, r7, r3
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	9206      	str	r2, [sp, #24]
 8008576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	9309      	str	r3, [sp, #36]	; 0x24
 800857c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857e:	b1f3      	cbz	r3, 80085be <_dtoa_r+0x7be>
 8008580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 80a8 	beq.w	80086d8 <_dtoa_r+0x8d8>
 8008588:	2c00      	cmp	r4, #0
 800858a:	dd10      	ble.n	80085ae <_dtoa_r+0x7ae>
 800858c:	4631      	mov	r1, r6
 800858e:	4622      	mov	r2, r4
 8008590:	4628      	mov	r0, r5
 8008592:	f000 fbff 	bl	8008d94 <__pow5mult>
 8008596:	465a      	mov	r2, fp
 8008598:	4601      	mov	r1, r0
 800859a:	4606      	mov	r6, r0
 800859c:	4628      	mov	r0, r5
 800859e:	f000 fb51 	bl	8008c44 <__multiply>
 80085a2:	4680      	mov	r8, r0
 80085a4:	4659      	mov	r1, fp
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 fa80 	bl	8008aac <_Bfree>
 80085ac:	46c3      	mov	fp, r8
 80085ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b0:	1b1a      	subs	r2, r3, r4
 80085b2:	d004      	beq.n	80085be <_dtoa_r+0x7be>
 80085b4:	4659      	mov	r1, fp
 80085b6:	4628      	mov	r0, r5
 80085b8:	f000 fbec 	bl	8008d94 <__pow5mult>
 80085bc:	4683      	mov	fp, r0
 80085be:	2101      	movs	r1, #1
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 fb29 	bl	8008c18 <__i2b>
 80085c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c8:	4604      	mov	r4, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f340 8086 	ble.w	80086dc <_dtoa_r+0x8dc>
 80085d0:	461a      	mov	r2, r3
 80085d2:	4601      	mov	r1, r0
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 fbdd 	bl	8008d94 <__pow5mult>
 80085da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085dc:	4604      	mov	r4, r0
 80085de:	2b01      	cmp	r3, #1
 80085e0:	dd7f      	ble.n	80086e2 <_dtoa_r+0x8e2>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085ec:	6918      	ldr	r0, [r3, #16]
 80085ee:	f000 fac5 	bl	8008b7c <__hi0bits>
 80085f2:	f1c0 0020 	rsb	r0, r0, #32
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	4418      	add	r0, r3
 80085fa:	f010 001f 	ands.w	r0, r0, #31
 80085fe:	f000 8092 	beq.w	8008726 <_dtoa_r+0x926>
 8008602:	f1c0 0320 	rsb	r3, r0, #32
 8008606:	2b04      	cmp	r3, #4
 8008608:	f340 808a 	ble.w	8008720 <_dtoa_r+0x920>
 800860c:	f1c0 001c 	rsb	r0, r0, #28
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	4407      	add	r7, r0
 8008614:	4403      	add	r3, r0
 8008616:	9306      	str	r3, [sp, #24]
 8008618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861a:	4403      	add	r3, r0
 800861c:	9309      	str	r3, [sp, #36]	; 0x24
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	dd05      	ble.n	8008630 <_dtoa_r+0x830>
 8008624:	4659      	mov	r1, fp
 8008626:	461a      	mov	r2, r3
 8008628:	4628      	mov	r0, r5
 800862a:	f000 fc0d 	bl	8008e48 <__lshift>
 800862e:	4683      	mov	fp, r0
 8008630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	dd05      	ble.n	8008642 <_dtoa_r+0x842>
 8008636:	4621      	mov	r1, r4
 8008638:	461a      	mov	r2, r3
 800863a:	4628      	mov	r0, r5
 800863c:	f000 fc04 	bl	8008e48 <__lshift>
 8008640:	4604      	mov	r4, r0
 8008642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d070      	beq.n	800872a <_dtoa_r+0x92a>
 8008648:	4621      	mov	r1, r4
 800864a:	4658      	mov	r0, fp
 800864c:	f000 fc6c 	bl	8008f28 <__mcmp>
 8008650:	2800      	cmp	r0, #0
 8008652:	da6a      	bge.n	800872a <_dtoa_r+0x92a>
 8008654:	2300      	movs	r3, #0
 8008656:	4659      	mov	r1, fp
 8008658:	220a      	movs	r2, #10
 800865a:	4628      	mov	r0, r5
 800865c:	f000 fa48 	bl	8008af0 <__multadd>
 8008660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008662:	4683      	mov	fp, r0
 8008664:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8194 	beq.w	8008996 <_dtoa_r+0xb96>
 800866e:	4631      	mov	r1, r6
 8008670:	2300      	movs	r3, #0
 8008672:	220a      	movs	r2, #10
 8008674:	4628      	mov	r0, r5
 8008676:	f000 fa3b 	bl	8008af0 <__multadd>
 800867a:	f1b9 0f00 	cmp.w	r9, #0
 800867e:	4606      	mov	r6, r0
 8008680:	f300 8093 	bgt.w	80087aa <_dtoa_r+0x9aa>
 8008684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008686:	2b02      	cmp	r3, #2
 8008688:	dc57      	bgt.n	800873a <_dtoa_r+0x93a>
 800868a:	e08e      	b.n	80087aa <_dtoa_r+0x9aa>
 800868c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800868e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008692:	e757      	b.n	8008544 <_dtoa_r+0x744>
 8008694:	9b08      	ldr	r3, [sp, #32]
 8008696:	1e5c      	subs	r4, r3, #1
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	42a3      	cmp	r3, r4
 800869c:	bfb7      	itett	lt
 800869e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086a0:	1b1c      	subge	r4, r3, r4
 80086a2:	1ae2      	sublt	r2, r4, r3
 80086a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80086a6:	bfbe      	ittt	lt
 80086a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80086aa:	189b      	addlt	r3, r3, r2
 80086ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80086ae:	9b08      	ldr	r3, [sp, #32]
 80086b0:	bfb8      	it	lt
 80086b2:	2400      	movlt	r4, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfbb      	ittet	lt
 80086b8:	9b06      	ldrlt	r3, [sp, #24]
 80086ba:	9a08      	ldrlt	r2, [sp, #32]
 80086bc:	9f06      	ldrge	r7, [sp, #24]
 80086be:	1a9f      	sublt	r7, r3, r2
 80086c0:	bfac      	ite	ge
 80086c2:	9b08      	ldrge	r3, [sp, #32]
 80086c4:	2300      	movlt	r3, #0
 80086c6:	e73f      	b.n	8008548 <_dtoa_r+0x748>
 80086c8:	3fe00000 	.word	0x3fe00000
 80086cc:	40240000 	.word	0x40240000
 80086d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086d2:	9f06      	ldr	r7, [sp, #24]
 80086d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80086d6:	e742      	b.n	800855e <_dtoa_r+0x75e>
 80086d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086da:	e76b      	b.n	80085b4 <_dtoa_r+0x7b4>
 80086dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086de:	2b01      	cmp	r3, #1
 80086e0:	dc19      	bgt.n	8008716 <_dtoa_r+0x916>
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	b9bb      	cbnz	r3, 8008716 <_dtoa_r+0x916>
 80086e6:	9b05      	ldr	r3, [sp, #20]
 80086e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086ec:	b99b      	cbnz	r3, 8008716 <_dtoa_r+0x916>
 80086ee:	9b05      	ldr	r3, [sp, #20]
 80086f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086f4:	0d1b      	lsrs	r3, r3, #20
 80086f6:	051b      	lsls	r3, r3, #20
 80086f8:	b183      	cbz	r3, 800871c <_dtoa_r+0x91c>
 80086fa:	f04f 0801 	mov.w	r8, #1
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	3301      	adds	r3, #1
 8008702:	9306      	str	r3, [sp, #24]
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	3301      	adds	r3, #1
 8008708:	9309      	str	r3, [sp, #36]	; 0x24
 800870a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	f47f af6a 	bne.w	80085e6 <_dtoa_r+0x7e6>
 8008712:	2001      	movs	r0, #1
 8008714:	e76f      	b.n	80085f6 <_dtoa_r+0x7f6>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	e7f6      	b.n	800870a <_dtoa_r+0x90a>
 800871c:	4698      	mov	r8, r3
 800871e:	e7f4      	b.n	800870a <_dtoa_r+0x90a>
 8008720:	f43f af7d 	beq.w	800861e <_dtoa_r+0x81e>
 8008724:	4618      	mov	r0, r3
 8008726:	301c      	adds	r0, #28
 8008728:	e772      	b.n	8008610 <_dtoa_r+0x810>
 800872a:	9b08      	ldr	r3, [sp, #32]
 800872c:	2b00      	cmp	r3, #0
 800872e:	dc36      	bgt.n	800879e <_dtoa_r+0x99e>
 8008730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008732:	2b02      	cmp	r3, #2
 8008734:	dd33      	ble.n	800879e <_dtoa_r+0x99e>
 8008736:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	d10d      	bne.n	800875c <_dtoa_r+0x95c>
 8008740:	4621      	mov	r1, r4
 8008742:	464b      	mov	r3, r9
 8008744:	2205      	movs	r2, #5
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f9d2 	bl	8008af0 <__multadd>
 800874c:	4601      	mov	r1, r0
 800874e:	4604      	mov	r4, r0
 8008750:	4658      	mov	r0, fp
 8008752:	f000 fbe9 	bl	8008f28 <__mcmp>
 8008756:	2800      	cmp	r0, #0
 8008758:	f73f adb8 	bgt.w	80082cc <_dtoa_r+0x4cc>
 800875c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800875e:	9f03      	ldr	r7, [sp, #12]
 8008760:	ea6f 0a03 	mvn.w	sl, r3
 8008764:	f04f 0800 	mov.w	r8, #0
 8008768:	4621      	mov	r1, r4
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f99e 	bl	8008aac <_Bfree>
 8008770:	2e00      	cmp	r6, #0
 8008772:	f43f aea7 	beq.w	80084c4 <_dtoa_r+0x6c4>
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	d005      	beq.n	8008788 <_dtoa_r+0x988>
 800877c:	45b0      	cmp	r8, r6
 800877e:	d003      	beq.n	8008788 <_dtoa_r+0x988>
 8008780:	4641      	mov	r1, r8
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f992 	bl	8008aac <_Bfree>
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	f000 f98e 	bl	8008aac <_Bfree>
 8008790:	e698      	b.n	80084c4 <_dtoa_r+0x6c4>
 8008792:	2400      	movs	r4, #0
 8008794:	4626      	mov	r6, r4
 8008796:	e7e1      	b.n	800875c <_dtoa_r+0x95c>
 8008798:	46c2      	mov	sl, r8
 800879a:	4626      	mov	r6, r4
 800879c:	e596      	b.n	80082cc <_dtoa_r+0x4cc>
 800879e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 80fd 	beq.w	80089a4 <_dtoa_r+0xba4>
 80087aa:	2f00      	cmp	r7, #0
 80087ac:	dd05      	ble.n	80087ba <_dtoa_r+0x9ba>
 80087ae:	4631      	mov	r1, r6
 80087b0:	463a      	mov	r2, r7
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 fb48 	bl	8008e48 <__lshift>
 80087b8:	4606      	mov	r6, r0
 80087ba:	f1b8 0f00 	cmp.w	r8, #0
 80087be:	d05c      	beq.n	800887a <_dtoa_r+0xa7a>
 80087c0:	4628      	mov	r0, r5
 80087c2:	6871      	ldr	r1, [r6, #4]
 80087c4:	f000 f932 	bl	8008a2c <_Balloc>
 80087c8:	4607      	mov	r7, r0
 80087ca:	b928      	cbnz	r0, 80087d8 <_dtoa_r+0x9d8>
 80087cc:	4602      	mov	r2, r0
 80087ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087d2:	4b7f      	ldr	r3, [pc, #508]	; (80089d0 <_dtoa_r+0xbd0>)
 80087d4:	f7ff bb28 	b.w	8007e28 <_dtoa_r+0x28>
 80087d8:	6932      	ldr	r2, [r6, #16]
 80087da:	f106 010c 	add.w	r1, r6, #12
 80087de:	3202      	adds	r2, #2
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	300c      	adds	r0, #12
 80087e4:	f000 f914 	bl	8008a10 <memcpy>
 80087e8:	2201      	movs	r2, #1
 80087ea:	4639      	mov	r1, r7
 80087ec:	4628      	mov	r0, r5
 80087ee:	f000 fb2b 	bl	8008e48 <__lshift>
 80087f2:	46b0      	mov	r8, r6
 80087f4:	4606      	mov	r6, r0
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	9308      	str	r3, [sp, #32]
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	444b      	add	r3, r9
 8008800:	930a      	str	r3, [sp, #40]	; 0x28
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	4621      	mov	r1, r4
 800880e:	3b01      	subs	r3, #1
 8008810:	4658      	mov	r0, fp
 8008812:	9304      	str	r3, [sp, #16]
 8008814:	f7ff fa68 	bl	8007ce8 <quorem>
 8008818:	4603      	mov	r3, r0
 800881a:	4641      	mov	r1, r8
 800881c:	3330      	adds	r3, #48	; 0x30
 800881e:	9006      	str	r0, [sp, #24]
 8008820:	4658      	mov	r0, fp
 8008822:	930b      	str	r3, [sp, #44]	; 0x2c
 8008824:	f000 fb80 	bl	8008f28 <__mcmp>
 8008828:	4632      	mov	r2, r6
 800882a:	4681      	mov	r9, r0
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 fb96 	bl	8008f60 <__mdiff>
 8008834:	68c2      	ldr	r2, [r0, #12]
 8008836:	4607      	mov	r7, r0
 8008838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800883a:	bb02      	cbnz	r2, 800887e <_dtoa_r+0xa7e>
 800883c:	4601      	mov	r1, r0
 800883e:	4658      	mov	r0, fp
 8008840:	f000 fb72 	bl	8008f28 <__mcmp>
 8008844:	4602      	mov	r2, r0
 8008846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008848:	4639      	mov	r1, r7
 800884a:	4628      	mov	r0, r5
 800884c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008850:	f000 f92c 	bl	8008aac <_Bfree>
 8008854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008858:	9f08      	ldr	r7, [sp, #32]
 800885a:	ea43 0102 	orr.w	r1, r3, r2
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	430b      	orrs	r3, r1
 8008862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008864:	d10d      	bne.n	8008882 <_dtoa_r+0xa82>
 8008866:	2b39      	cmp	r3, #57	; 0x39
 8008868:	d029      	beq.n	80088be <_dtoa_r+0xabe>
 800886a:	f1b9 0f00 	cmp.w	r9, #0
 800886e:	dd01      	ble.n	8008874 <_dtoa_r+0xa74>
 8008870:	9b06      	ldr	r3, [sp, #24]
 8008872:	3331      	adds	r3, #49	; 0x31
 8008874:	9a04      	ldr	r2, [sp, #16]
 8008876:	7013      	strb	r3, [r2, #0]
 8008878:	e776      	b.n	8008768 <_dtoa_r+0x968>
 800887a:	4630      	mov	r0, r6
 800887c:	e7b9      	b.n	80087f2 <_dtoa_r+0x9f2>
 800887e:	2201      	movs	r2, #1
 8008880:	e7e2      	b.n	8008848 <_dtoa_r+0xa48>
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	db06      	blt.n	8008896 <_dtoa_r+0xa96>
 8008888:	9922      	ldr	r1, [sp, #136]	; 0x88
 800888a:	ea41 0909 	orr.w	r9, r1, r9
 800888e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008890:	ea59 0101 	orrs.w	r1, r9, r1
 8008894:	d120      	bne.n	80088d8 <_dtoa_r+0xad8>
 8008896:	2a00      	cmp	r2, #0
 8008898:	ddec      	ble.n	8008874 <_dtoa_r+0xa74>
 800889a:	4659      	mov	r1, fp
 800889c:	2201      	movs	r2, #1
 800889e:	4628      	mov	r0, r5
 80088a0:	9308      	str	r3, [sp, #32]
 80088a2:	f000 fad1 	bl	8008e48 <__lshift>
 80088a6:	4621      	mov	r1, r4
 80088a8:	4683      	mov	fp, r0
 80088aa:	f000 fb3d 	bl	8008f28 <__mcmp>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	dc02      	bgt.n	80088ba <_dtoa_r+0xaba>
 80088b4:	d1de      	bne.n	8008874 <_dtoa_r+0xa74>
 80088b6:	07da      	lsls	r2, r3, #31
 80088b8:	d5dc      	bpl.n	8008874 <_dtoa_r+0xa74>
 80088ba:	2b39      	cmp	r3, #57	; 0x39
 80088bc:	d1d8      	bne.n	8008870 <_dtoa_r+0xa70>
 80088be:	2339      	movs	r3, #57	; 0x39
 80088c0:	9a04      	ldr	r2, [sp, #16]
 80088c2:	7013      	strb	r3, [r2, #0]
 80088c4:	463b      	mov	r3, r7
 80088c6:	461f      	mov	r7, r3
 80088c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	2a39      	cmp	r2, #57	; 0x39
 80088d0:	d050      	beq.n	8008974 <_dtoa_r+0xb74>
 80088d2:	3201      	adds	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e747      	b.n	8008768 <_dtoa_r+0x968>
 80088d8:	2a00      	cmp	r2, #0
 80088da:	dd03      	ble.n	80088e4 <_dtoa_r+0xae4>
 80088dc:	2b39      	cmp	r3, #57	; 0x39
 80088de:	d0ee      	beq.n	80088be <_dtoa_r+0xabe>
 80088e0:	3301      	adds	r3, #1
 80088e2:	e7c7      	b.n	8008874 <_dtoa_r+0xa74>
 80088e4:	9a08      	ldr	r2, [sp, #32]
 80088e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088ec:	428a      	cmp	r2, r1
 80088ee:	d02a      	beq.n	8008946 <_dtoa_r+0xb46>
 80088f0:	4659      	mov	r1, fp
 80088f2:	2300      	movs	r3, #0
 80088f4:	220a      	movs	r2, #10
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f8fa 	bl	8008af0 <__multadd>
 80088fc:	45b0      	cmp	r8, r6
 80088fe:	4683      	mov	fp, r0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	f04f 020a 	mov.w	r2, #10
 8008908:	4641      	mov	r1, r8
 800890a:	4628      	mov	r0, r5
 800890c:	d107      	bne.n	800891e <_dtoa_r+0xb1e>
 800890e:	f000 f8ef 	bl	8008af0 <__multadd>
 8008912:	4680      	mov	r8, r0
 8008914:	4606      	mov	r6, r0
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	3301      	adds	r3, #1
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	e775      	b.n	800880a <_dtoa_r+0xa0a>
 800891e:	f000 f8e7 	bl	8008af0 <__multadd>
 8008922:	4631      	mov	r1, r6
 8008924:	4680      	mov	r8, r0
 8008926:	2300      	movs	r3, #0
 8008928:	220a      	movs	r2, #10
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f8e0 	bl	8008af0 <__multadd>
 8008930:	4606      	mov	r6, r0
 8008932:	e7f0      	b.n	8008916 <_dtoa_r+0xb16>
 8008934:	f1b9 0f00 	cmp.w	r9, #0
 8008938:	bfcc      	ite	gt
 800893a:	464f      	movgt	r7, r9
 800893c:	2701      	movle	r7, #1
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	9a03      	ldr	r2, [sp, #12]
 8008944:	4417      	add	r7, r2
 8008946:	4659      	mov	r1, fp
 8008948:	2201      	movs	r2, #1
 800894a:	4628      	mov	r0, r5
 800894c:	9308      	str	r3, [sp, #32]
 800894e:	f000 fa7b 	bl	8008e48 <__lshift>
 8008952:	4621      	mov	r1, r4
 8008954:	4683      	mov	fp, r0
 8008956:	f000 fae7 	bl	8008f28 <__mcmp>
 800895a:	2800      	cmp	r0, #0
 800895c:	dcb2      	bgt.n	80088c4 <_dtoa_r+0xac4>
 800895e:	d102      	bne.n	8008966 <_dtoa_r+0xb66>
 8008960:	9b08      	ldr	r3, [sp, #32]
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d4ae      	bmi.n	80088c4 <_dtoa_r+0xac4>
 8008966:	463b      	mov	r3, r7
 8008968:	461f      	mov	r7, r3
 800896a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800896e:	2a30      	cmp	r2, #48	; 0x30
 8008970:	d0fa      	beq.n	8008968 <_dtoa_r+0xb68>
 8008972:	e6f9      	b.n	8008768 <_dtoa_r+0x968>
 8008974:	9a03      	ldr	r2, [sp, #12]
 8008976:	429a      	cmp	r2, r3
 8008978:	d1a5      	bne.n	80088c6 <_dtoa_r+0xac6>
 800897a:	2331      	movs	r3, #49	; 0x31
 800897c:	f10a 0a01 	add.w	sl, sl, #1
 8008980:	e779      	b.n	8008876 <_dtoa_r+0xa76>
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <_dtoa_r+0xbd4>)
 8008984:	f7ff baa8 	b.w	8007ed8 <_dtoa_r+0xd8>
 8008988:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800898a:	2b00      	cmp	r3, #0
 800898c:	f47f aa81 	bne.w	8007e92 <_dtoa_r+0x92>
 8008990:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <_dtoa_r+0xbd8>)
 8008992:	f7ff baa1 	b.w	8007ed8 <_dtoa_r+0xd8>
 8008996:	f1b9 0f00 	cmp.w	r9, #0
 800899a:	dc03      	bgt.n	80089a4 <_dtoa_r+0xba4>
 800899c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899e:	2b02      	cmp	r3, #2
 80089a0:	f73f aecb 	bgt.w	800873a <_dtoa_r+0x93a>
 80089a4:	9f03      	ldr	r7, [sp, #12]
 80089a6:	4621      	mov	r1, r4
 80089a8:	4658      	mov	r0, fp
 80089aa:	f7ff f99d 	bl	8007ce8 <quorem>
 80089ae:	9a03      	ldr	r2, [sp, #12]
 80089b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089b4:	f807 3b01 	strb.w	r3, [r7], #1
 80089b8:	1aba      	subs	r2, r7, r2
 80089ba:	4591      	cmp	r9, r2
 80089bc:	ddba      	ble.n	8008934 <_dtoa_r+0xb34>
 80089be:	4659      	mov	r1, fp
 80089c0:	2300      	movs	r3, #0
 80089c2:	220a      	movs	r2, #10
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 f893 	bl	8008af0 <__multadd>
 80089ca:	4683      	mov	fp, r0
 80089cc:	e7eb      	b.n	80089a6 <_dtoa_r+0xba6>
 80089ce:	bf00      	nop
 80089d0:	0800a317 	.word	0x0800a317
 80089d4:	0800a274 	.word	0x0800a274
 80089d8:	0800a298 	.word	0x0800a298

080089dc <_localeconv_r>:
 80089dc:	4800      	ldr	r0, [pc, #0]	; (80089e0 <_localeconv_r+0x4>)
 80089de:	4770      	bx	lr
 80089e0:	2000016c 	.word	0x2000016c

080089e4 <malloc>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <malloc+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f000 bc1d 	b.w	8009228 <_malloc_r>
 80089ee:	bf00      	nop
 80089f0:	20000018 	.word	0x20000018

080089f4 <memchr>:
 80089f4:	4603      	mov	r3, r0
 80089f6:	b510      	push	{r4, lr}
 80089f8:	b2c9      	uxtb	r1, r1
 80089fa:	4402      	add	r2, r0
 80089fc:	4293      	cmp	r3, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	d101      	bne.n	8008a06 <memchr+0x12>
 8008a02:	2000      	movs	r0, #0
 8008a04:	e003      	b.n	8008a0e <memchr+0x1a>
 8008a06:	7804      	ldrb	r4, [r0, #0]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	428c      	cmp	r4, r1
 8008a0c:	d1f6      	bne.n	80089fc <memchr+0x8>
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <memcpy>:
 8008a10:	440a      	add	r2, r1
 8008a12:	4291      	cmp	r1, r2
 8008a14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a18:	d100      	bne.n	8008a1c <memcpy+0xc>
 8008a1a:	4770      	bx	lr
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a28:	d1f9      	bne.n	8008a1e <memcpy+0xe>
 8008a2a:	bd10      	pop	{r4, pc}

08008a2c <_Balloc>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	b976      	cbnz	r6, 8008a54 <_Balloc+0x28>
 8008a36:	2010      	movs	r0, #16
 8008a38:	f7ff ffd4 	bl	80089e4 <malloc>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008a40:	b920      	cbnz	r0, 8008a4c <_Balloc+0x20>
 8008a42:	2166      	movs	r1, #102	; 0x66
 8008a44:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <_Balloc+0x78>)
 8008a46:	4818      	ldr	r0, [pc, #96]	; (8008aa8 <_Balloc+0x7c>)
 8008a48:	f000 fdce 	bl	80095e8 <__assert_func>
 8008a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a50:	6006      	str	r6, [r0, #0]
 8008a52:	60c6      	str	r6, [r0, #12]
 8008a54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a56:	68f3      	ldr	r3, [r6, #12]
 8008a58:	b183      	cbz	r3, 8008a7c <_Balloc+0x50>
 8008a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a62:	b9b8      	cbnz	r0, 8008a94 <_Balloc+0x68>
 8008a64:	2101      	movs	r1, #1
 8008a66:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6a:	1d72      	adds	r2, r6, #5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	0092      	lsls	r2, r2, #2
 8008a70:	f000 fb5e 	bl	8009130 <_calloc_r>
 8008a74:	b160      	cbz	r0, 8008a90 <_Balloc+0x64>
 8008a76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7a:	e00e      	b.n	8008a9a <_Balloc+0x6e>
 8008a7c:	2221      	movs	r2, #33	; 0x21
 8008a7e:	2104      	movs	r1, #4
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fb55 	bl	8009130 <_calloc_r>
 8008a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a88:	60f0      	str	r0, [r6, #12]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e4      	bne.n	8008a5a <_Balloc+0x2e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	6802      	ldr	r2, [r0, #0]
 8008a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa0:	e7f7      	b.n	8008a92 <_Balloc+0x66>
 8008aa2:	bf00      	nop
 8008aa4:	0800a2a5 	.word	0x0800a2a5
 8008aa8:	0800a328 	.word	0x0800a328

08008aac <_Bfree>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b976      	cbnz	r6, 8008ad4 <_Bfree+0x28>
 8008ab6:	2010      	movs	r0, #16
 8008ab8:	f7ff ff94 	bl	80089e4 <malloc>
 8008abc:	4602      	mov	r2, r0
 8008abe:	6268      	str	r0, [r5, #36]	; 0x24
 8008ac0:	b920      	cbnz	r0, 8008acc <_Bfree+0x20>
 8008ac2:	218a      	movs	r1, #138	; 0x8a
 8008ac4:	4b08      	ldr	r3, [pc, #32]	; (8008ae8 <_Bfree+0x3c>)
 8008ac6:	4809      	ldr	r0, [pc, #36]	; (8008aec <_Bfree+0x40>)
 8008ac8:	f000 fd8e 	bl	80095e8 <__assert_func>
 8008acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad0:	6006      	str	r6, [r0, #0]
 8008ad2:	60c6      	str	r6, [r0, #12]
 8008ad4:	b13c      	cbz	r4, 8008ae6 <_Bfree+0x3a>
 8008ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ad8:	6862      	ldr	r2, [r4, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae0:	6021      	str	r1, [r4, #0]
 8008ae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	0800a2a5 	.word	0x0800a2a5
 8008aec:	0800a328 	.word	0x0800a328

08008af0 <__multadd>:
 8008af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af4:	4607      	mov	r7, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	461e      	mov	r6, r3
 8008afa:	2000      	movs	r0, #0
 8008afc:	690d      	ldr	r5, [r1, #16]
 8008afe:	f101 0c14 	add.w	ip, r1, #20
 8008b02:	f8dc 3000 	ldr.w	r3, [ip]
 8008b06:	3001      	adds	r0, #1
 8008b08:	b299      	uxth	r1, r3
 8008b0a:	fb02 6101 	mla	r1, r2, r1, r6
 8008b0e:	0c1e      	lsrs	r6, r3, #16
 8008b10:	0c0b      	lsrs	r3, r1, #16
 8008b12:	fb02 3306 	mla	r3, r2, r6, r3
 8008b16:	b289      	uxth	r1, r1
 8008b18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b1c:	4285      	cmp	r5, r0
 8008b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b22:	f84c 1b04 	str.w	r1, [ip], #4
 8008b26:	dcec      	bgt.n	8008b02 <__multadd+0x12>
 8008b28:	b30e      	cbz	r6, 8008b6e <__multadd+0x7e>
 8008b2a:	68a3      	ldr	r3, [r4, #8]
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dc19      	bgt.n	8008b64 <__multadd+0x74>
 8008b30:	6861      	ldr	r1, [r4, #4]
 8008b32:	4638      	mov	r0, r7
 8008b34:	3101      	adds	r1, #1
 8008b36:	f7ff ff79 	bl	8008a2c <_Balloc>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	b928      	cbnz	r0, 8008b4a <__multadd+0x5a>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	21b5      	movs	r1, #181	; 0xb5
 8008b42:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <__multadd+0x84>)
 8008b44:	480c      	ldr	r0, [pc, #48]	; (8008b78 <__multadd+0x88>)
 8008b46:	f000 fd4f 	bl	80095e8 <__assert_func>
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	f104 010c 	add.w	r1, r4, #12
 8008b50:	3202      	adds	r2, #2
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	300c      	adds	r0, #12
 8008b56:	f7ff ff5b 	bl	8008a10 <memcpy>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ffa5 	bl	8008aac <_Bfree>
 8008b62:	4644      	mov	r4, r8
 8008b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b68:	3501      	adds	r5, #1
 8008b6a:	615e      	str	r6, [r3, #20]
 8008b6c:	6125      	str	r5, [r4, #16]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	0800a317 	.word	0x0800a317
 8008b78:	0800a328 	.word	0x0800a328

08008b7c <__hi0bits>:
 8008b7c:	0c02      	lsrs	r2, r0, #16
 8008b7e:	0412      	lsls	r2, r2, #16
 8008b80:	4603      	mov	r3, r0
 8008b82:	b9ca      	cbnz	r2, 8008bb8 <__hi0bits+0x3c>
 8008b84:	0403      	lsls	r3, r0, #16
 8008b86:	2010      	movs	r0, #16
 8008b88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b8c:	bf04      	itt	eq
 8008b8e:	021b      	lsleq	r3, r3, #8
 8008b90:	3008      	addeq	r0, #8
 8008b92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b96:	bf04      	itt	eq
 8008b98:	011b      	lsleq	r3, r3, #4
 8008b9a:	3004      	addeq	r0, #4
 8008b9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ba0:	bf04      	itt	eq
 8008ba2:	009b      	lsleq	r3, r3, #2
 8008ba4:	3002      	addeq	r0, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	db05      	blt.n	8008bb6 <__hi0bits+0x3a>
 8008baa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	bf08      	it	eq
 8008bb4:	2020      	moveq	r0, #32
 8008bb6:	4770      	bx	lr
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e7e5      	b.n	8008b88 <__hi0bits+0xc>

08008bbc <__lo0bits>:
 8008bbc:	6803      	ldr	r3, [r0, #0]
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	f013 0007 	ands.w	r0, r3, #7
 8008bc4:	d00b      	beq.n	8008bde <__lo0bits+0x22>
 8008bc6:	07d9      	lsls	r1, r3, #31
 8008bc8:	d421      	bmi.n	8008c0e <__lo0bits+0x52>
 8008bca:	0798      	lsls	r0, r3, #30
 8008bcc:	bf49      	itett	mi
 8008bce:	085b      	lsrmi	r3, r3, #1
 8008bd0:	089b      	lsrpl	r3, r3, #2
 8008bd2:	2001      	movmi	r0, #1
 8008bd4:	6013      	strmi	r3, [r2, #0]
 8008bd6:	bf5c      	itt	pl
 8008bd8:	2002      	movpl	r0, #2
 8008bda:	6013      	strpl	r3, [r2, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	b299      	uxth	r1, r3
 8008be0:	b909      	cbnz	r1, 8008be6 <__lo0bits+0x2a>
 8008be2:	2010      	movs	r0, #16
 8008be4:	0c1b      	lsrs	r3, r3, #16
 8008be6:	b2d9      	uxtb	r1, r3
 8008be8:	b909      	cbnz	r1, 8008bee <__lo0bits+0x32>
 8008bea:	3008      	adds	r0, #8
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	0719      	lsls	r1, r3, #28
 8008bf0:	bf04      	itt	eq
 8008bf2:	091b      	lsreq	r3, r3, #4
 8008bf4:	3004      	addeq	r0, #4
 8008bf6:	0799      	lsls	r1, r3, #30
 8008bf8:	bf04      	itt	eq
 8008bfa:	089b      	lsreq	r3, r3, #2
 8008bfc:	3002      	addeq	r0, #2
 8008bfe:	07d9      	lsls	r1, r3, #31
 8008c00:	d403      	bmi.n	8008c0a <__lo0bits+0x4e>
 8008c02:	085b      	lsrs	r3, r3, #1
 8008c04:	f100 0001 	add.w	r0, r0, #1
 8008c08:	d003      	beq.n	8008c12 <__lo0bits+0x56>
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	4770      	bx	lr
 8008c0e:	2000      	movs	r0, #0
 8008c10:	4770      	bx	lr
 8008c12:	2020      	movs	r0, #32
 8008c14:	4770      	bx	lr
	...

08008c18 <__i2b>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	f7ff ff05 	bl	8008a2c <_Balloc>
 8008c22:	4602      	mov	r2, r0
 8008c24:	b928      	cbnz	r0, 8008c32 <__i2b+0x1a>
 8008c26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c2a:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <__i2b+0x24>)
 8008c2c:	4804      	ldr	r0, [pc, #16]	; (8008c40 <__i2b+0x28>)
 8008c2e:	f000 fcdb 	bl	80095e8 <__assert_func>
 8008c32:	2301      	movs	r3, #1
 8008c34:	6144      	str	r4, [r0, #20]
 8008c36:	6103      	str	r3, [r0, #16]
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0800a317 	.word	0x0800a317
 8008c40:	0800a328 	.word	0x0800a328

08008c44 <__multiply>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	4691      	mov	r9, r2
 8008c4a:	690a      	ldr	r2, [r1, #16]
 8008c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c50:	460c      	mov	r4, r1
 8008c52:	429a      	cmp	r2, r3
 8008c54:	bfbe      	ittt	lt
 8008c56:	460b      	movlt	r3, r1
 8008c58:	464c      	movlt	r4, r9
 8008c5a:	4699      	movlt	r9, r3
 8008c5c:	6927      	ldr	r7, [r4, #16]
 8008c5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	eb07 060a 	add.w	r6, r7, sl
 8008c6a:	42b3      	cmp	r3, r6
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	bfb8      	it	lt
 8008c70:	3101      	addlt	r1, #1
 8008c72:	f7ff fedb 	bl	8008a2c <_Balloc>
 8008c76:	b930      	cbnz	r0, 8008c86 <__multiply+0x42>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	f240 115d 	movw	r1, #349	; 0x15d
 8008c7e:	4b43      	ldr	r3, [pc, #268]	; (8008d8c <__multiply+0x148>)
 8008c80:	4843      	ldr	r0, [pc, #268]	; (8008d90 <__multiply+0x14c>)
 8008c82:	f000 fcb1 	bl	80095e8 <__assert_func>
 8008c86:	f100 0514 	add.w	r5, r0, #20
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c92:	4543      	cmp	r3, r8
 8008c94:	d321      	bcc.n	8008cda <__multiply+0x96>
 8008c96:	f104 0314 	add.w	r3, r4, #20
 8008c9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c9e:	f109 0314 	add.w	r3, r9, #20
 8008ca2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ca6:	9202      	str	r2, [sp, #8]
 8008ca8:	1b3a      	subs	r2, r7, r4
 8008caa:	3a15      	subs	r2, #21
 8008cac:	f022 0203 	bic.w	r2, r2, #3
 8008cb0:	3204      	adds	r2, #4
 8008cb2:	f104 0115 	add.w	r1, r4, #21
 8008cb6:	428f      	cmp	r7, r1
 8008cb8:	bf38      	it	cc
 8008cba:	2204      	movcc	r2, #4
 8008cbc:	9201      	str	r2, [sp, #4]
 8008cbe:	9a02      	ldr	r2, [sp, #8]
 8008cc0:	9303      	str	r3, [sp, #12]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d80c      	bhi.n	8008ce0 <__multiply+0x9c>
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	dd03      	ble.n	8008cd2 <__multiply+0x8e>
 8008cca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d059      	beq.n	8008d86 <__multiply+0x142>
 8008cd2:	6106      	str	r6, [r0, #16]
 8008cd4:	b005      	add	sp, #20
 8008cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cda:	f843 2b04 	str.w	r2, [r3], #4
 8008cde:	e7d8      	b.n	8008c92 <__multiply+0x4e>
 8008ce0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ce4:	f1ba 0f00 	cmp.w	sl, #0
 8008ce8:	d023      	beq.n	8008d32 <__multiply+0xee>
 8008cea:	46a9      	mov	r9, r5
 8008cec:	f04f 0c00 	mov.w	ip, #0
 8008cf0:	f104 0e14 	add.w	lr, r4, #20
 8008cf4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008cf8:	f8d9 1000 	ldr.w	r1, [r9]
 8008cfc:	fa1f fb82 	uxth.w	fp, r2
 8008d00:	b289      	uxth	r1, r1
 8008d02:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d06:	4461      	add	r1, ip
 8008d08:	f8d9 c000 	ldr.w	ip, [r9]
 8008d0c:	0c12      	lsrs	r2, r2, #16
 8008d0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d12:	fb0a c202 	mla	r2, sl, r2, ip
 8008d16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d1a:	b289      	uxth	r1, r1
 8008d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d20:	4577      	cmp	r7, lr
 8008d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d26:	f849 1b04 	str.w	r1, [r9], #4
 8008d2a:	d8e3      	bhi.n	8008cf4 <__multiply+0xb0>
 8008d2c:	9a01      	ldr	r2, [sp, #4]
 8008d2e:	f845 c002 	str.w	ip, [r5, r2]
 8008d32:	9a03      	ldr	r2, [sp, #12]
 8008d34:	3304      	adds	r3, #4
 8008d36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d3a:	f1b9 0f00 	cmp.w	r9, #0
 8008d3e:	d020      	beq.n	8008d82 <__multiply+0x13e>
 8008d40:	46ae      	mov	lr, r5
 8008d42:	f04f 0a00 	mov.w	sl, #0
 8008d46:	6829      	ldr	r1, [r5, #0]
 8008d48:	f104 0c14 	add.w	ip, r4, #20
 8008d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d54:	b289      	uxth	r1, r1
 8008d56:	fb09 220b 	mla	r2, r9, fp, r2
 8008d5a:	4492      	add	sl, r2
 8008d5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d60:	f84e 1b04 	str.w	r1, [lr], #4
 8008d64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d68:	f8be 1000 	ldrh.w	r1, [lr]
 8008d6c:	0c12      	lsrs	r2, r2, #16
 8008d6e:	fb09 1102 	mla	r1, r9, r2, r1
 8008d72:	4567      	cmp	r7, ip
 8008d74:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d7c:	d8e6      	bhi.n	8008d4c <__multiply+0x108>
 8008d7e:	9a01      	ldr	r2, [sp, #4]
 8008d80:	50a9      	str	r1, [r5, r2]
 8008d82:	3504      	adds	r5, #4
 8008d84:	e79b      	b.n	8008cbe <__multiply+0x7a>
 8008d86:	3e01      	subs	r6, #1
 8008d88:	e79d      	b.n	8008cc6 <__multiply+0x82>
 8008d8a:	bf00      	nop
 8008d8c:	0800a317 	.word	0x0800a317
 8008d90:	0800a328 	.word	0x0800a328

08008d94 <__pow5mult>:
 8008d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d98:	4615      	mov	r5, r2
 8008d9a:	f012 0203 	ands.w	r2, r2, #3
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460f      	mov	r7, r1
 8008da2:	d007      	beq.n	8008db4 <__pow5mult+0x20>
 8008da4:	4c25      	ldr	r4, [pc, #148]	; (8008e3c <__pow5mult+0xa8>)
 8008da6:	3a01      	subs	r2, #1
 8008da8:	2300      	movs	r3, #0
 8008daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dae:	f7ff fe9f 	bl	8008af0 <__multadd>
 8008db2:	4607      	mov	r7, r0
 8008db4:	10ad      	asrs	r5, r5, #2
 8008db6:	d03d      	beq.n	8008e34 <__pow5mult+0xa0>
 8008db8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dba:	b97c      	cbnz	r4, 8008ddc <__pow5mult+0x48>
 8008dbc:	2010      	movs	r0, #16
 8008dbe:	f7ff fe11 	bl	80089e4 <malloc>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6270      	str	r0, [r6, #36]	; 0x24
 8008dc6:	b928      	cbnz	r0, 8008dd4 <__pow5mult+0x40>
 8008dc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	; (8008e40 <__pow5mult+0xac>)
 8008dce:	481d      	ldr	r0, [pc, #116]	; (8008e44 <__pow5mult+0xb0>)
 8008dd0:	f000 fc0a 	bl	80095e8 <__assert_func>
 8008dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dd8:	6004      	str	r4, [r0, #0]
 8008dda:	60c4      	str	r4, [r0, #12]
 8008ddc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008de4:	b94c      	cbnz	r4, 8008dfa <__pow5mult+0x66>
 8008de6:	f240 2171 	movw	r1, #625	; 0x271
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ff14 	bl	8008c18 <__i2b>
 8008df0:	2300      	movs	r3, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	07eb      	lsls	r3, r5, #31
 8008e00:	d50a      	bpl.n	8008e18 <__pow5mult+0x84>
 8008e02:	4639      	mov	r1, r7
 8008e04:	4622      	mov	r2, r4
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff ff1c 	bl	8008c44 <__multiply>
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff fe4b 	bl	8008aac <_Bfree>
 8008e16:	4647      	mov	r7, r8
 8008e18:	106d      	asrs	r5, r5, #1
 8008e1a:	d00b      	beq.n	8008e34 <__pow5mult+0xa0>
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	b938      	cbnz	r0, 8008e30 <__pow5mult+0x9c>
 8008e20:	4622      	mov	r2, r4
 8008e22:	4621      	mov	r1, r4
 8008e24:	4630      	mov	r0, r6
 8008e26:	f7ff ff0d 	bl	8008c44 <__multiply>
 8008e2a:	6020      	str	r0, [r4, #0]
 8008e2c:	f8c0 9000 	str.w	r9, [r0]
 8008e30:	4604      	mov	r4, r0
 8008e32:	e7e4      	b.n	8008dfe <__pow5mult+0x6a>
 8008e34:	4638      	mov	r0, r7
 8008e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0800a478 	.word	0x0800a478
 8008e40:	0800a2a5 	.word	0x0800a2a5
 8008e44:	0800a328 	.word	0x0800a328

08008e48 <__lshift>:
 8008e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	4607      	mov	r7, r0
 8008e50:	4691      	mov	r9, r2
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	6849      	ldr	r1, [r1, #4]
 8008e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e60:	f108 0601 	add.w	r6, r8, #1
 8008e64:	42b3      	cmp	r3, r6
 8008e66:	db0b      	blt.n	8008e80 <__lshift+0x38>
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7ff fddf 	bl	8008a2c <_Balloc>
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b948      	cbnz	r0, 8008e86 <__lshift+0x3e>
 8008e72:	4602      	mov	r2, r0
 8008e74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e78:	4b29      	ldr	r3, [pc, #164]	; (8008f20 <__lshift+0xd8>)
 8008e7a:	482a      	ldr	r0, [pc, #168]	; (8008f24 <__lshift+0xdc>)
 8008e7c:	f000 fbb4 	bl	80095e8 <__assert_func>
 8008e80:	3101      	adds	r1, #1
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	e7ee      	b.n	8008e64 <__lshift+0x1c>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f100 0114 	add.w	r1, r0, #20
 8008e8c:	f100 0210 	add.w	r2, r0, #16
 8008e90:	4618      	mov	r0, r3
 8008e92:	4553      	cmp	r3, sl
 8008e94:	db37      	blt.n	8008f06 <__lshift+0xbe>
 8008e96:	6920      	ldr	r0, [r4, #16]
 8008e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e9c:	f104 0314 	add.w	r3, r4, #20
 8008ea0:	f019 091f 	ands.w	r9, r9, #31
 8008ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008eac:	d02f      	beq.n	8008f0e <__lshift+0xc6>
 8008eae:	468a      	mov	sl, r1
 8008eb0:	f04f 0c00 	mov.w	ip, #0
 8008eb4:	f1c9 0e20 	rsb	lr, r9, #32
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	fa02 f209 	lsl.w	r2, r2, r9
 8008ebe:	ea42 020c 	orr.w	r2, r2, ip
 8008ec2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eca:	4298      	cmp	r0, r3
 8008ecc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ed0:	d8f2      	bhi.n	8008eb8 <__lshift+0x70>
 8008ed2:	1b03      	subs	r3, r0, r4
 8008ed4:	3b15      	subs	r3, #21
 8008ed6:	f023 0303 	bic.w	r3, r3, #3
 8008eda:	3304      	adds	r3, #4
 8008edc:	f104 0215 	add.w	r2, r4, #21
 8008ee0:	4290      	cmp	r0, r2
 8008ee2:	bf38      	it	cc
 8008ee4:	2304      	movcc	r3, #4
 8008ee6:	f841 c003 	str.w	ip, [r1, r3]
 8008eea:	f1bc 0f00 	cmp.w	ip, #0
 8008eee:	d001      	beq.n	8008ef4 <__lshift+0xac>
 8008ef0:	f108 0602 	add.w	r6, r8, #2
 8008ef4:	3e01      	subs	r6, #1
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	4621      	mov	r1, r4
 8008efa:	612e      	str	r6, [r5, #16]
 8008efc:	f7ff fdd6 	bl	8008aac <_Bfree>
 8008f00:	4628      	mov	r0, r5
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	e7c1      	b.n	8008e92 <__lshift+0x4a>
 8008f0e:	3904      	subs	r1, #4
 8008f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f14:	4298      	cmp	r0, r3
 8008f16:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f1a:	d8f9      	bhi.n	8008f10 <__lshift+0xc8>
 8008f1c:	e7ea      	b.n	8008ef4 <__lshift+0xac>
 8008f1e:	bf00      	nop
 8008f20:	0800a317 	.word	0x0800a317
 8008f24:	0800a328 	.word	0x0800a328

08008f28 <__mcmp>:
 8008f28:	4603      	mov	r3, r0
 8008f2a:	690a      	ldr	r2, [r1, #16]
 8008f2c:	6900      	ldr	r0, [r0, #16]
 8008f2e:	b530      	push	{r4, r5, lr}
 8008f30:	1a80      	subs	r0, r0, r2
 8008f32:	d10d      	bne.n	8008f50 <__mcmp+0x28>
 8008f34:	3314      	adds	r3, #20
 8008f36:	3114      	adds	r1, #20
 8008f38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f48:	4295      	cmp	r5, r2
 8008f4a:	d002      	beq.n	8008f52 <__mcmp+0x2a>
 8008f4c:	d304      	bcc.n	8008f58 <__mcmp+0x30>
 8008f4e:	2001      	movs	r0, #1
 8008f50:	bd30      	pop	{r4, r5, pc}
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	d3f4      	bcc.n	8008f40 <__mcmp+0x18>
 8008f56:	e7fb      	b.n	8008f50 <__mcmp+0x28>
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5c:	e7f8      	b.n	8008f50 <__mcmp+0x28>
	...

08008f60 <__mdiff>:
 8008f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	460d      	mov	r5, r1
 8008f66:	4607      	mov	r7, r0
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	f7ff ffdb 	bl	8008f28 <__mcmp>
 8008f72:	1e06      	subs	r6, r0, #0
 8008f74:	d111      	bne.n	8008f9a <__mdiff+0x3a>
 8008f76:	4631      	mov	r1, r6
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff fd57 	bl	8008a2c <_Balloc>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	b928      	cbnz	r0, 8008f8e <__mdiff+0x2e>
 8008f82:	f240 2132 	movw	r1, #562	; 0x232
 8008f86:	4b3a      	ldr	r3, [pc, #232]	; (8009070 <__mdiff+0x110>)
 8008f88:	483a      	ldr	r0, [pc, #232]	; (8009074 <__mdiff+0x114>)
 8008f8a:	f000 fb2d 	bl	80095e8 <__assert_func>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f94:	4610      	mov	r0, r2
 8008f96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9a:	bfa4      	itt	ge
 8008f9c:	4623      	movge	r3, r4
 8008f9e:	462c      	movge	r4, r5
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	6861      	ldr	r1, [r4, #4]
 8008fa4:	bfa6      	itte	ge
 8008fa6:	461d      	movge	r5, r3
 8008fa8:	2600      	movge	r6, #0
 8008faa:	2601      	movlt	r6, #1
 8008fac:	f7ff fd3e 	bl	8008a2c <_Balloc>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	b918      	cbnz	r0, 8008fbc <__mdiff+0x5c>
 8008fb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fb8:	4b2d      	ldr	r3, [pc, #180]	; (8009070 <__mdiff+0x110>)
 8008fba:	e7e5      	b.n	8008f88 <__mdiff+0x28>
 8008fbc:	f102 0814 	add.w	r8, r2, #20
 8008fc0:	46c2      	mov	sl, r8
 8008fc2:	f04f 0c00 	mov.w	ip, #0
 8008fc6:	6927      	ldr	r7, [r4, #16]
 8008fc8:	60c6      	str	r6, [r0, #12]
 8008fca:	692e      	ldr	r6, [r5, #16]
 8008fcc:	f104 0014 	add.w	r0, r4, #20
 8008fd0:	f105 0914 	add.w	r9, r5, #20
 8008fd4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fdc:	3410      	adds	r4, #16
 8008fde:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008fe2:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fe6:	fa1f f18b 	uxth.w	r1, fp
 8008fea:	448c      	add	ip, r1
 8008fec:	b299      	uxth	r1, r3
 8008fee:	0c1b      	lsrs	r3, r3, #16
 8008ff0:	ebac 0101 	sub.w	r1, ip, r1
 8008ff4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ff8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ffc:	b289      	uxth	r1, r1
 8008ffe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009002:	454e      	cmp	r6, r9
 8009004:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009008:	f84a 3b04 	str.w	r3, [sl], #4
 800900c:	d8e7      	bhi.n	8008fde <__mdiff+0x7e>
 800900e:	1b73      	subs	r3, r6, r5
 8009010:	3b15      	subs	r3, #21
 8009012:	f023 0303 	bic.w	r3, r3, #3
 8009016:	3515      	adds	r5, #21
 8009018:	3304      	adds	r3, #4
 800901a:	42ae      	cmp	r6, r5
 800901c:	bf38      	it	cc
 800901e:	2304      	movcc	r3, #4
 8009020:	4418      	add	r0, r3
 8009022:	4443      	add	r3, r8
 8009024:	461e      	mov	r6, r3
 8009026:	4605      	mov	r5, r0
 8009028:	4575      	cmp	r5, lr
 800902a:	d30e      	bcc.n	800904a <__mdiff+0xea>
 800902c:	f10e 0103 	add.w	r1, lr, #3
 8009030:	1a09      	subs	r1, r1, r0
 8009032:	f021 0103 	bic.w	r1, r1, #3
 8009036:	3803      	subs	r0, #3
 8009038:	4586      	cmp	lr, r0
 800903a:	bf38      	it	cc
 800903c:	2100      	movcc	r1, #0
 800903e:	4419      	add	r1, r3
 8009040:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009044:	b18b      	cbz	r3, 800906a <__mdiff+0x10a>
 8009046:	6117      	str	r7, [r2, #16]
 8009048:	e7a4      	b.n	8008f94 <__mdiff+0x34>
 800904a:	f855 8b04 	ldr.w	r8, [r5], #4
 800904e:	fa1f f188 	uxth.w	r1, r8
 8009052:	4461      	add	r1, ip
 8009054:	140c      	asrs	r4, r1, #16
 8009056:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800905a:	b289      	uxth	r1, r1
 800905c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009060:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009064:	f846 1b04 	str.w	r1, [r6], #4
 8009068:	e7de      	b.n	8009028 <__mdiff+0xc8>
 800906a:	3f01      	subs	r7, #1
 800906c:	e7e8      	b.n	8009040 <__mdiff+0xe0>
 800906e:	bf00      	nop
 8009070:	0800a317 	.word	0x0800a317
 8009074:	0800a328 	.word	0x0800a328

08009078 <__d2b>:
 8009078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800907c:	2101      	movs	r1, #1
 800907e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009082:	4690      	mov	r8, r2
 8009084:	461d      	mov	r5, r3
 8009086:	f7ff fcd1 	bl	8008a2c <_Balloc>
 800908a:	4604      	mov	r4, r0
 800908c:	b930      	cbnz	r0, 800909c <__d2b+0x24>
 800908e:	4602      	mov	r2, r0
 8009090:	f240 310a 	movw	r1, #778	; 0x30a
 8009094:	4b24      	ldr	r3, [pc, #144]	; (8009128 <__d2b+0xb0>)
 8009096:	4825      	ldr	r0, [pc, #148]	; (800912c <__d2b+0xb4>)
 8009098:	f000 faa6 	bl	80095e8 <__assert_func>
 800909c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80090a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80090a4:	bb2d      	cbnz	r5, 80090f2 <__d2b+0x7a>
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	f1b8 0300 	subs.w	r3, r8, #0
 80090ac:	d026      	beq.n	80090fc <__d2b+0x84>
 80090ae:	4668      	mov	r0, sp
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	f7ff fd83 	bl	8008bbc <__lo0bits>
 80090b6:	9900      	ldr	r1, [sp, #0]
 80090b8:	b1f0      	cbz	r0, 80090f8 <__d2b+0x80>
 80090ba:	9a01      	ldr	r2, [sp, #4]
 80090bc:	f1c0 0320 	rsb	r3, r0, #32
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	430b      	orrs	r3, r1
 80090c6:	40c2      	lsrs	r2, r0
 80090c8:	6163      	str	r3, [r4, #20]
 80090ca:	9201      	str	r2, [sp, #4]
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bf14      	ite	ne
 80090d2:	2102      	movne	r1, #2
 80090d4:	2101      	moveq	r1, #1
 80090d6:	61a3      	str	r3, [r4, #24]
 80090d8:	6121      	str	r1, [r4, #16]
 80090da:	b1c5      	cbz	r5, 800910e <__d2b+0x96>
 80090dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090e0:	4405      	add	r5, r0
 80090e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090e6:	603d      	str	r5, [r7, #0]
 80090e8:	6030      	str	r0, [r6, #0]
 80090ea:	4620      	mov	r0, r4
 80090ec:	b002      	add	sp, #8
 80090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090f6:	e7d6      	b.n	80090a6 <__d2b+0x2e>
 80090f8:	6161      	str	r1, [r4, #20]
 80090fa:	e7e7      	b.n	80090cc <__d2b+0x54>
 80090fc:	a801      	add	r0, sp, #4
 80090fe:	f7ff fd5d 	bl	8008bbc <__lo0bits>
 8009102:	2101      	movs	r1, #1
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	6121      	str	r1, [r4, #16]
 8009108:	6163      	str	r3, [r4, #20]
 800910a:	3020      	adds	r0, #32
 800910c:	e7e5      	b.n	80090da <__d2b+0x62>
 800910e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009112:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009116:	6038      	str	r0, [r7, #0]
 8009118:	6918      	ldr	r0, [r3, #16]
 800911a:	f7ff fd2f 	bl	8008b7c <__hi0bits>
 800911e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009122:	6031      	str	r1, [r6, #0]
 8009124:	e7e1      	b.n	80090ea <__d2b+0x72>
 8009126:	bf00      	nop
 8009128:	0800a317 	.word	0x0800a317
 800912c:	0800a328 	.word	0x0800a328

08009130 <_calloc_r>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	fba1 5402 	umull	r5, r4, r1, r2
 8009136:	b934      	cbnz	r4, 8009146 <_calloc_r+0x16>
 8009138:	4629      	mov	r1, r5
 800913a:	f000 f875 	bl	8009228 <_malloc_r>
 800913e:	4606      	mov	r6, r0
 8009140:	b928      	cbnz	r0, 800914e <_calloc_r+0x1e>
 8009142:	4630      	mov	r0, r6
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	220c      	movs	r2, #12
 8009148:	2600      	movs	r6, #0
 800914a:	6002      	str	r2, [r0, #0]
 800914c:	e7f9      	b.n	8009142 <_calloc_r+0x12>
 800914e:	462a      	mov	r2, r5
 8009150:	4621      	mov	r1, r4
 8009152:	f7fe f90d 	bl	8007370 <memset>
 8009156:	e7f4      	b.n	8009142 <_calloc_r+0x12>

08009158 <_free_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4605      	mov	r5, r0
 800915c:	2900      	cmp	r1, #0
 800915e:	d040      	beq.n	80091e2 <_free_r+0x8a>
 8009160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009164:	1f0c      	subs	r4, r1, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfb8      	it	lt
 800916a:	18e4      	addlt	r4, r4, r3
 800916c:	f000 fa98 	bl	80096a0 <__malloc_lock>
 8009170:	4a1c      	ldr	r2, [pc, #112]	; (80091e4 <_free_r+0x8c>)
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	b933      	cbnz	r3, 8009184 <_free_r+0x2c>
 8009176:	6063      	str	r3, [r4, #4]
 8009178:	6014      	str	r4, [r2, #0]
 800917a:	4628      	mov	r0, r5
 800917c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009180:	f000 ba94 	b.w	80096ac <__malloc_unlock>
 8009184:	42a3      	cmp	r3, r4
 8009186:	d908      	bls.n	800919a <_free_r+0x42>
 8009188:	6820      	ldr	r0, [r4, #0]
 800918a:	1821      	adds	r1, r4, r0
 800918c:	428b      	cmp	r3, r1
 800918e:	bf01      	itttt	eq
 8009190:	6819      	ldreq	r1, [r3, #0]
 8009192:	685b      	ldreq	r3, [r3, #4]
 8009194:	1809      	addeq	r1, r1, r0
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	e7ed      	b.n	8009176 <_free_r+0x1e>
 800919a:	461a      	mov	r2, r3
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b10b      	cbz	r3, 80091a4 <_free_r+0x4c>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d9fa      	bls.n	800919a <_free_r+0x42>
 80091a4:	6811      	ldr	r1, [r2, #0]
 80091a6:	1850      	adds	r0, r2, r1
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d10b      	bne.n	80091c4 <_free_r+0x6c>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	4401      	add	r1, r0
 80091b0:	1850      	adds	r0, r2, r1
 80091b2:	4283      	cmp	r3, r0
 80091b4:	6011      	str	r1, [r2, #0]
 80091b6:	d1e0      	bne.n	800917a <_free_r+0x22>
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	4401      	add	r1, r0
 80091be:	6011      	str	r1, [r2, #0]
 80091c0:	6053      	str	r3, [r2, #4]
 80091c2:	e7da      	b.n	800917a <_free_r+0x22>
 80091c4:	d902      	bls.n	80091cc <_free_r+0x74>
 80091c6:	230c      	movs	r3, #12
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	e7d6      	b.n	800917a <_free_r+0x22>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	1821      	adds	r1, r4, r0
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf01      	itttt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	1809      	addeq	r1, r1, r0
 80091da:	6021      	streq	r1, [r4, #0]
 80091dc:	6063      	str	r3, [r4, #4]
 80091de:	6054      	str	r4, [r2, #4]
 80091e0:	e7cb      	b.n	800917a <_free_r+0x22>
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20000770 	.word	0x20000770

080091e8 <sbrk_aligned>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4e0e      	ldr	r6, [pc, #56]	; (8009224 <sbrk_aligned+0x3c>)
 80091ec:	460c      	mov	r4, r1
 80091ee:	6831      	ldr	r1, [r6, #0]
 80091f0:	4605      	mov	r5, r0
 80091f2:	b911      	cbnz	r1, 80091fa <sbrk_aligned+0x12>
 80091f4:	f000 f9e8 	bl	80095c8 <_sbrk_r>
 80091f8:	6030      	str	r0, [r6, #0]
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 f9e3 	bl	80095c8 <_sbrk_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	d00a      	beq.n	800921c <sbrk_aligned+0x34>
 8009206:	1cc4      	adds	r4, r0, #3
 8009208:	f024 0403 	bic.w	r4, r4, #3
 800920c:	42a0      	cmp	r0, r4
 800920e:	d007      	beq.n	8009220 <sbrk_aligned+0x38>
 8009210:	1a21      	subs	r1, r4, r0
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f9d8 	bl	80095c8 <_sbrk_r>
 8009218:	3001      	adds	r0, #1
 800921a:	d101      	bne.n	8009220 <sbrk_aligned+0x38>
 800921c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009220:	4620      	mov	r0, r4
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	20000774 	.word	0x20000774

08009228 <_malloc_r>:
 8009228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922c:	1ccd      	adds	r5, r1, #3
 800922e:	f025 0503 	bic.w	r5, r5, #3
 8009232:	3508      	adds	r5, #8
 8009234:	2d0c      	cmp	r5, #12
 8009236:	bf38      	it	cc
 8009238:	250c      	movcc	r5, #12
 800923a:	2d00      	cmp	r5, #0
 800923c:	4607      	mov	r7, r0
 800923e:	db01      	blt.n	8009244 <_malloc_r+0x1c>
 8009240:	42a9      	cmp	r1, r5
 8009242:	d905      	bls.n	8009250 <_malloc_r+0x28>
 8009244:	230c      	movs	r3, #12
 8009246:	2600      	movs	r6, #0
 8009248:	603b      	str	r3, [r7, #0]
 800924a:	4630      	mov	r0, r6
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	4e2e      	ldr	r6, [pc, #184]	; (800930c <_malloc_r+0xe4>)
 8009252:	f000 fa25 	bl	80096a0 <__malloc_lock>
 8009256:	6833      	ldr	r3, [r6, #0]
 8009258:	461c      	mov	r4, r3
 800925a:	bb34      	cbnz	r4, 80092aa <_malloc_r+0x82>
 800925c:	4629      	mov	r1, r5
 800925e:	4638      	mov	r0, r7
 8009260:	f7ff ffc2 	bl	80091e8 <sbrk_aligned>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	4604      	mov	r4, r0
 8009268:	d14d      	bne.n	8009306 <_malloc_r+0xde>
 800926a:	6834      	ldr	r4, [r6, #0]
 800926c:	4626      	mov	r6, r4
 800926e:	2e00      	cmp	r6, #0
 8009270:	d140      	bne.n	80092f4 <_malloc_r+0xcc>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	4631      	mov	r1, r6
 8009276:	4638      	mov	r0, r7
 8009278:	eb04 0803 	add.w	r8, r4, r3
 800927c:	f000 f9a4 	bl	80095c8 <_sbrk_r>
 8009280:	4580      	cmp	r8, r0
 8009282:	d13a      	bne.n	80092fa <_malloc_r+0xd2>
 8009284:	6821      	ldr	r1, [r4, #0]
 8009286:	3503      	adds	r5, #3
 8009288:	1a6d      	subs	r5, r5, r1
 800928a:	f025 0503 	bic.w	r5, r5, #3
 800928e:	3508      	adds	r5, #8
 8009290:	2d0c      	cmp	r5, #12
 8009292:	bf38      	it	cc
 8009294:	250c      	movcc	r5, #12
 8009296:	4638      	mov	r0, r7
 8009298:	4629      	mov	r1, r5
 800929a:	f7ff ffa5 	bl	80091e8 <sbrk_aligned>
 800929e:	3001      	adds	r0, #1
 80092a0:	d02b      	beq.n	80092fa <_malloc_r+0xd2>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	442b      	add	r3, r5
 80092a6:	6023      	str	r3, [r4, #0]
 80092a8:	e00e      	b.n	80092c8 <_malloc_r+0xa0>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	1b52      	subs	r2, r2, r5
 80092ae:	d41e      	bmi.n	80092ee <_malloc_r+0xc6>
 80092b0:	2a0b      	cmp	r2, #11
 80092b2:	d916      	bls.n	80092e2 <_malloc_r+0xba>
 80092b4:	1961      	adds	r1, r4, r5
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	bf18      	it	ne
 80092bc:	6059      	strne	r1, [r3, #4]
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	bf08      	it	eq
 80092c2:	6031      	streq	r1, [r6, #0]
 80092c4:	5162      	str	r2, [r4, r5]
 80092c6:	604b      	str	r3, [r1, #4]
 80092c8:	4638      	mov	r0, r7
 80092ca:	f104 060b 	add.w	r6, r4, #11
 80092ce:	f000 f9ed 	bl	80096ac <__malloc_unlock>
 80092d2:	f026 0607 	bic.w	r6, r6, #7
 80092d6:	1d23      	adds	r3, r4, #4
 80092d8:	1af2      	subs	r2, r6, r3
 80092da:	d0b6      	beq.n	800924a <_malloc_r+0x22>
 80092dc:	1b9b      	subs	r3, r3, r6
 80092de:	50a3      	str	r3, [r4, r2]
 80092e0:	e7b3      	b.n	800924a <_malloc_r+0x22>
 80092e2:	6862      	ldr	r2, [r4, #4]
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	bf0c      	ite	eq
 80092e8:	6032      	streq	r2, [r6, #0]
 80092ea:	605a      	strne	r2, [r3, #4]
 80092ec:	e7ec      	b.n	80092c8 <_malloc_r+0xa0>
 80092ee:	4623      	mov	r3, r4
 80092f0:	6864      	ldr	r4, [r4, #4]
 80092f2:	e7b2      	b.n	800925a <_malloc_r+0x32>
 80092f4:	4634      	mov	r4, r6
 80092f6:	6876      	ldr	r6, [r6, #4]
 80092f8:	e7b9      	b.n	800926e <_malloc_r+0x46>
 80092fa:	230c      	movs	r3, #12
 80092fc:	4638      	mov	r0, r7
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	f000 f9d4 	bl	80096ac <__malloc_unlock>
 8009304:	e7a1      	b.n	800924a <_malloc_r+0x22>
 8009306:	6025      	str	r5, [r4, #0]
 8009308:	e7de      	b.n	80092c8 <_malloc_r+0xa0>
 800930a:	bf00      	nop
 800930c:	20000770 	.word	0x20000770

08009310 <__ssputs_r>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	688e      	ldr	r6, [r1, #8]
 8009316:	4682      	mov	sl, r0
 8009318:	429e      	cmp	r6, r3
 800931a:	460c      	mov	r4, r1
 800931c:	4690      	mov	r8, r2
 800931e:	461f      	mov	r7, r3
 8009320:	d838      	bhi.n	8009394 <__ssputs_r+0x84>
 8009322:	898a      	ldrh	r2, [r1, #12]
 8009324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009328:	d032      	beq.n	8009390 <__ssputs_r+0x80>
 800932a:	6825      	ldr	r5, [r4, #0]
 800932c:	6909      	ldr	r1, [r1, #16]
 800932e:	3301      	adds	r3, #1
 8009330:	eba5 0901 	sub.w	r9, r5, r1
 8009334:	6965      	ldr	r5, [r4, #20]
 8009336:	444b      	add	r3, r9
 8009338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800933c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009340:	106d      	asrs	r5, r5, #1
 8009342:	429d      	cmp	r5, r3
 8009344:	bf38      	it	cc
 8009346:	461d      	movcc	r5, r3
 8009348:	0553      	lsls	r3, r2, #21
 800934a:	d531      	bpl.n	80093b0 <__ssputs_r+0xa0>
 800934c:	4629      	mov	r1, r5
 800934e:	f7ff ff6b 	bl	8009228 <_malloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	b950      	cbnz	r0, 800936c <__ssputs_r+0x5c>
 8009356:	230c      	movs	r3, #12
 8009358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800935c:	f8ca 3000 	str.w	r3, [sl]
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	464a      	mov	r2, r9
 800936e:	6921      	ldr	r1, [r4, #16]
 8009370:	f7ff fb4e 	bl	8008a10 <memcpy>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800937a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	6126      	str	r6, [r4, #16]
 8009382:	444e      	add	r6, r9
 8009384:	6026      	str	r6, [r4, #0]
 8009386:	463e      	mov	r6, r7
 8009388:	6165      	str	r5, [r4, #20]
 800938a:	eba5 0509 	sub.w	r5, r5, r9
 800938e:	60a5      	str	r5, [r4, #8]
 8009390:	42be      	cmp	r6, r7
 8009392:	d900      	bls.n	8009396 <__ssputs_r+0x86>
 8009394:	463e      	mov	r6, r7
 8009396:	4632      	mov	r2, r6
 8009398:	4641      	mov	r1, r8
 800939a:	6820      	ldr	r0, [r4, #0]
 800939c:	f000 f966 	bl	800966c <memmove>
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	2000      	movs	r0, #0
 80093a4:	1b9b      	subs	r3, r3, r6
 80093a6:	60a3      	str	r3, [r4, #8]
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	4433      	add	r3, r6
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	e7db      	b.n	8009368 <__ssputs_r+0x58>
 80093b0:	462a      	mov	r2, r5
 80093b2:	f000 f981 	bl	80096b8 <_realloc_r>
 80093b6:	4606      	mov	r6, r0
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1e1      	bne.n	8009380 <__ssputs_r+0x70>
 80093bc:	4650      	mov	r0, sl
 80093be:	6921      	ldr	r1, [r4, #16]
 80093c0:	f7ff feca 	bl	8009158 <_free_r>
 80093c4:	e7c7      	b.n	8009356 <__ssputs_r+0x46>
	...

080093c8 <_svfiprintf_r>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	4698      	mov	r8, r3
 80093ce:	898b      	ldrh	r3, [r1, #12]
 80093d0:	4607      	mov	r7, r0
 80093d2:	061b      	lsls	r3, r3, #24
 80093d4:	460d      	mov	r5, r1
 80093d6:	4614      	mov	r4, r2
 80093d8:	b09d      	sub	sp, #116	; 0x74
 80093da:	d50e      	bpl.n	80093fa <_svfiprintf_r+0x32>
 80093dc:	690b      	ldr	r3, [r1, #16]
 80093de:	b963      	cbnz	r3, 80093fa <_svfiprintf_r+0x32>
 80093e0:	2140      	movs	r1, #64	; 0x40
 80093e2:	f7ff ff21 	bl	8009228 <_malloc_r>
 80093e6:	6028      	str	r0, [r5, #0]
 80093e8:	6128      	str	r0, [r5, #16]
 80093ea:	b920      	cbnz	r0, 80093f6 <_svfiprintf_r+0x2e>
 80093ec:	230c      	movs	r3, #12
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f4:	e0d1      	b.n	800959a <_svfiprintf_r+0x1d2>
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	616b      	str	r3, [r5, #20]
 80093fa:	2300      	movs	r3, #0
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	2320      	movs	r3, #32
 8009400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009404:	2330      	movs	r3, #48	; 0x30
 8009406:	f04f 0901 	mov.w	r9, #1
 800940a:	f8cd 800c 	str.w	r8, [sp, #12]
 800940e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095b4 <_svfiprintf_r+0x1ec>
 8009412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009416:	4623      	mov	r3, r4
 8009418:	469a      	mov	sl, r3
 800941a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941e:	b10a      	cbz	r2, 8009424 <_svfiprintf_r+0x5c>
 8009420:	2a25      	cmp	r2, #37	; 0x25
 8009422:	d1f9      	bne.n	8009418 <_svfiprintf_r+0x50>
 8009424:	ebba 0b04 	subs.w	fp, sl, r4
 8009428:	d00b      	beq.n	8009442 <_svfiprintf_r+0x7a>
 800942a:	465b      	mov	r3, fp
 800942c:	4622      	mov	r2, r4
 800942e:	4629      	mov	r1, r5
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff ff6d 	bl	8009310 <__ssputs_r>
 8009436:	3001      	adds	r0, #1
 8009438:	f000 80aa 	beq.w	8009590 <_svfiprintf_r+0x1c8>
 800943c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943e:	445a      	add	r2, fp
 8009440:	9209      	str	r2, [sp, #36]	; 0x24
 8009442:	f89a 3000 	ldrb.w	r3, [sl]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80a2 	beq.w	8009590 <_svfiprintf_r+0x1c8>
 800944c:	2300      	movs	r3, #0
 800944e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009456:	f10a 0a01 	add.w	sl, sl, #1
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009462:	931a      	str	r3, [sp, #104]	; 0x68
 8009464:	4654      	mov	r4, sl
 8009466:	2205      	movs	r2, #5
 8009468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946c:	4851      	ldr	r0, [pc, #324]	; (80095b4 <_svfiprintf_r+0x1ec>)
 800946e:	f7ff fac1 	bl	80089f4 <memchr>
 8009472:	9a04      	ldr	r2, [sp, #16]
 8009474:	b9d8      	cbnz	r0, 80094ae <_svfiprintf_r+0xe6>
 8009476:	06d0      	lsls	r0, r2, #27
 8009478:	bf44      	itt	mi
 800947a:	2320      	movmi	r3, #32
 800947c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009480:	0711      	lsls	r1, r2, #28
 8009482:	bf44      	itt	mi
 8009484:	232b      	movmi	r3, #43	; 0x2b
 8009486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800948a:	f89a 3000 	ldrb.w	r3, [sl]
 800948e:	2b2a      	cmp	r3, #42	; 0x2a
 8009490:	d015      	beq.n	80094be <_svfiprintf_r+0xf6>
 8009492:	4654      	mov	r4, sl
 8009494:	2000      	movs	r0, #0
 8009496:	f04f 0c0a 	mov.w	ip, #10
 800949a:	9a07      	ldr	r2, [sp, #28]
 800949c:	4621      	mov	r1, r4
 800949e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a2:	3b30      	subs	r3, #48	; 0x30
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d94e      	bls.n	8009546 <_svfiprintf_r+0x17e>
 80094a8:	b1b0      	cbz	r0, 80094d8 <_svfiprintf_r+0x110>
 80094aa:	9207      	str	r2, [sp, #28]
 80094ac:	e014      	b.n	80094d8 <_svfiprintf_r+0x110>
 80094ae:	eba0 0308 	sub.w	r3, r0, r8
 80094b2:	fa09 f303 	lsl.w	r3, r9, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	46a2      	mov	sl, r4
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	e7d2      	b.n	8009464 <_svfiprintf_r+0x9c>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	1d19      	adds	r1, r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	9103      	str	r1, [sp, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfbb      	ittet	lt
 80094ca:	425b      	neglt	r3, r3
 80094cc:	f042 0202 	orrlt.w	r2, r2, #2
 80094d0:	9307      	strge	r3, [sp, #28]
 80094d2:	9307      	strlt	r3, [sp, #28]
 80094d4:	bfb8      	it	lt
 80094d6:	9204      	strlt	r2, [sp, #16]
 80094d8:	7823      	ldrb	r3, [r4, #0]
 80094da:	2b2e      	cmp	r3, #46	; 0x2e
 80094dc:	d10c      	bne.n	80094f8 <_svfiprintf_r+0x130>
 80094de:	7863      	ldrb	r3, [r4, #1]
 80094e0:	2b2a      	cmp	r3, #42	; 0x2a
 80094e2:	d135      	bne.n	8009550 <_svfiprintf_r+0x188>
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	3402      	adds	r4, #2
 80094e8:	1d1a      	adds	r2, r3, #4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	9203      	str	r2, [sp, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094f6:	9305      	str	r3, [sp, #20]
 80094f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80095b8 <_svfiprintf_r+0x1f0>
 80094fc:	2203      	movs	r2, #3
 80094fe:	4650      	mov	r0, sl
 8009500:	7821      	ldrb	r1, [r4, #0]
 8009502:	f7ff fa77 	bl	80089f4 <memchr>
 8009506:	b140      	cbz	r0, 800951a <_svfiprintf_r+0x152>
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	eba0 000a 	sub.w	r0, r0, sl
 800950e:	fa03 f000 	lsl.w	r0, r3, r0
 8009512:	9b04      	ldr	r3, [sp, #16]
 8009514:	3401      	adds	r4, #1
 8009516:	4303      	orrs	r3, r0
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	2206      	movs	r2, #6
 8009520:	4826      	ldr	r0, [pc, #152]	; (80095bc <_svfiprintf_r+0x1f4>)
 8009522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009526:	f7ff fa65 	bl	80089f4 <memchr>
 800952a:	2800      	cmp	r0, #0
 800952c:	d038      	beq.n	80095a0 <_svfiprintf_r+0x1d8>
 800952e:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <_svfiprintf_r+0x1f8>)
 8009530:	bb1b      	cbnz	r3, 800957a <_svfiprintf_r+0x1b2>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	3307      	adds	r3, #7
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	3308      	adds	r3, #8
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	4433      	add	r3, r6
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	e767      	b.n	8009416 <_svfiprintf_r+0x4e>
 8009546:	460c      	mov	r4, r1
 8009548:	2001      	movs	r0, #1
 800954a:	fb0c 3202 	mla	r2, ip, r2, r3
 800954e:	e7a5      	b.n	800949c <_svfiprintf_r+0xd4>
 8009550:	2300      	movs	r3, #0
 8009552:	f04f 0c0a 	mov.w	ip, #10
 8009556:	4619      	mov	r1, r3
 8009558:	3401      	adds	r4, #1
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	4620      	mov	r0, r4
 800955e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009562:	3a30      	subs	r2, #48	; 0x30
 8009564:	2a09      	cmp	r2, #9
 8009566:	d903      	bls.n	8009570 <_svfiprintf_r+0x1a8>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0c5      	beq.n	80094f8 <_svfiprintf_r+0x130>
 800956c:	9105      	str	r1, [sp, #20]
 800956e:	e7c3      	b.n	80094f8 <_svfiprintf_r+0x130>
 8009570:	4604      	mov	r4, r0
 8009572:	2301      	movs	r3, #1
 8009574:	fb0c 2101 	mla	r1, ip, r1, r2
 8009578:	e7f0      	b.n	800955c <_svfiprintf_r+0x194>
 800957a:	ab03      	add	r3, sp, #12
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	462a      	mov	r2, r5
 8009580:	4638      	mov	r0, r7
 8009582:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <_svfiprintf_r+0x1fc>)
 8009584:	a904      	add	r1, sp, #16
 8009586:	f7fd ff99 	bl	80074bc <_printf_float>
 800958a:	1c42      	adds	r2, r0, #1
 800958c:	4606      	mov	r6, r0
 800958e:	d1d6      	bne.n	800953e <_svfiprintf_r+0x176>
 8009590:	89ab      	ldrh	r3, [r5, #12]
 8009592:	065b      	lsls	r3, r3, #25
 8009594:	f53f af2c 	bmi.w	80093f0 <_svfiprintf_r+0x28>
 8009598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959a:	b01d      	add	sp, #116	; 0x74
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	ab03      	add	r3, sp, #12
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	462a      	mov	r2, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <_svfiprintf_r+0x1fc>)
 80095aa:	a904      	add	r1, sp, #16
 80095ac:	f7fe fa22 	bl	80079f4 <_printf_i>
 80095b0:	e7eb      	b.n	800958a <_svfiprintf_r+0x1c2>
 80095b2:	bf00      	nop
 80095b4:	0800a484 	.word	0x0800a484
 80095b8:	0800a48a 	.word	0x0800a48a
 80095bc:	0800a48e 	.word	0x0800a48e
 80095c0:	080074bd 	.word	0x080074bd
 80095c4:	08009311 	.word	0x08009311

080095c8 <_sbrk_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	2300      	movs	r3, #0
 80095cc:	4d05      	ldr	r5, [pc, #20]	; (80095e4 <_sbrk_r+0x1c>)
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	602b      	str	r3, [r5, #0]
 80095d4:	f7f8 fbb8 	bl	8001d48 <_sbrk>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_sbrk_r+0x1a>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_sbrk_r+0x1a>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20000778 	.word	0x20000778

080095e8 <__assert_func>:
 80095e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ea:	4614      	mov	r4, r2
 80095ec:	461a      	mov	r2, r3
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <__assert_func+0x2c>)
 80095f0:	4605      	mov	r5, r0
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68d8      	ldr	r0, [r3, #12]
 80095f6:	b14c      	cbz	r4, 800960c <__assert_func+0x24>
 80095f8:	4b07      	ldr	r3, [pc, #28]	; (8009618 <__assert_func+0x30>)
 80095fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095fe:	9100      	str	r1, [sp, #0]
 8009600:	462b      	mov	r3, r5
 8009602:	4906      	ldr	r1, [pc, #24]	; (800961c <__assert_func+0x34>)
 8009604:	f000 f80e 	bl	8009624 <fiprintf>
 8009608:	f000 faaa 	bl	8009b60 <abort>
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <__assert_func+0x38>)
 800960e:	461c      	mov	r4, r3
 8009610:	e7f3      	b.n	80095fa <__assert_func+0x12>
 8009612:	bf00      	nop
 8009614:	20000018 	.word	0x20000018
 8009618:	0800a495 	.word	0x0800a495
 800961c:	0800a4a2 	.word	0x0800a4a2
 8009620:	0800a4d0 	.word	0x0800a4d0

08009624 <fiprintf>:
 8009624:	b40e      	push	{r1, r2, r3}
 8009626:	b503      	push	{r0, r1, lr}
 8009628:	4601      	mov	r1, r0
 800962a:	ab03      	add	r3, sp, #12
 800962c:	4805      	ldr	r0, [pc, #20]	; (8009644 <fiprintf+0x20>)
 800962e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009632:	6800      	ldr	r0, [r0, #0]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	f000 f895 	bl	8009764 <_vfiprintf_r>
 800963a:	b002      	add	sp, #8
 800963c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009640:	b003      	add	sp, #12
 8009642:	4770      	bx	lr
 8009644:	20000018 	.word	0x20000018

08009648 <__ascii_mbtowc>:
 8009648:	b082      	sub	sp, #8
 800964a:	b901      	cbnz	r1, 800964e <__ascii_mbtowc+0x6>
 800964c:	a901      	add	r1, sp, #4
 800964e:	b142      	cbz	r2, 8009662 <__ascii_mbtowc+0x1a>
 8009650:	b14b      	cbz	r3, 8009666 <__ascii_mbtowc+0x1e>
 8009652:	7813      	ldrb	r3, [r2, #0]
 8009654:	600b      	str	r3, [r1, #0]
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	1e10      	subs	r0, r2, #0
 800965a:	bf18      	it	ne
 800965c:	2001      	movne	r0, #1
 800965e:	b002      	add	sp, #8
 8009660:	4770      	bx	lr
 8009662:	4610      	mov	r0, r2
 8009664:	e7fb      	b.n	800965e <__ascii_mbtowc+0x16>
 8009666:	f06f 0001 	mvn.w	r0, #1
 800966a:	e7f8      	b.n	800965e <__ascii_mbtowc+0x16>

0800966c <memmove>:
 800966c:	4288      	cmp	r0, r1
 800966e:	b510      	push	{r4, lr}
 8009670:	eb01 0402 	add.w	r4, r1, r2
 8009674:	d902      	bls.n	800967c <memmove+0x10>
 8009676:	4284      	cmp	r4, r0
 8009678:	4623      	mov	r3, r4
 800967a:	d807      	bhi.n	800968c <memmove+0x20>
 800967c:	1e43      	subs	r3, r0, #1
 800967e:	42a1      	cmp	r1, r4
 8009680:	d008      	beq.n	8009694 <memmove+0x28>
 8009682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800968a:	e7f8      	b.n	800967e <memmove+0x12>
 800968c:	4601      	mov	r1, r0
 800968e:	4402      	add	r2, r0
 8009690:	428a      	cmp	r2, r1
 8009692:	d100      	bne.n	8009696 <memmove+0x2a>
 8009694:	bd10      	pop	{r4, pc}
 8009696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800969a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800969e:	e7f7      	b.n	8009690 <memmove+0x24>

080096a0 <__malloc_lock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_lock+0x8>)
 80096a2:	f000 bc19 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	2000077c 	.word	0x2000077c

080096ac <__malloc_unlock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_unlock+0x8>)
 80096ae:	f000 bc14 	b.w	8009eda <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	2000077c 	.word	0x2000077c

080096b8 <_realloc_r>:
 80096b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	4680      	mov	r8, r0
 80096be:	4614      	mov	r4, r2
 80096c0:	460e      	mov	r6, r1
 80096c2:	b921      	cbnz	r1, 80096ce <_realloc_r+0x16>
 80096c4:	4611      	mov	r1, r2
 80096c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ca:	f7ff bdad 	b.w	8009228 <_malloc_r>
 80096ce:	b92a      	cbnz	r2, 80096dc <_realloc_r+0x24>
 80096d0:	f7ff fd42 	bl	8009158 <_free_r>
 80096d4:	4625      	mov	r5, r4
 80096d6:	4628      	mov	r0, r5
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	f000 fc64 	bl	8009fa8 <_malloc_usable_size_r>
 80096e0:	4284      	cmp	r4, r0
 80096e2:	4607      	mov	r7, r0
 80096e4:	d802      	bhi.n	80096ec <_realloc_r+0x34>
 80096e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096ea:	d812      	bhi.n	8009712 <_realloc_r+0x5a>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4640      	mov	r0, r8
 80096f0:	f7ff fd9a 	bl	8009228 <_malloc_r>
 80096f4:	4605      	mov	r5, r0
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d0ed      	beq.n	80096d6 <_realloc_r+0x1e>
 80096fa:	42bc      	cmp	r4, r7
 80096fc:	4622      	mov	r2, r4
 80096fe:	4631      	mov	r1, r6
 8009700:	bf28      	it	cs
 8009702:	463a      	movcs	r2, r7
 8009704:	f7ff f984 	bl	8008a10 <memcpy>
 8009708:	4631      	mov	r1, r6
 800970a:	4640      	mov	r0, r8
 800970c:	f7ff fd24 	bl	8009158 <_free_r>
 8009710:	e7e1      	b.n	80096d6 <_realloc_r+0x1e>
 8009712:	4635      	mov	r5, r6
 8009714:	e7df      	b.n	80096d6 <_realloc_r+0x1e>

08009716 <__sfputc_r>:
 8009716:	6893      	ldr	r3, [r2, #8]
 8009718:	b410      	push	{r4}
 800971a:	3b01      	subs	r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	6093      	str	r3, [r2, #8]
 8009720:	da07      	bge.n	8009732 <__sfputc_r+0x1c>
 8009722:	6994      	ldr	r4, [r2, #24]
 8009724:	42a3      	cmp	r3, r4
 8009726:	db01      	blt.n	800972c <__sfputc_r+0x16>
 8009728:	290a      	cmp	r1, #10
 800972a:	d102      	bne.n	8009732 <__sfputc_r+0x1c>
 800972c:	bc10      	pop	{r4}
 800972e:	f000 b949 	b.w	80099c4 <__swbuf_r>
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	1c58      	adds	r0, r3, #1
 8009736:	6010      	str	r0, [r2, #0]
 8009738:	7019      	strb	r1, [r3, #0]
 800973a:	4608      	mov	r0, r1
 800973c:	bc10      	pop	{r4}
 800973e:	4770      	bx	lr

08009740 <__sfputs_r>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	4614      	mov	r4, r2
 8009748:	18d5      	adds	r5, r2, r3
 800974a:	42ac      	cmp	r4, r5
 800974c:	d101      	bne.n	8009752 <__sfputs_r+0x12>
 800974e:	2000      	movs	r0, #0
 8009750:	e007      	b.n	8009762 <__sfputs_r+0x22>
 8009752:	463a      	mov	r2, r7
 8009754:	4630      	mov	r0, r6
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	f7ff ffdc 	bl	8009716 <__sfputc_r>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d1f3      	bne.n	800974a <__sfputs_r+0xa>
 8009762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009764 <_vfiprintf_r>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	460d      	mov	r5, r1
 800976a:	4614      	mov	r4, r2
 800976c:	4698      	mov	r8, r3
 800976e:	4606      	mov	r6, r0
 8009770:	b09d      	sub	sp, #116	; 0x74
 8009772:	b118      	cbz	r0, 800977c <_vfiprintf_r+0x18>
 8009774:	6983      	ldr	r3, [r0, #24]
 8009776:	b90b      	cbnz	r3, 800977c <_vfiprintf_r+0x18>
 8009778:	f000 fb10 	bl	8009d9c <__sinit>
 800977c:	4b89      	ldr	r3, [pc, #548]	; (80099a4 <_vfiprintf_r+0x240>)
 800977e:	429d      	cmp	r5, r3
 8009780:	d11b      	bne.n	80097ba <_vfiprintf_r+0x56>
 8009782:	6875      	ldr	r5, [r6, #4]
 8009784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d405      	bmi.n	8009796 <_vfiprintf_r+0x32>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d402      	bmi.n	8009796 <_vfiprintf_r+0x32>
 8009790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009792:	f000 fba1 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	071b      	lsls	r3, r3, #28
 800979a:	d501      	bpl.n	80097a0 <_vfiprintf_r+0x3c>
 800979c:	692b      	ldr	r3, [r5, #16]
 800979e:	b9eb      	cbnz	r3, 80097dc <_vfiprintf_r+0x78>
 80097a0:	4629      	mov	r1, r5
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 f96e 	bl	8009a84 <__swsetup_r>
 80097a8:	b1c0      	cbz	r0, 80097dc <_vfiprintf_r+0x78>
 80097aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ac:	07dc      	lsls	r4, r3, #31
 80097ae:	d50e      	bpl.n	80097ce <_vfiprintf_r+0x6a>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b4:	b01d      	add	sp, #116	; 0x74
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	4b7b      	ldr	r3, [pc, #492]	; (80099a8 <_vfiprintf_r+0x244>)
 80097bc:	429d      	cmp	r5, r3
 80097be:	d101      	bne.n	80097c4 <_vfiprintf_r+0x60>
 80097c0:	68b5      	ldr	r5, [r6, #8]
 80097c2:	e7df      	b.n	8009784 <_vfiprintf_r+0x20>
 80097c4:	4b79      	ldr	r3, [pc, #484]	; (80099ac <_vfiprintf_r+0x248>)
 80097c6:	429d      	cmp	r5, r3
 80097c8:	bf08      	it	eq
 80097ca:	68f5      	ldreq	r5, [r6, #12]
 80097cc:	e7da      	b.n	8009784 <_vfiprintf_r+0x20>
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	0598      	lsls	r0, r3, #22
 80097d2:	d4ed      	bmi.n	80097b0 <_vfiprintf_r+0x4c>
 80097d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d6:	f000 fb80 	bl	8009eda <__retarget_lock_release_recursive>
 80097da:	e7e9      	b.n	80097b0 <_vfiprintf_r+0x4c>
 80097dc:	2300      	movs	r3, #0
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	2320      	movs	r3, #32
 80097e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e6:	2330      	movs	r3, #48	; 0x30
 80097e8:	f04f 0901 	mov.w	r9, #1
 80097ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80097f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80099b0 <_vfiprintf_r+0x24c>
 80097f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f8:	4623      	mov	r3, r4
 80097fa:	469a      	mov	sl, r3
 80097fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009800:	b10a      	cbz	r2, 8009806 <_vfiprintf_r+0xa2>
 8009802:	2a25      	cmp	r2, #37	; 0x25
 8009804:	d1f9      	bne.n	80097fa <_vfiprintf_r+0x96>
 8009806:	ebba 0b04 	subs.w	fp, sl, r4
 800980a:	d00b      	beq.n	8009824 <_vfiprintf_r+0xc0>
 800980c:	465b      	mov	r3, fp
 800980e:	4622      	mov	r2, r4
 8009810:	4629      	mov	r1, r5
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ff94 	bl	8009740 <__sfputs_r>
 8009818:	3001      	adds	r0, #1
 800981a:	f000 80aa 	beq.w	8009972 <_vfiprintf_r+0x20e>
 800981e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009820:	445a      	add	r2, fp
 8009822:	9209      	str	r2, [sp, #36]	; 0x24
 8009824:	f89a 3000 	ldrb.w	r3, [sl]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80a2 	beq.w	8009972 <_vfiprintf_r+0x20e>
 800982e:	2300      	movs	r3, #0
 8009830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009838:	f10a 0a01 	add.w	sl, sl, #1
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	9307      	str	r3, [sp, #28]
 8009840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009844:	931a      	str	r3, [sp, #104]	; 0x68
 8009846:	4654      	mov	r4, sl
 8009848:	2205      	movs	r2, #5
 800984a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984e:	4858      	ldr	r0, [pc, #352]	; (80099b0 <_vfiprintf_r+0x24c>)
 8009850:	f7ff f8d0 	bl	80089f4 <memchr>
 8009854:	9a04      	ldr	r2, [sp, #16]
 8009856:	b9d8      	cbnz	r0, 8009890 <_vfiprintf_r+0x12c>
 8009858:	06d1      	lsls	r1, r2, #27
 800985a:	bf44      	itt	mi
 800985c:	2320      	movmi	r3, #32
 800985e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009862:	0713      	lsls	r3, r2, #28
 8009864:	bf44      	itt	mi
 8009866:	232b      	movmi	r3, #43	; 0x2b
 8009868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986c:	f89a 3000 	ldrb.w	r3, [sl]
 8009870:	2b2a      	cmp	r3, #42	; 0x2a
 8009872:	d015      	beq.n	80098a0 <_vfiprintf_r+0x13c>
 8009874:	4654      	mov	r4, sl
 8009876:	2000      	movs	r0, #0
 8009878:	f04f 0c0a 	mov.w	ip, #10
 800987c:	9a07      	ldr	r2, [sp, #28]
 800987e:	4621      	mov	r1, r4
 8009880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009884:	3b30      	subs	r3, #48	; 0x30
 8009886:	2b09      	cmp	r3, #9
 8009888:	d94e      	bls.n	8009928 <_vfiprintf_r+0x1c4>
 800988a:	b1b0      	cbz	r0, 80098ba <_vfiprintf_r+0x156>
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	e014      	b.n	80098ba <_vfiprintf_r+0x156>
 8009890:	eba0 0308 	sub.w	r3, r0, r8
 8009894:	fa09 f303 	lsl.w	r3, r9, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	46a2      	mov	sl, r4
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	e7d2      	b.n	8009846 <_vfiprintf_r+0xe2>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	1d19      	adds	r1, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	9103      	str	r1, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfbb      	ittet	lt
 80098ac:	425b      	neglt	r3, r3
 80098ae:	f042 0202 	orrlt.w	r2, r2, #2
 80098b2:	9307      	strge	r3, [sp, #28]
 80098b4:	9307      	strlt	r3, [sp, #28]
 80098b6:	bfb8      	it	lt
 80098b8:	9204      	strlt	r2, [sp, #16]
 80098ba:	7823      	ldrb	r3, [r4, #0]
 80098bc:	2b2e      	cmp	r3, #46	; 0x2e
 80098be:	d10c      	bne.n	80098da <_vfiprintf_r+0x176>
 80098c0:	7863      	ldrb	r3, [r4, #1]
 80098c2:	2b2a      	cmp	r3, #42	; 0x2a
 80098c4:	d135      	bne.n	8009932 <_vfiprintf_r+0x1ce>
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	3402      	adds	r4, #2
 80098ca:	1d1a      	adds	r2, r3, #4
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	9203      	str	r2, [sp, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bfb8      	it	lt
 80098d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098d8:	9305      	str	r3, [sp, #20]
 80098da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80099b4 <_vfiprintf_r+0x250>
 80098de:	2203      	movs	r2, #3
 80098e0:	4650      	mov	r0, sl
 80098e2:	7821      	ldrb	r1, [r4, #0]
 80098e4:	f7ff f886 	bl	80089f4 <memchr>
 80098e8:	b140      	cbz	r0, 80098fc <_vfiprintf_r+0x198>
 80098ea:	2340      	movs	r3, #64	; 0x40
 80098ec:	eba0 000a 	sub.w	r0, r0, sl
 80098f0:	fa03 f000 	lsl.w	r0, r3, r0
 80098f4:	9b04      	ldr	r3, [sp, #16]
 80098f6:	3401      	adds	r4, #1
 80098f8:	4303      	orrs	r3, r0
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009900:	2206      	movs	r2, #6
 8009902:	482d      	ldr	r0, [pc, #180]	; (80099b8 <_vfiprintf_r+0x254>)
 8009904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009908:	f7ff f874 	bl	80089f4 <memchr>
 800990c:	2800      	cmp	r0, #0
 800990e:	d03f      	beq.n	8009990 <_vfiprintf_r+0x22c>
 8009910:	4b2a      	ldr	r3, [pc, #168]	; (80099bc <_vfiprintf_r+0x258>)
 8009912:	bb1b      	cbnz	r3, 800995c <_vfiprintf_r+0x1f8>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	3307      	adds	r3, #7
 8009918:	f023 0307 	bic.w	r3, r3, #7
 800991c:	3308      	adds	r3, #8
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009922:	443b      	add	r3, r7
 8009924:	9309      	str	r3, [sp, #36]	; 0x24
 8009926:	e767      	b.n	80097f8 <_vfiprintf_r+0x94>
 8009928:	460c      	mov	r4, r1
 800992a:	2001      	movs	r0, #1
 800992c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009930:	e7a5      	b.n	800987e <_vfiprintf_r+0x11a>
 8009932:	2300      	movs	r3, #0
 8009934:	f04f 0c0a 	mov.w	ip, #10
 8009938:	4619      	mov	r1, r3
 800993a:	3401      	adds	r4, #1
 800993c:	9305      	str	r3, [sp, #20]
 800993e:	4620      	mov	r0, r4
 8009940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009944:	3a30      	subs	r2, #48	; 0x30
 8009946:	2a09      	cmp	r2, #9
 8009948:	d903      	bls.n	8009952 <_vfiprintf_r+0x1ee>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0c5      	beq.n	80098da <_vfiprintf_r+0x176>
 800994e:	9105      	str	r1, [sp, #20]
 8009950:	e7c3      	b.n	80098da <_vfiprintf_r+0x176>
 8009952:	4604      	mov	r4, r0
 8009954:	2301      	movs	r3, #1
 8009956:	fb0c 2101 	mla	r1, ip, r1, r2
 800995a:	e7f0      	b.n	800993e <_vfiprintf_r+0x1da>
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	462a      	mov	r2, r5
 8009962:	4630      	mov	r0, r6
 8009964:	4b16      	ldr	r3, [pc, #88]	; (80099c0 <_vfiprintf_r+0x25c>)
 8009966:	a904      	add	r1, sp, #16
 8009968:	f7fd fda8 	bl	80074bc <_printf_float>
 800996c:	4607      	mov	r7, r0
 800996e:	1c78      	adds	r0, r7, #1
 8009970:	d1d6      	bne.n	8009920 <_vfiprintf_r+0x1bc>
 8009972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009974:	07d9      	lsls	r1, r3, #31
 8009976:	d405      	bmi.n	8009984 <_vfiprintf_r+0x220>
 8009978:	89ab      	ldrh	r3, [r5, #12]
 800997a:	059a      	lsls	r2, r3, #22
 800997c:	d402      	bmi.n	8009984 <_vfiprintf_r+0x220>
 800997e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009980:	f000 faab 	bl	8009eda <__retarget_lock_release_recursive>
 8009984:	89ab      	ldrh	r3, [r5, #12]
 8009986:	065b      	lsls	r3, r3, #25
 8009988:	f53f af12 	bmi.w	80097b0 <_vfiprintf_r+0x4c>
 800998c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800998e:	e711      	b.n	80097b4 <_vfiprintf_r+0x50>
 8009990:	ab03      	add	r3, sp, #12
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	462a      	mov	r2, r5
 8009996:	4630      	mov	r0, r6
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <_vfiprintf_r+0x25c>)
 800999a:	a904      	add	r1, sp, #16
 800999c:	f7fe f82a 	bl	80079f4 <_printf_i>
 80099a0:	e7e4      	b.n	800996c <_vfiprintf_r+0x208>
 80099a2:	bf00      	nop
 80099a4:	0800a5fc 	.word	0x0800a5fc
 80099a8:	0800a61c 	.word	0x0800a61c
 80099ac:	0800a5dc 	.word	0x0800a5dc
 80099b0:	0800a484 	.word	0x0800a484
 80099b4:	0800a48a 	.word	0x0800a48a
 80099b8:	0800a48e 	.word	0x0800a48e
 80099bc:	080074bd 	.word	0x080074bd
 80099c0:	08009741 	.word	0x08009741

080099c4 <__swbuf_r>:
 80099c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c6:	460e      	mov	r6, r1
 80099c8:	4614      	mov	r4, r2
 80099ca:	4605      	mov	r5, r0
 80099cc:	b118      	cbz	r0, 80099d6 <__swbuf_r+0x12>
 80099ce:	6983      	ldr	r3, [r0, #24]
 80099d0:	b90b      	cbnz	r3, 80099d6 <__swbuf_r+0x12>
 80099d2:	f000 f9e3 	bl	8009d9c <__sinit>
 80099d6:	4b21      	ldr	r3, [pc, #132]	; (8009a5c <__swbuf_r+0x98>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d12b      	bne.n	8009a34 <__swbuf_r+0x70>
 80099dc:	686c      	ldr	r4, [r5, #4]
 80099de:	69a3      	ldr	r3, [r4, #24]
 80099e0:	60a3      	str	r3, [r4, #8]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	071a      	lsls	r2, r3, #28
 80099e6:	d52f      	bpl.n	8009a48 <__swbuf_r+0x84>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	b36b      	cbz	r3, 8009a48 <__swbuf_r+0x84>
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	b2f6      	uxtb	r6, r6
 80099f2:	1ac0      	subs	r0, r0, r3
 80099f4:	6963      	ldr	r3, [r4, #20]
 80099f6:	4637      	mov	r7, r6
 80099f8:	4283      	cmp	r3, r0
 80099fa:	dc04      	bgt.n	8009a06 <__swbuf_r+0x42>
 80099fc:	4621      	mov	r1, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 f938 	bl	8009c74 <_fflush_r>
 8009a04:	bb30      	cbnz	r0, 8009a54 <__swbuf_r+0x90>
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	3001      	adds	r0, #1
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	6022      	str	r2, [r4, #0]
 8009a14:	701e      	strb	r6, [r3, #0]
 8009a16:	6963      	ldr	r3, [r4, #20]
 8009a18:	4283      	cmp	r3, r0
 8009a1a:	d004      	beq.n	8009a26 <__swbuf_r+0x62>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	07db      	lsls	r3, r3, #31
 8009a20:	d506      	bpl.n	8009a30 <__swbuf_r+0x6c>
 8009a22:	2e0a      	cmp	r6, #10
 8009a24:	d104      	bne.n	8009a30 <__swbuf_r+0x6c>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 f923 	bl	8009c74 <_fflush_r>
 8009a2e:	b988      	cbnz	r0, 8009a54 <__swbuf_r+0x90>
 8009a30:	4638      	mov	r0, r7
 8009a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a34:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <__swbuf_r+0x9c>)
 8009a36:	429c      	cmp	r4, r3
 8009a38:	d101      	bne.n	8009a3e <__swbuf_r+0x7a>
 8009a3a:	68ac      	ldr	r4, [r5, #8]
 8009a3c:	e7cf      	b.n	80099de <__swbuf_r+0x1a>
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <__swbuf_r+0xa0>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	bf08      	it	eq
 8009a44:	68ec      	ldreq	r4, [r5, #12]
 8009a46:	e7ca      	b.n	80099de <__swbuf_r+0x1a>
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f000 f81a 	bl	8009a84 <__swsetup_r>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d0cb      	beq.n	80099ec <__swbuf_r+0x28>
 8009a54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a58:	e7ea      	b.n	8009a30 <__swbuf_r+0x6c>
 8009a5a:	bf00      	nop
 8009a5c:	0800a5fc 	.word	0x0800a5fc
 8009a60:	0800a61c 	.word	0x0800a61c
 8009a64:	0800a5dc 	.word	0x0800a5dc

08009a68 <__ascii_wctomb>:
 8009a68:	4603      	mov	r3, r0
 8009a6a:	4608      	mov	r0, r1
 8009a6c:	b141      	cbz	r1, 8009a80 <__ascii_wctomb+0x18>
 8009a6e:	2aff      	cmp	r2, #255	; 0xff
 8009a70:	d904      	bls.n	8009a7c <__ascii_wctomb+0x14>
 8009a72:	228a      	movs	r2, #138	; 0x8a
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	4770      	bx	lr
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	700a      	strb	r2, [r1, #0]
 8009a80:	4770      	bx	lr
	...

08009a84 <__swsetup_r>:
 8009a84:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <__swsetup_r+0xcc>)
 8009a86:	b570      	push	{r4, r5, r6, lr}
 8009a88:	681d      	ldr	r5, [r3, #0]
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	b125      	cbz	r5, 8009a9a <__swsetup_r+0x16>
 8009a90:	69ab      	ldr	r3, [r5, #24]
 8009a92:	b913      	cbnz	r3, 8009a9a <__swsetup_r+0x16>
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 f981 	bl	8009d9c <__sinit>
 8009a9a:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <__swsetup_r+0xd0>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d10f      	bne.n	8009ac0 <__swsetup_r+0x3c>
 8009aa0:	686c      	ldr	r4, [r5, #4]
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aa8:	0719      	lsls	r1, r3, #28
 8009aaa:	d42c      	bmi.n	8009b06 <__swsetup_r+0x82>
 8009aac:	06dd      	lsls	r5, r3, #27
 8009aae:	d411      	bmi.n	8009ad4 <__swsetup_r+0x50>
 8009ab0:	2309      	movs	r3, #9
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009abc:	81a3      	strh	r3, [r4, #12]
 8009abe:	e03e      	b.n	8009b3e <__swsetup_r+0xba>
 8009ac0:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <__swsetup_r+0xd4>)
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d101      	bne.n	8009aca <__swsetup_r+0x46>
 8009ac6:	68ac      	ldr	r4, [r5, #8]
 8009ac8:	e7eb      	b.n	8009aa2 <__swsetup_r+0x1e>
 8009aca:	4b24      	ldr	r3, [pc, #144]	; (8009b5c <__swsetup_r+0xd8>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	bf08      	it	eq
 8009ad0:	68ec      	ldreq	r4, [r5, #12]
 8009ad2:	e7e6      	b.n	8009aa2 <__swsetup_r+0x1e>
 8009ad4:	0758      	lsls	r0, r3, #29
 8009ad6:	d512      	bpl.n	8009afe <__swsetup_r+0x7a>
 8009ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ada:	b141      	cbz	r1, 8009aee <__swsetup_r+0x6a>
 8009adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	d002      	beq.n	8009aea <__swsetup_r+0x66>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff fb37 	bl	8009158 <_free_r>
 8009aea:	2300      	movs	r3, #0
 8009aec:	6363      	str	r3, [r4, #52]	; 0x34
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	2300      	movs	r3, #0
 8009af8:	6063      	str	r3, [r4, #4]
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	f043 0308 	orr.w	r3, r3, #8
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	b94b      	cbnz	r3, 8009b1e <__swsetup_r+0x9a>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b14:	d003      	beq.n	8009b1e <__swsetup_r+0x9a>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 fa05 	bl	8009f28 <__smakebuf_r>
 8009b1e:	89a0      	ldrh	r0, [r4, #12]
 8009b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b24:	f010 0301 	ands.w	r3, r0, #1
 8009b28:	d00a      	beq.n	8009b40 <__swsetup_r+0xbc>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60a3      	str	r3, [r4, #8]
 8009b2e:	6963      	ldr	r3, [r4, #20]
 8009b30:	425b      	negs	r3, r3
 8009b32:	61a3      	str	r3, [r4, #24]
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	b943      	cbnz	r3, 8009b4a <__swsetup_r+0xc6>
 8009b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b3c:	d1ba      	bne.n	8009ab4 <__swsetup_r+0x30>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	0781      	lsls	r1, r0, #30
 8009b42:	bf58      	it	pl
 8009b44:	6963      	ldrpl	r3, [r4, #20]
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	e7f4      	b.n	8009b34 <__swsetup_r+0xb0>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e7f7      	b.n	8009b3e <__swsetup_r+0xba>
 8009b4e:	bf00      	nop
 8009b50:	20000018 	.word	0x20000018
 8009b54:	0800a5fc 	.word	0x0800a5fc
 8009b58:	0800a61c 	.word	0x0800a61c
 8009b5c:	0800a5dc 	.word	0x0800a5dc

08009b60 <abort>:
 8009b60:	2006      	movs	r0, #6
 8009b62:	b508      	push	{r3, lr}
 8009b64:	f000 fa50 	bl	800a008 <raise>
 8009b68:	2001      	movs	r0, #1
 8009b6a:	f7f8 f87a 	bl	8001c62 <_exit>
	...

08009b70 <__sflush_r>:
 8009b70:	898a      	ldrh	r2, [r1, #12]
 8009b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b74:	4605      	mov	r5, r0
 8009b76:	0710      	lsls	r0, r2, #28
 8009b78:	460c      	mov	r4, r1
 8009b7a:	d457      	bmi.n	8009c2c <__sflush_r+0xbc>
 8009b7c:	684b      	ldr	r3, [r1, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dc04      	bgt.n	8009b8c <__sflush_r+0x1c>
 8009b82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dc01      	bgt.n	8009b8c <__sflush_r+0x1c>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	d0fa      	beq.n	8009b88 <__sflush_r+0x18>
 8009b92:	2300      	movs	r3, #0
 8009b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b98:	682f      	ldr	r7, [r5, #0]
 8009b9a:	602b      	str	r3, [r5, #0]
 8009b9c:	d032      	beq.n	8009c04 <__sflush_r+0x94>
 8009b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	075a      	lsls	r2, r3, #29
 8009ba4:	d505      	bpl.n	8009bb2 <__sflush_r+0x42>
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	1ac0      	subs	r0, r0, r3
 8009baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bac:	b10b      	cbz	r3, 8009bb2 <__sflush_r+0x42>
 8009bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bb0:	1ac0      	subs	r0, r0, r3
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bb8:	4628      	mov	r0, r5
 8009bba:	6a21      	ldr	r1, [r4, #32]
 8009bbc:	47b0      	blx	r6
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	d106      	bne.n	8009bd2 <__sflush_r+0x62>
 8009bc4:	6829      	ldr	r1, [r5, #0]
 8009bc6:	291d      	cmp	r1, #29
 8009bc8:	d82c      	bhi.n	8009c24 <__sflush_r+0xb4>
 8009bca:	4a29      	ldr	r2, [pc, #164]	; (8009c70 <__sflush_r+0x100>)
 8009bcc:	40ca      	lsrs	r2, r1
 8009bce:	07d6      	lsls	r6, r2, #31
 8009bd0:	d528      	bpl.n	8009c24 <__sflush_r+0xb4>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	6062      	str	r2, [r4, #4]
 8009bd6:	6922      	ldr	r2, [r4, #16]
 8009bd8:	04d9      	lsls	r1, r3, #19
 8009bda:	6022      	str	r2, [r4, #0]
 8009bdc:	d504      	bpl.n	8009be8 <__sflush_r+0x78>
 8009bde:	1c42      	adds	r2, r0, #1
 8009be0:	d101      	bne.n	8009be6 <__sflush_r+0x76>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	b903      	cbnz	r3, 8009be8 <__sflush_r+0x78>
 8009be6:	6560      	str	r0, [r4, #84]	; 0x54
 8009be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bea:	602f      	str	r7, [r5, #0]
 8009bec:	2900      	cmp	r1, #0
 8009bee:	d0cb      	beq.n	8009b88 <__sflush_r+0x18>
 8009bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf4:	4299      	cmp	r1, r3
 8009bf6:	d002      	beq.n	8009bfe <__sflush_r+0x8e>
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f7ff faad 	bl	8009158 <_free_r>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	6360      	str	r0, [r4, #52]	; 0x34
 8009c02:	e7c2      	b.n	8009b8a <__sflush_r+0x1a>
 8009c04:	6a21      	ldr	r1, [r4, #32]
 8009c06:	2301      	movs	r3, #1
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b0      	blx	r6
 8009c0c:	1c41      	adds	r1, r0, #1
 8009c0e:	d1c7      	bne.n	8009ba0 <__sflush_r+0x30>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0c4      	beq.n	8009ba0 <__sflush_r+0x30>
 8009c16:	2b1d      	cmp	r3, #29
 8009c18:	d001      	beq.n	8009c1e <__sflush_r+0xae>
 8009c1a:	2b16      	cmp	r3, #22
 8009c1c:	d101      	bne.n	8009c22 <__sflush_r+0xb2>
 8009c1e:	602f      	str	r7, [r5, #0]
 8009c20:	e7b2      	b.n	8009b88 <__sflush_r+0x18>
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c28:	81a3      	strh	r3, [r4, #12]
 8009c2a:	e7ae      	b.n	8009b8a <__sflush_r+0x1a>
 8009c2c:	690f      	ldr	r7, [r1, #16]
 8009c2e:	2f00      	cmp	r7, #0
 8009c30:	d0aa      	beq.n	8009b88 <__sflush_r+0x18>
 8009c32:	0793      	lsls	r3, r2, #30
 8009c34:	bf18      	it	ne
 8009c36:	2300      	movne	r3, #0
 8009c38:	680e      	ldr	r6, [r1, #0]
 8009c3a:	bf08      	it	eq
 8009c3c:	694b      	ldreq	r3, [r1, #20]
 8009c3e:	1bf6      	subs	r6, r6, r7
 8009c40:	600f      	str	r7, [r1, #0]
 8009c42:	608b      	str	r3, [r1, #8]
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	dd9f      	ble.n	8009b88 <__sflush_r+0x18>
 8009c48:	4633      	mov	r3, r6
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	6a21      	ldr	r1, [r4, #32]
 8009c50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009c54:	47e0      	blx	ip
 8009c56:	2800      	cmp	r0, #0
 8009c58:	dc06      	bgt.n	8009c68 <__sflush_r+0xf8>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	e790      	b.n	8009b8a <__sflush_r+0x1a>
 8009c68:	4407      	add	r7, r0
 8009c6a:	1a36      	subs	r6, r6, r0
 8009c6c:	e7ea      	b.n	8009c44 <__sflush_r+0xd4>
 8009c6e:	bf00      	nop
 8009c70:	20400001 	.word	0x20400001

08009c74 <_fflush_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	690b      	ldr	r3, [r1, #16]
 8009c78:	4605      	mov	r5, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	b913      	cbnz	r3, 8009c84 <_fflush_r+0x10>
 8009c7e:	2500      	movs	r5, #0
 8009c80:	4628      	mov	r0, r5
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	b118      	cbz	r0, 8009c8e <_fflush_r+0x1a>
 8009c86:	6983      	ldr	r3, [r0, #24]
 8009c88:	b90b      	cbnz	r3, 8009c8e <_fflush_r+0x1a>
 8009c8a:	f000 f887 	bl	8009d9c <__sinit>
 8009c8e:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <_fflush_r+0x6c>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	d11b      	bne.n	8009ccc <_fflush_r+0x58>
 8009c94:	686c      	ldr	r4, [r5, #4]
 8009c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0ef      	beq.n	8009c7e <_fflush_r+0xa>
 8009c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ca0:	07d0      	lsls	r0, r2, #31
 8009ca2:	d404      	bmi.n	8009cae <_fflush_r+0x3a>
 8009ca4:	0599      	lsls	r1, r3, #22
 8009ca6:	d402      	bmi.n	8009cae <_fflush_r+0x3a>
 8009ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009caa:	f000 f915 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	f7ff ff5d 	bl	8009b70 <__sflush_r>
 8009cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cb8:	4605      	mov	r5, r0
 8009cba:	07da      	lsls	r2, r3, #31
 8009cbc:	d4e0      	bmi.n	8009c80 <_fflush_r+0xc>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	059b      	lsls	r3, r3, #22
 8009cc2:	d4dd      	bmi.n	8009c80 <_fflush_r+0xc>
 8009cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cc6:	f000 f908 	bl	8009eda <__retarget_lock_release_recursive>
 8009cca:	e7d9      	b.n	8009c80 <_fflush_r+0xc>
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <_fflush_r+0x70>)
 8009cce:	429c      	cmp	r4, r3
 8009cd0:	d101      	bne.n	8009cd6 <_fflush_r+0x62>
 8009cd2:	68ac      	ldr	r4, [r5, #8]
 8009cd4:	e7df      	b.n	8009c96 <_fflush_r+0x22>
 8009cd6:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <_fflush_r+0x74>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	bf08      	it	eq
 8009cdc:	68ec      	ldreq	r4, [r5, #12]
 8009cde:	e7da      	b.n	8009c96 <_fflush_r+0x22>
 8009ce0:	0800a5fc 	.word	0x0800a5fc
 8009ce4:	0800a61c 	.word	0x0800a61c
 8009ce8:	0800a5dc 	.word	0x0800a5dc

08009cec <std>:
 8009cec:	2300      	movs	r3, #0
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8009cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cfa:	6083      	str	r3, [r0, #8]
 8009cfc:	8181      	strh	r1, [r0, #12]
 8009cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8009d00:	81c2      	strh	r2, [r0, #14]
 8009d02:	6183      	str	r3, [r0, #24]
 8009d04:	4619      	mov	r1, r3
 8009d06:	2208      	movs	r2, #8
 8009d08:	305c      	adds	r0, #92	; 0x5c
 8009d0a:	f7fd fb31 	bl	8007370 <memset>
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <std+0x38>)
 8009d10:	6224      	str	r4, [r4, #32]
 8009d12:	6263      	str	r3, [r4, #36]	; 0x24
 8009d14:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <std+0x3c>)
 8009d16:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d18:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <std+0x40>)
 8009d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d1c:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <std+0x44>)
 8009d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	0800a041 	.word	0x0800a041
 8009d28:	0800a063 	.word	0x0800a063
 8009d2c:	0800a09b 	.word	0x0800a09b
 8009d30:	0800a0bf 	.word	0x0800a0bf

08009d34 <_cleanup_r>:
 8009d34:	4901      	ldr	r1, [pc, #4]	; (8009d3c <_cleanup_r+0x8>)
 8009d36:	f000 b8af 	b.w	8009e98 <_fwalk_reent>
 8009d3a:	bf00      	nop
 8009d3c:	08009c75 	.word	0x08009c75

08009d40 <__sfmoreglue>:
 8009d40:	2268      	movs	r2, #104	; 0x68
 8009d42:	b570      	push	{r4, r5, r6, lr}
 8009d44:	1e4d      	subs	r5, r1, #1
 8009d46:	4355      	muls	r5, r2
 8009d48:	460e      	mov	r6, r1
 8009d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d4e:	f7ff fa6b 	bl	8009228 <_malloc_r>
 8009d52:	4604      	mov	r4, r0
 8009d54:	b140      	cbz	r0, 8009d68 <__sfmoreglue+0x28>
 8009d56:	2100      	movs	r1, #0
 8009d58:	e9c0 1600 	strd	r1, r6, [r0]
 8009d5c:	300c      	adds	r0, #12
 8009d5e:	60a0      	str	r0, [r4, #8]
 8009d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d64:	f7fd fb04 	bl	8007370 <memset>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}

08009d6c <__sfp_lock_acquire>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__sfp_lock_acquire+0x8>)
 8009d6e:	f000 b8b3 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009d72:	bf00      	nop
 8009d74:	2000077d 	.word	0x2000077d

08009d78 <__sfp_lock_release>:
 8009d78:	4801      	ldr	r0, [pc, #4]	; (8009d80 <__sfp_lock_release+0x8>)
 8009d7a:	f000 b8ae 	b.w	8009eda <__retarget_lock_release_recursive>
 8009d7e:	bf00      	nop
 8009d80:	2000077d 	.word	0x2000077d

08009d84 <__sinit_lock_acquire>:
 8009d84:	4801      	ldr	r0, [pc, #4]	; (8009d8c <__sinit_lock_acquire+0x8>)
 8009d86:	f000 b8a7 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	2000077e 	.word	0x2000077e

08009d90 <__sinit_lock_release>:
 8009d90:	4801      	ldr	r0, [pc, #4]	; (8009d98 <__sinit_lock_release+0x8>)
 8009d92:	f000 b8a2 	b.w	8009eda <__retarget_lock_release_recursive>
 8009d96:	bf00      	nop
 8009d98:	2000077e 	.word	0x2000077e

08009d9c <__sinit>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	4604      	mov	r4, r0
 8009da0:	f7ff fff0 	bl	8009d84 <__sinit_lock_acquire>
 8009da4:	69a3      	ldr	r3, [r4, #24]
 8009da6:	b11b      	cbz	r3, 8009db0 <__sinit+0x14>
 8009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dac:	f7ff bff0 	b.w	8009d90 <__sinit_lock_release>
 8009db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009db4:	6523      	str	r3, [r4, #80]	; 0x50
 8009db6:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <__sinit+0x68>)
 8009db8:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <__sinit+0x6c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	bf08      	it	eq
 8009dc2:	2301      	moveq	r3, #1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bf08      	it	eq
 8009dc8:	61a3      	streq	r3, [r4, #24]
 8009dca:	f000 f81f 	bl	8009e0c <__sfp>
 8009dce:	6060      	str	r0, [r4, #4]
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 f81b 	bl	8009e0c <__sfp>
 8009dd6:	60a0      	str	r0, [r4, #8]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 f817 	bl	8009e0c <__sfp>
 8009dde:	2200      	movs	r2, #0
 8009de0:	2104      	movs	r1, #4
 8009de2:	60e0      	str	r0, [r4, #12]
 8009de4:	6860      	ldr	r0, [r4, #4]
 8009de6:	f7ff ff81 	bl	8009cec <std>
 8009dea:	2201      	movs	r2, #1
 8009dec:	2109      	movs	r1, #9
 8009dee:	68a0      	ldr	r0, [r4, #8]
 8009df0:	f7ff ff7c 	bl	8009cec <std>
 8009df4:	2202      	movs	r2, #2
 8009df6:	2112      	movs	r1, #18
 8009df8:	68e0      	ldr	r0, [r4, #12]
 8009dfa:	f7ff ff77 	bl	8009cec <std>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	61a3      	str	r3, [r4, #24]
 8009e02:	e7d1      	b.n	8009da8 <__sinit+0xc>
 8009e04:	0800a260 	.word	0x0800a260
 8009e08:	08009d35 	.word	0x08009d35

08009e0c <__sfp>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	4607      	mov	r7, r0
 8009e10:	f7ff ffac 	bl	8009d6c <__sfp_lock_acquire>
 8009e14:	4b1e      	ldr	r3, [pc, #120]	; (8009e90 <__sfp+0x84>)
 8009e16:	681e      	ldr	r6, [r3, #0]
 8009e18:	69b3      	ldr	r3, [r6, #24]
 8009e1a:	b913      	cbnz	r3, 8009e22 <__sfp+0x16>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff ffbd 	bl	8009d9c <__sinit>
 8009e22:	3648      	adds	r6, #72	; 0x48
 8009e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	d503      	bpl.n	8009e34 <__sfp+0x28>
 8009e2c:	6833      	ldr	r3, [r6, #0]
 8009e2e:	b30b      	cbz	r3, 8009e74 <__sfp+0x68>
 8009e30:	6836      	ldr	r6, [r6, #0]
 8009e32:	e7f7      	b.n	8009e24 <__sfp+0x18>
 8009e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e38:	b9d5      	cbnz	r5, 8009e70 <__sfp+0x64>
 8009e3a:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <__sfp+0x88>)
 8009e3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e40:	60e3      	str	r3, [r4, #12]
 8009e42:	6665      	str	r5, [r4, #100]	; 0x64
 8009e44:	f000 f847 	bl	8009ed6 <__retarget_lock_init_recursive>
 8009e48:	f7ff ff96 	bl	8009d78 <__sfp_lock_release>
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	4629      	mov	r1, r5
 8009e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e58:	6025      	str	r5, [r4, #0]
 8009e5a:	61a5      	str	r5, [r4, #24]
 8009e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e60:	f7fd fa86 	bl	8007370 <memset>
 8009e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e70:	3468      	adds	r4, #104	; 0x68
 8009e72:	e7d9      	b.n	8009e28 <__sfp+0x1c>
 8009e74:	2104      	movs	r1, #4
 8009e76:	4638      	mov	r0, r7
 8009e78:	f7ff ff62 	bl	8009d40 <__sfmoreglue>
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	6030      	str	r0, [r6, #0]
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1d5      	bne.n	8009e30 <__sfp+0x24>
 8009e84:	f7ff ff78 	bl	8009d78 <__sfp_lock_release>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	e7ee      	b.n	8009e6c <__sfp+0x60>
 8009e8e:	bf00      	nop
 8009e90:	0800a260 	.word	0x0800a260
 8009e94:	ffff0001 	.word	0xffff0001

08009e98 <_fwalk_reent>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	4688      	mov	r8, r1
 8009ea0:	2700      	movs	r7, #0
 8009ea2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8009eae:	d505      	bpl.n	8009ebc <_fwalk_reent+0x24>
 8009eb0:	6824      	ldr	r4, [r4, #0]
 8009eb2:	2c00      	cmp	r4, #0
 8009eb4:	d1f7      	bne.n	8009ea6 <_fwalk_reent+0xe>
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ebc:	89ab      	ldrh	r3, [r5, #12]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d907      	bls.n	8009ed2 <_fwalk_reent+0x3a>
 8009ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	d003      	beq.n	8009ed2 <_fwalk_reent+0x3a>
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4630      	mov	r0, r6
 8009ece:	47c0      	blx	r8
 8009ed0:	4307      	orrs	r7, r0
 8009ed2:	3568      	adds	r5, #104	; 0x68
 8009ed4:	e7e9      	b.n	8009eaa <_fwalk_reent+0x12>

08009ed6 <__retarget_lock_init_recursive>:
 8009ed6:	4770      	bx	lr

08009ed8 <__retarget_lock_acquire_recursive>:
 8009ed8:	4770      	bx	lr

08009eda <__retarget_lock_release_recursive>:
 8009eda:	4770      	bx	lr

08009edc <__swhatbuf_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	460e      	mov	r6, r1
 8009ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee4:	4614      	mov	r4, r2
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	461d      	mov	r5, r3
 8009eea:	b096      	sub	sp, #88	; 0x58
 8009eec:	da08      	bge.n	8009f00 <__swhatbuf_r+0x24>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	061a      	lsls	r2, r3, #24
 8009ef8:	d410      	bmi.n	8009f1c <__swhatbuf_r+0x40>
 8009efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efe:	e00e      	b.n	8009f1e <__swhatbuf_r+0x42>
 8009f00:	466a      	mov	r2, sp
 8009f02:	f000 f903 	bl	800a10c <_fstat_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	dbf1      	blt.n	8009eee <__swhatbuf_r+0x12>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f14:	425a      	negs	r2, r3
 8009f16:	415a      	adcs	r2, r3
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	e7ee      	b.n	8009efa <__swhatbuf_r+0x1e>
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	2000      	movs	r0, #0
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	b016      	add	sp, #88	; 0x58
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f28 <__smakebuf_r>:
 8009f28:	898b      	ldrh	r3, [r1, #12]
 8009f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f2c:	079d      	lsls	r5, r3, #30
 8009f2e:	4606      	mov	r6, r0
 8009f30:	460c      	mov	r4, r1
 8009f32:	d507      	bpl.n	8009f44 <__smakebuf_r+0x1c>
 8009f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	6163      	str	r3, [r4, #20]
 8009f40:	b002      	add	sp, #8
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	466a      	mov	r2, sp
 8009f46:	ab01      	add	r3, sp, #4
 8009f48:	f7ff ffc8 	bl	8009edc <__swhatbuf_r>
 8009f4c:	9900      	ldr	r1, [sp, #0]
 8009f4e:	4605      	mov	r5, r0
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff f969 	bl	8009228 <_malloc_r>
 8009f56:	b948      	cbnz	r0, 8009f6c <__smakebuf_r+0x44>
 8009f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f5c:	059a      	lsls	r2, r3, #22
 8009f5e:	d4ef      	bmi.n	8009f40 <__smakebuf_r+0x18>
 8009f60:	f023 0303 	bic.w	r3, r3, #3
 8009f64:	f043 0302 	orr.w	r3, r3, #2
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	e7e3      	b.n	8009f34 <__smakebuf_r+0xc>
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	; (8009fa4 <__smakebuf_r+0x7c>)
 8009f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	6020      	str	r0, [r4, #0]
 8009f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	6120      	str	r0, [r4, #16]
 8009f7e:	6163      	str	r3, [r4, #20]
 8009f80:	9b01      	ldr	r3, [sp, #4]
 8009f82:	b15b      	cbz	r3, 8009f9c <__smakebuf_r+0x74>
 8009f84:	4630      	mov	r0, r6
 8009f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f8a:	f000 f8d1 	bl	800a130 <_isatty_r>
 8009f8e:	b128      	cbz	r0, 8009f9c <__smakebuf_r+0x74>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	89a0      	ldrh	r0, [r4, #12]
 8009f9e:	4305      	orrs	r5, r0
 8009fa0:	81a5      	strh	r5, [r4, #12]
 8009fa2:	e7cd      	b.n	8009f40 <__smakebuf_r+0x18>
 8009fa4:	08009d35 	.word	0x08009d35

08009fa8 <_malloc_usable_size_r>:
 8009fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fac:	1f18      	subs	r0, r3, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbc      	itt	lt
 8009fb2:	580b      	ldrlt	r3, [r1, r0]
 8009fb4:	18c0      	addlt	r0, r0, r3
 8009fb6:	4770      	bx	lr

08009fb8 <_raise_r>:
 8009fb8:	291f      	cmp	r1, #31
 8009fba:	b538      	push	{r3, r4, r5, lr}
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	d904      	bls.n	8009fcc <_raise_r+0x14>
 8009fc2:	2316      	movs	r3, #22
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fce:	b112      	cbz	r2, 8009fd6 <_raise_r+0x1e>
 8009fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fd4:	b94b      	cbnz	r3, 8009fea <_raise_r+0x32>
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f830 	bl	800a03c <_getpid_r>
 8009fdc:	462a      	mov	r2, r5
 8009fde:	4601      	mov	r1, r0
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe6:	f000 b817 	b.w	800a018 <_kill_r>
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d00a      	beq.n	800a004 <_raise_r+0x4c>
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	d103      	bne.n	8009ffa <_raise_r+0x42>
 8009ff2:	2316      	movs	r3, #22
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	e7e7      	b.n	8009fca <_raise_r+0x12>
 8009ffa:	2400      	movs	r4, #0
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a002:	4798      	blx	r3
 800a004:	2000      	movs	r0, #0
 800a006:	e7e0      	b.n	8009fca <_raise_r+0x12>

0800a008 <raise>:
 800a008:	4b02      	ldr	r3, [pc, #8]	; (800a014 <raise+0xc>)
 800a00a:	4601      	mov	r1, r0
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	f7ff bfd3 	b.w	8009fb8 <_raise_r>
 800a012:	bf00      	nop
 800a014:	20000018 	.word	0x20000018

0800a018 <_kill_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	2300      	movs	r3, #0
 800a01c:	4d06      	ldr	r5, [pc, #24]	; (800a038 <_kill_r+0x20>)
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	4611      	mov	r1, r2
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	f7f7 fe0c 	bl	8001c42 <_kill>
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	d102      	bne.n	800a034 <_kill_r+0x1c>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	b103      	cbz	r3, 800a034 <_kill_r+0x1c>
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	bd38      	pop	{r3, r4, r5, pc}
 800a036:	bf00      	nop
 800a038:	20000778 	.word	0x20000778

0800a03c <_getpid_r>:
 800a03c:	f7f7 bdfa 	b.w	8001c34 <_getpid>

0800a040 <__sread>:
 800a040:	b510      	push	{r4, lr}
 800a042:	460c      	mov	r4, r1
 800a044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a048:	f000 f894 	bl	800a174 <_read_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	bfab      	itete	ge
 800a050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a052:	89a3      	ldrhlt	r3, [r4, #12]
 800a054:	181b      	addge	r3, r3, r0
 800a056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a05a:	bfac      	ite	ge
 800a05c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a05e:	81a3      	strhlt	r3, [r4, #12]
 800a060:	bd10      	pop	{r4, pc}

0800a062 <__swrite>:
 800a062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a066:	461f      	mov	r7, r3
 800a068:	898b      	ldrh	r3, [r1, #12]
 800a06a:	4605      	mov	r5, r0
 800a06c:	05db      	lsls	r3, r3, #23
 800a06e:	460c      	mov	r4, r1
 800a070:	4616      	mov	r6, r2
 800a072:	d505      	bpl.n	800a080 <__swrite+0x1e>
 800a074:	2302      	movs	r3, #2
 800a076:	2200      	movs	r2, #0
 800a078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a07c:	f000 f868 	bl	800a150 <_lseek_r>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	4632      	mov	r2, r6
 800a084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	4628      	mov	r0, r5
 800a08c:	463b      	mov	r3, r7
 800a08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	f000 b817 	b.w	800a0c8 <_write_r>

0800a09a <__sseek>:
 800a09a:	b510      	push	{r4, lr}
 800a09c:	460c      	mov	r4, r1
 800a09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a2:	f000 f855 	bl	800a150 <_lseek_r>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	bf15      	itete	ne
 800a0ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0b6:	81a3      	strheq	r3, [r4, #12]
 800a0b8:	bf18      	it	ne
 800a0ba:	81a3      	strhne	r3, [r4, #12]
 800a0bc:	bd10      	pop	{r4, pc}

0800a0be <__sclose>:
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 b813 	b.w	800a0ec <_close_r>
	...

0800a0c8 <_write_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4d05      	ldr	r5, [pc, #20]	; (800a0e8 <_write_r+0x20>)
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f7f7 fdea 	bl	8001cb0 <_write>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_write_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_write_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	20000778 	.word	0x20000778

0800a0ec <_close_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4d05      	ldr	r5, [pc, #20]	; (800a108 <_close_r+0x1c>)
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	f7f7 fdf6 	bl	8001ce8 <_close>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_close_r+0x1a>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_close_r+0x1a>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	20000778 	.word	0x20000778

0800a10c <_fstat_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	2300      	movs	r3, #0
 800a110:	4d06      	ldr	r5, [pc, #24]	; (800a12c <_fstat_r+0x20>)
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	4611      	mov	r1, r2
 800a118:	602b      	str	r3, [r5, #0]
 800a11a:	f7f7 fdf0 	bl	8001cfe <_fstat>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d102      	bne.n	800a128 <_fstat_r+0x1c>
 800a122:	682b      	ldr	r3, [r5, #0]
 800a124:	b103      	cbz	r3, 800a128 <_fstat_r+0x1c>
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	bd38      	pop	{r3, r4, r5, pc}
 800a12a:	bf00      	nop
 800a12c:	20000778 	.word	0x20000778

0800a130 <_isatty_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d05      	ldr	r5, [pc, #20]	; (800a14c <_isatty_r+0x1c>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f7 fdee 	bl	8001d1c <_isatty>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_isatty_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_isatty_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	20000778 	.word	0x20000778

0800a150 <_lseek_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	2200      	movs	r2, #0
 800a15a:	4d05      	ldr	r5, [pc, #20]	; (800a170 <_lseek_r+0x20>)
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f7f7 fde6 	bl	8001d30 <_lseek>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_lseek_r+0x1e>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_lseek_r+0x1e>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20000778 	.word	0x20000778

0800a174 <_read_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	2200      	movs	r2, #0
 800a17e:	4d05      	ldr	r5, [pc, #20]	; (800a194 <_read_r+0x20>)
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f7 fd77 	bl	8001c76 <_read>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_read_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_read_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20000778 	.word	0x20000778

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr
