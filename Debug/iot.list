
iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008458  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008568  08008568  00018568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008984  08008984  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008984  08008984  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008984  08008984  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800898c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200001e8  08008b74  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08008b74  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e911  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002363  00000000  00000000  0002eb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00030e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f35  00000000  00000000  00032e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001169d  00000000  00000000  0004bd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e35f  00000000  00000000  0005d40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056a4  00000000  00000000  000eb7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008550 	.word	0x08008550

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008550 	.word	0x08008550

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <HAL_UART_RxCpltCallback+0x5c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d120      	bne.n	8000c68 <HAL_UART_RxCpltCallback+0x54>
		//HAL_UART_Transmit(&huart1, &buffer_byte, 1, 500);
		buffer[index_buffer] = buffer_byte;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_UART_RxCpltCallback+0x60>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_UART_RxCpltCallback+0x64>)
 8000c2e:	7819      	ldrb	r1, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c32:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_UART_RxCpltCallback+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_UART_RxCpltCallback+0x60>)
 8000c3e:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE){
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_UART_RxCpltCallback+0x60>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b0a      	cmp	r3, #10
 8000c46:	d104      	bne.n	8000c52 <HAL_UART_RxCpltCallback+0x3e>
			index_buffer = 0;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_UART_RxCpltCallback+0x60>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
			resetBuf();
 8000c4e:	f000 fe2f 	bl	80018b0 <resetBuf>
		}
		buffer_flag++;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c5c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &buffer_byte, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4905      	ldr	r1, [pc, #20]	; (8000c78 <HAL_UART_RxCpltCallback+0x64>)
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c64:	f004 f90f 	bl	8004e86 <HAL_UART_Receive_IT>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	2000065e 	.word	0x2000065e
 8000c78:	20000660 	.word	0x20000660
 8000c7c:	20000654 	.word	0x20000654
 8000c80:	2000065f 	.word	0x2000065f
 8000c84:	20000610 	.word	0x20000610

08000c88 <ledToggle>:

void ledToggle(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4802      	ldr	r0, [pc, #8]	; (8000c98 <ledToggle+0x10>)
 8000c90:	f001 faf2 	bl	8002278 <HAL_GPIO_TogglePin>
};
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010800 	.word	0x40010800

08000c9c <fsmWrapper>:

void fsmWrapper(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	if(buffer_flag > 0){
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <fsmWrapper+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d007      	beq.n	8000cb8 <fsmWrapper+0x1c>
		command_parser_fsm();
 8000ca8:	f000 fe1c 	bl	80018e4 <command_parser_fsm>
		buffer_flag--;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <fsmWrapper+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <fsmWrapper+0x20>)
 8000cb6:	701a      	strb	r2, [r3, #0]
	}
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000065f 	.word	0x2000065f

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 ff10 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* Configure system clock */
  SystemClock_Config();
 8000cc8:	f000 f838 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 f940 	bl	8000f50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cd0:	f000 f870 	bl	8000db4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000cd4:	f000 f89c 	bl	8000e10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 f910 	bl	8000efc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000cdc:	f000 f8e4 	bl	8000ea8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &buffer_byte, 1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	490f      	ldr	r1, [pc, #60]	; (8000d20 <main+0x60>)
 8000ce4:	480f      	ldr	r0, [pc, #60]	; (8000d24 <main+0x64>)
 8000ce6:	f004 f8ce 	bl	8004e86 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <main+0x68>)
 8000cec:	f003 fc42 	bl	8004574 <HAL_TIM_Base_Start_IT>
  //Add task to scheduler
  SCH_Add_Task(ledToggle, 0, 100);
 8000cf0:	2264      	movs	r2, #100	; 0x64
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <main+0x6c>)
 8000cf6:	f000 f9d9 	bl	80010ac <SCH_Add_Task>
  SCH_Add_Task(fsmWrapper, 0, 1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <main+0x70>)
 8000d00:	f000 f9d4 	bl	80010ac <SCH_Add_Task>
  SCH_Add_Task(uart_communiation_fsm, 0, 200);
 8000d04:	22c8      	movs	r2, #200	; 0xc8
 8000d06:	2100      	movs	r1, #0
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <main+0x74>)
 8000d0a:	f000 f9cf 	bl	80010ac <SCH_Add_Task>
  SCH_Add_Task(pullSensor,0,53);
 8000d0e:	2235      	movs	r2, #53	; 0x35
 8000d10:	2100      	movs	r1, #0
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <main+0x78>)
 8000d14:	f000 f9ca 	bl	80010ac <SCH_Add_Task>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000d18:	f000 fab8 	bl	800128c <SCH_Dispatch_Tasks>
 8000d1c:	e7fc      	b.n	8000d18 <main+0x58>
 8000d1e:	bf00      	nop
 8000d20:	20000660 	.word	0x20000660
 8000d24:	20000610 	.word	0x20000610
 8000d28:	20000258 	.word	0x20000258
 8000d2c:	08000c89 	.word	0x08000c89
 8000d30:	08000c9d 	.word	0x08000c9d
 8000d34:	080019f1 	.word	0x080019f1
 8000d38:	08001361 	.word	0x08001361

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fd1e 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d66:	2310      	movs	r3, #16
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 ff94 	bl	8003ca0 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f92f 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fa02 	bl	80041a4 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000da6:	f000 f91b 	bl	8000fe0 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	; 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MX_I2C1_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_I2C1_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000df2:	f001 fa5b 	bl	80022ac <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f8f0 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000204 	.word	0x20000204
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e44:	2209      	movs	r2, #9
 8000e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e56:	f003 fb3d 	bl	80044d4 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e60:	f000 f8be 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e72:	f003 fcd9 	bl	8004828 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e7c:	f000 f8b0 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e8e:	f003 feab 	bl	8004be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e98:	f000 f8a2 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000258 	.word	0x20000258

08000ea8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART1_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f003 fef2 	bl	8004cc8 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f879 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000610 	.word	0x20000610
 8000ef8:	40013800 	.word	0x40013800

08000efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_USART2_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f003 fec8 	bl	8004cc8 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f000 f84f 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002a0 	.word	0x200002a0
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0x74>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <MX_GPIO_Init+0x74>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_GPIO_Init+0x74>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_GPIO_Init+0x74>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <MX_GPIO_Init+0x74>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_GPIO_Init+0x74>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2120      	movs	r1, #32
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <MX_GPIO_Init+0x78>)
 8000f9a:	f001 f955 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f9e:	2320      	movs	r3, #32
 8000fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_GPIO_Init+0x78>)
 8000fb6:	f000 ffc3 	bl	8001f40 <HAL_GPIO_Init>

}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010800 	.word	0x40010800

08000fcc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000fd4:	f000 f98c 	bl	80012f0 <SCH_Update>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>

08000fea <emptyTask>:

unsigned int SCH_Report(){
	return Error_code_G;
}

sTasks emptyTask(){
 8000fea:	b4b0      	push	{r4, r5, r7}
 8000fec:	b089      	sub	sp, #36	; 0x24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	sTasks empty;
	empty.Delay = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
	empty.Period = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
	empty.RunMe = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
	empty.TaskID = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
	empty.pTask = 0x0000;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
	return empty;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	461d      	mov	r5, r3
 800100a:	f107 040c 	add.w	r4, r7, #12
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	602b      	str	r3, [r5, #0]
}
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	bcb0      	pop	{r4, r5, r7}
 800101e:	4770      	bx	lr

08001020 <SCH_shift>:

void SCH_shift(uint8_t pos){
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = current_index_task-1; i > pos; i--){
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <SCH_shift+0x84>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001034:	e01b      	b.n	800106e <SCH_shift+0x4e>
		SCH_tasks_G[i] = SCH_tasks_G[i-1];
 8001036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001040:	4819      	ldr	r0, [pc, #100]	; (80010a8 <SCH_shift+0x88>)
 8001042:	460b      	mov	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4418      	add	r0, r3
 800104c:	4916      	ldr	r1, [pc, #88]	; (80010a8 <SCH_shift+0x88>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	4604      	mov	r4, r0
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	6023      	str	r3, [r4, #0]
	for(uint8_t i = current_index_task-1; i > pos; i--){
 8001064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001068:	3b01      	subs	r3, #1
 800106a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800106e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8de      	bhi.n	8001036 <SCH_shift+0x16>
	}
	SCH_tasks_G[pos] = emptyTask();
 8001078:	7ffa      	ldrb	r2, [r7, #31]
 800107a:	490b      	ldr	r1, [pc, #44]	; (80010a8 <SCH_shift+0x88>)
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	18cc      	adds	r4, r1, r3
 8001086:	463b      	mov	r3, r7
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffae 	bl	8000fea <emptyTask>
 800108e:	4625      	mov	r5, r4
 8001090:	463c      	mov	r4, r7
 8001092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	602b      	str	r3, [r5, #0]
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000608 	.word	0x20000608
 80010a8:	200002e8 	.word	0x200002e8

080010ac <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	sTasks task;
	uint8_t insert_idx = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(current_index_task < SCH_MAX_TASKS){
 80010be:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <SCH_Add_Task+0x128>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b27      	cmp	r3, #39	; 0x27
 80010c4:	f200 8081 	bhi.w	80011ca <SCH_Add_Task+0x11e>
		task.pTask = pFunction;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	613b      	str	r3, [r7, #16]
		task.Delay = DELAY;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	617b      	str	r3, [r7, #20]
		task.Period =  PERIOD;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
		task.RunMe = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
		task.TaskID = current_index_task;
 80010d8:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <SCH_Add_Task+0x128>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	623b      	str	r3, [r7, #32]
		if(current_index_task == 0){
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <SCH_Add_Task+0x128>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d121      	bne.n	800112a <SCH_Add_Task+0x7e>
			SCH_tasks_G[0] = task;
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <SCH_Add_Task+0x12c>)
 80010e8:	461d      	mov	r5, r3
 80010ea:	f107 0410 	add.w	r4, r7, #16
 80010ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	602b      	str	r3, [r5, #0]
			current_index_task++;
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <SCH_Add_Task+0x128>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <SCH_Add_Task+0x128>)
 8001100:	701a      	strb	r2, [r3, #0]
			return 0;
 8001102:	2300      	movs	r3, #0
 8001104:	e062      	b.n	80011cc <SCH_Add_Task+0x120>
		}
		while(task.Delay > SCH_tasks_G[insert_idx].Delay && insert_idx < current_index_task){
			task.Delay -= SCH_tasks_G[insert_idx].Delay;
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800110c:	4832      	ldr	r0, [pc, #200]	; (80011d8 <SCH_Add_Task+0x12c>)
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4403      	add	r3, r0
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1acb      	subs	r3, r1, r3
 800111e:	617b      	str	r3, [r7, #20]
			insert_idx++;
 8001120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001124:	3301      	adds	r3, #1
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(task.Delay > SCH_tasks_G[insert_idx].Delay && insert_idx < current_index_task){
 800112a:	6979      	ldr	r1, [r7, #20]
 800112c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001130:	4829      	ldr	r0, [pc, #164]	; (80011d8 <SCH_Add_Task+0x12c>)
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4403      	add	r3, r0
 800113c:	3304      	adds	r3, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4299      	cmp	r1, r3
 8001142:	d905      	bls.n	8001150 <SCH_Add_Task+0xa4>
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <SCH_Add_Task+0x128>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800114c:	429a      	cmp	r2, r3
 800114e:	d3da      	bcc.n	8001106 <SCH_Add_Task+0x5a>
		}
		current_index_task++;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <SCH_Add_Task+0x128>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SCH_Add_Task+0x128>)
 800115a:	701a      	strb	r2, [r3, #0]
		SCH_shift(insert_idx);
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <SCH_shift>
		SCH_tasks_G[insert_idx] = task;
 8001166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800116a:	491b      	ldr	r1, [pc, #108]	; (80011d8 <SCH_Add_Task+0x12c>)
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	461d      	mov	r5, r3
 8001178:	f107 0410 	add.w	r4, r7, #16
 800117c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	602b      	str	r3, [r5, #0]
		SCH_tasks_G[insert_idx+1].Delay -=  SCH_tasks_G[insert_idx].Delay;
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	4913      	ldr	r1, [pc, #76]	; (80011d8 <SCH_Add_Task+0x12c>)
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3304      	adds	r3, #4
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <SCH_Add_Task+0x12c>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4403      	add	r3, r0
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011b2:	3201      	adds	r2, #1
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <SCH_Add_Task+0x12c>)
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4403      	add	r3, r0
 80011c2:	3304      	adds	r3, #4
 80011c4:	6019      	str	r1, [r3, #0]
		return task.TaskID;
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	e000      	b.n	80011cc <SCH_Add_Task+0x120>
	}
	return 0;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdb0      	pop	{r4, r5, r7, pc}
 80011d4:	20000608 	.word	0x20000608
 80011d8:	200002e8 	.word	0x200002e8

080011dc <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	61f8      	str	r0, [r7, #28]
	if(SCH_tasks_G[taskID].pTask == 0x0000){
 80011e4:	4926      	ldr	r1, [pc, #152]	; (8001280 <SCH_Delete_Task+0xa4>)
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <SCH_Delete_Task+0x22>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <SCH_Delete_Task+0xa8>)
 80011fa:	2209      	movs	r2, #9
 80011fc:	601a      	str	r2, [r3, #0]
	}

	for(unsigned int idx=taskID; idx<current_index_task-1; idx++){
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	e017      	b.n	8001234 <SCH_Delete_Task+0x58>
		SCH_tasks_G[idx] = SCH_tasks_G[idx+1];
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <SCH_Delete_Task+0xa4>)
 800120a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800120c:	460b      	mov	r3, r1
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4418      	add	r0, r3
 8001216:	491a      	ldr	r1, [pc, #104]	; (8001280 <SCH_Delete_Task+0xa4>)
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	4604      	mov	r4, r0
 8001224:	461d      	mov	r5, r3
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	6023      	str	r3, [r4, #0]
	for(unsigned int idx=taskID; idx<current_index_task-1; idx++){
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	3301      	adds	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <SCH_Delete_Task+0xac>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	461a      	mov	r2, r3
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	4293      	cmp	r3, r2
 8001240:	d3e0      	bcc.n	8001204 <SCH_Delete_Task+0x28>
	}
	SCH_tasks_G[current_index_task-1] = emptyTask();
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <SCH_Delete_Task+0xac>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	490d      	ldr	r1, [pc, #52]	; (8001280 <SCH_Delete_Task+0xa4>)
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	18cc      	adds	r4, r1, r3
 8001254:	463b      	mov	r3, r7
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fec7 	bl	8000fea <emptyTask>
 800125c:	4625      	mov	r5, r4
 800125e:	463c      	mov	r4, r7
 8001260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	602b      	str	r3, [r5, #0]
	current_index_task--;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <SCH_Delete_Task+0xac>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SCH_Delete_Task+0xac>)
 8001272:	701a      	strb	r2, [r3, #0]
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bdb0      	pop	{r4, r5, r7, pc}
 800127e:	bf00      	nop
 8001280:	200002e8 	.word	0x200002e8
 8001284:	200002e4 	.word	0x200002e4
 8001288:	20000608 	.word	0x20000608

0800128c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	while(SCH_tasks_G[0].pTask!=0x0000){
 8001290:	e024      	b.n	80012dc <SCH_Dispatch_Tasks+0x50>
		if(SCH_tasks_G[0].RunMe > 0){
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d020      	beq.n	80012dc <SCH_Dispatch_Tasks+0x50>
			(*SCH_tasks_G[0].pTask)();
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4798      	blx	r3
			SCH_tasks_G[0].RunMe--;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a11      	ldr	r2, [pc, #68]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012a8:	60d3      	str	r3, [r2, #12]
			if(SCH_tasks_G[1].Delay==0) SCH_tasks_G[1].RunMe++;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d104      	bne.n	80012bc <SCH_Dispatch_Tasks+0x30>
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012ba:	6213      	str	r3, [r2, #32]
			if(SCH_tasks_G[0].Period>0) SCH_Add_Task(SCH_tasks_G[0].pTask,
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <SCH_Dispatch_Tasks+0x4a>
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012ca:	6891      	ldr	r1, [r2, #8]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012ce:	6892      	ldr	r2, [r2, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff feeb 	bl	80010ac <SCH_Add_Task>
										             SCH_tasks_G[0].Period,
													 SCH_tasks_G[0].Period);
			SCH_Delete_Task(0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ff80 	bl	80011dc <SCH_Delete_Task>
	while(SCH_tasks_G[0].pTask!=0x0000){
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <SCH_Dispatch_Tasks+0x60>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1d6      	bne.n	8001292 <SCH_Dispatch_Tasks+0x6>
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002e8 	.word	0x200002e8

080012f0 <SCH_Update>:

void SCH_Update(void){
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay > 0){
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <SCH_Update+0x40>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00b      	beq.n	8001314 <SCH_Update+0x24>
		SCH_tasks_G[0].Delay--;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <SCH_Update+0x40>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	3b01      	subs	r3, #1
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <SCH_Update+0x40>)
 8001304:	6053      	str	r3, [r2, #4]
		passed_time_since_last_task++;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <SCH_Update+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <SCH_Update+0x44>)
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e009      	b.n	8001328 <SCH_Update+0x38>
	}
	else if(SCH_tasks_G[0].Delay==0){
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SCH_Update+0x40>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <SCH_Update+0x38>
		SCH_tasks_G[0].RunMe++;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SCH_Update+0x40>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	3301      	adds	r3, #1
 8001322:	4a03      	ldr	r2, [pc, #12]	; (8001330 <SCH_Update+0x40>)
 8001324:	60d3      	str	r3, [r2, #12]
		return;
 8001326:	bf00      	nop
	}
}
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200002e8 	.word	0x200002e8
 8001334:	20000609 	.word	0x20000609

08001338 <getTemp>:
#include "sensor.h"

float temp = 20.5;
float humid = 50.5;

float getTemp(){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	return temp;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <getTemp+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000000 	.word	0x20000000

0800134c <getHumid>:
float getHumid(){
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	return humid;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <getHumid+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000004 	.word	0x20000004

08001360 <pullSensor>:

void pullSensor(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	temp += 1.1;
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <pullSensor+0x98>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f85d 	bl	8000428 <__aeabi_f2d>
 800136e:	a31e      	add	r3, pc, #120	; (adr r3, 80013e8 <pullSensor+0x88>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7fe fefa 	bl	800016c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fb82 	bl	8000a88 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <pullSensor+0x98>)
 8001388:	6013      	str	r3, [r2, #0]
	if(temp > 33){
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <pullSensor+0x98>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	491b      	ldr	r1, [pc, #108]	; (80013fc <pullSensor+0x9c>)
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fc35 	bl	8000c00 <__aeabi_fcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <pullSensor+0x42>
		temp = 20.5;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <pullSensor+0x98>)
 800139e:	4a18      	ldr	r2, [pc, #96]	; (8001400 <pullSensor+0xa0>)
 80013a0:	601a      	str	r2, [r3, #0]
	}
	humid += 20.1;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <pullSensor+0xa4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f83e 	bl	8000428 <__aeabi_f2d>
 80013ac:	a310      	add	r3, pc, #64	; (adr r3, 80013f0 <pullSensor+0x90>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7fe fedb 	bl	800016c <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fb63 	bl	8000a88 <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <pullSensor+0xa4>)
 80013c6:	6013      	str	r3, [r2, #0]
	if(humid > 85){
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <pullSensor+0xa4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <pullSensor+0xa8>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc16 	bl	8000c00 <__aeabi_fcmpgt>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <pullSensor+0x7c>
		humid = 50.5;
	}
}
 80013da:	e002      	b.n	80013e2 <pullSensor+0x82>
		humid = 50.5;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <pullSensor+0xa4>)
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <pullSensor+0xac>)
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	9999999a 	.word	0x9999999a
 80013ec:	3ff19999 	.word	0x3ff19999
 80013f0:	9999999a 	.word	0x9999999a
 80013f4:	40341999 	.word	0x40341999
 80013f8:	20000000 	.word	0x20000000
 80013fc:	42040000 	.word	0x42040000
 8001400:	41a40000 	.word	0x41a40000
 8001404:	20000004 	.word	0x20000004
 8001408:	42aa0000 	.word	0x42aa0000
 800140c:	424a0000 	.word	0x424a0000

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_MspInit+0x40>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_MspInit+0x40>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_MspInit+0x40>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_MspInit+0x40>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_MspInit+0x40>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_MspInit+0x40>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_I2C_MspInit+0x80>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d12b      	bne.n	80014cc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148c:	23c0      	movs	r3, #192	; 0xc0
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <HAL_I2C_MspInit+0x88>)
 80014a0:	f000 fd4e 	bl	8001f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 80014aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ae:	61d3      	str	r3, [r2, #28]
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	201f      	movs	r0, #31
 80014c2:	f000 fc4a 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014c6:	201f      	movs	r0, #31
 80014c8:	f000 fc63 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d113      	bne.n	800151a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x44>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	201c      	movs	r0, #28
 8001510:	f000 fc23 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001514:	201c      	movs	r0, #28
 8001516:	f000 fc3c 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a3f      	ldr	r2, [pc, #252]	; (8001640 <HAL_UART_MspInit+0x118>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13a      	bne.n	80015be <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_UART_MspInit+0x11c>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <HAL_UART_MspInit+0x11c>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_UART_MspInit+0x11c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b38      	ldr	r3, [pc, #224]	; (8001644 <HAL_UART_MspInit+0x11c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a37      	ldr	r2, [pc, #220]	; (8001644 <HAL_UART_MspInit+0x11c>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_UART_MspInit+0x11c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4619      	mov	r1, r3
 800158c:	482e      	ldr	r0, [pc, #184]	; (8001648 <HAL_UART_MspInit+0x120>)
 800158e:	f000 fcd7 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4828      	ldr	r0, [pc, #160]	; (8001648 <HAL_UART_MspInit+0x120>)
 80015a8:	f000 fcca 	bl	8001f40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2025      	movs	r0, #37	; 0x25
 80015b2:	f000 fbd2 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015b6:	2025      	movs	r0, #37	; 0x25
 80015b8:	f000 fbeb 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015bc:	e03c      	b.n	8001638 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_UART_MspInit+0x124>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d137      	bne.n	8001638 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_UART_MspInit+0x11c>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_UART_MspInit+0x11c>)
 80015ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d2:	61d3      	str	r3, [r2, #28]
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_UART_MspInit+0x11c>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x11c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x11c>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x11c>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f8:	2304      	movs	r3, #4
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4619      	mov	r1, r3
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_UART_MspInit+0x120>)
 800160c:	f000 fc98 	bl	8001f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001610:	2308      	movs	r3, #8
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4619      	mov	r1, r3
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <HAL_UART_MspInit+0x120>)
 8001624:	f000 fc8c 	bl	8001f40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2026      	movs	r0, #38	; 0x26
 800162e:	f000 fb94 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001632:	2026      	movs	r0, #38	; 0x26
 8001634:	f000 fbad 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40013800 	.word	0x40013800
 8001644:	40021000 	.word	0x40021000
 8001648:	40010800 	.word	0x40010800
 800164c:	40004400 	.word	0x40004400

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001696:	f000 fa6d 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM2_IRQHandler+0x10>)
 80016a6:	f002 ffb7 	bl	8004618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000258 	.word	0x20000258

080016b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <I2C1_EV_IRQHandler+0x10>)
 80016ba:	f000 ff3b 	bl	8002534 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000204 	.word	0x20000204

080016c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <USART1_IRQHandler+0x10>)
 80016ce:	f003 fc0b 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000610 	.word	0x20000610

080016dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USART2_IRQHandler+0x10>)
 80016e2:	f003 fc01 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002a0 	.word	0x200002a0

080016f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <_kill>:

int _kill(int pid, int sig)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001708:	f004 f816 	bl	8005738 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	2216      	movs	r2, #22
 8001710:	601a      	str	r2, [r3, #0]
  return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_exit>:

void _exit (int status)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001726:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffe7 	bl	80016fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001730:	e7fe      	b.n	8001730 <_exit+0x12>

08001732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001744:	f3af 8000 	nop.w
 8001748:	4601      	mov	r1, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbf0      	blt.n	8001744 <_read+0x12>
  }

  return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e009      	b.n	8001792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	dbf1      	blt.n	800177e <_write+0x12>
  }
  return len;
 800179a:	687b      	ldr	r3, [r7, #4]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_close>:

int _close(int file)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
  return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <_isatty>:

int _isatty(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f003 ff80 	bl	8005738 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005000 	.word	0x20005000
 8001864:	00000400 	.word	0x00000400
 8001868:	2000060c 	.word	0x2000060c
 800186c:	20000698 	.word	0x20000698

08001870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <resetCmdBuf>:
uint8_t action_flag = STOP_SEND;

int idx = 0;
int whatToSend = SEND_TEMP;

void resetCmdBuf(){
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	e007      	b.n	8001898 <resetCmdBuf+0x1c>
		cmd_buffer[i] = 0;
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <resetCmdBuf+0x30>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b09      	cmp	r3, #9
 800189c:	ddf4      	ble.n	8001888 <resetCmdBuf+0xc>
	}
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000670 	.word	0x20000670

080018b0 <resetBuf>:

void resetBuf(){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	e007      	b.n	80018cc <resetBuf+0x1c>
		buffer[i] = 0;
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <resetBuf+0x30>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3301      	adds	r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	ddf4      	ble.n	80018bc <resetBuf+0xc>
	}
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000654 	.word	0x20000654

080018e4 <command_parser_fsm>:

void command_parser_fsm(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
//We collect all char sent to process at once
//Remember to flush buffer using the resetBuf and resetCmdBuf(), or else your buffer
//Will be dirty
	switch(cmd_flag){
 80018e8:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <command_parser_fsm+0xec>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <command_parser_fsm+0x12>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d00f      	beq.n	8001914 <command_parser_fsm+0x30>
				resetCmdBuf();
				uart_communiation_fsm();
			}
			break;
		default:
			break;
 80018f4:	e06a      	b.n	80019cc <command_parser_fsm+0xe8>
			if (buffer[idx] == '!') {
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <command_parser_fsm+0xf0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <command_parser_fsm+0xf4>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	2b21      	cmp	r3, #33	; 0x21
 8001900:	d161      	bne.n	80019c6 <command_parser_fsm+0xe2>
				idx++;
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <command_parser_fsm+0xf0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <command_parser_fsm+0xf0>)
 800190a:	6013      	str	r3, [r2, #0]
				cmd_flag = READING;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <command_parser_fsm+0xec>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
			break;
 8001912:	e058      	b.n	80019c6 <command_parser_fsm+0xe2>
			if (buffer[idx] != '!' && buffer[idx] != '#'){
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <command_parser_fsm+0xf0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <command_parser_fsm+0xf4>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	2b21      	cmp	r3, #33	; 0x21
 800191e:	d01a      	beq.n	8001956 <command_parser_fsm+0x72>
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <command_parser_fsm+0xf0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <command_parser_fsm+0xf4>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	2b23      	cmp	r3, #35	; 0x23
 800192a:	d014      	beq.n	8001956 <command_parser_fsm+0x72>
				cmd_buffer[cmd_index] = buffer[idx];
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <command_parser_fsm+0xf0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <command_parser_fsm+0xf8>)
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <command_parser_fsm+0xf4>)
 8001938:	5cd2      	ldrb	r2, [r2, r3]
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <command_parser_fsm+0xfc>)
 800193c:	545a      	strb	r2, [r3, r1]
				cmd_index++;
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <command_parser_fsm+0xf8>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <command_parser_fsm+0xf8>)
 8001948:	701a      	strb	r2, [r3, #0]
				idx++;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <command_parser_fsm+0xf0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <command_parser_fsm+0xf0>)
 8001952:	6013      	str	r3, [r2, #0]
			break;
 8001954:	e039      	b.n	80019ca <command_parser_fsm+0xe6>
			else if (buffer[idx] == '!'){
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <command_parser_fsm+0xf0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <command_parser_fsm+0xf4>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	2b21      	cmp	r3, #33	; 0x21
 8001960:	d106      	bne.n	8001970 <command_parser_fsm+0x8c>
				cmd_flag = INIT_UART;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <command_parser_fsm+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
				idx = 0;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <command_parser_fsm+0xf0>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
			break;
 800196e:	e02c      	b.n	80019ca <command_parser_fsm+0xe6>
			else if (buffer[idx] == '#'){
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <command_parser_fsm+0xf0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <command_parser_fsm+0xf4>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	2b23      	cmp	r3, #35	; 0x23
 800197a:	d126      	bne.n	80019ca <command_parser_fsm+0xe6>
				cmd_flag = INIT_UART;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <command_parser_fsm+0xec>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
				if (cmd_buffer[0] == 'R') action_flag = SEND;
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <command_parser_fsm+0xfc>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b52      	cmp	r3, #82	; 0x52
 8001988:	d103      	bne.n	8001992 <command_parser_fsm+0xae>
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <command_parser_fsm+0x100>)
 800198c:	2203      	movs	r2, #3
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e006      	b.n	80019a0 <command_parser_fsm+0xbc>
				else if (cmd_buffer[0] == 'O') action_flag = STOP_SEND;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <command_parser_fsm+0xfc>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b4f      	cmp	r3, #79	; 0x4f
 8001998:	d102      	bne.n	80019a0 <command_parser_fsm+0xbc>
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <command_parser_fsm+0x100>)
 800199c:	2204      	movs	r2, #4
 800199e:	701a      	strb	r2, [r3, #0]
				index_buffer = 0;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <command_parser_fsm+0x104>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <command_parser_fsm+0xf8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
				idx = 0;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <command_parser_fsm+0xf0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
				whatToSend=SEND_TEMP;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <command_parser_fsm+0x108>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
				resetBuf();
 80019b8:	f7ff ff7a 	bl	80018b0 <resetBuf>
				resetCmdBuf();
 80019bc:	f7ff ff5e 	bl	800187c <resetCmdBuf>
				uart_communiation_fsm();
 80019c0:	f000 f816 	bl	80019f0 <uart_communiation_fsm>
			break;
 80019c4:	e001      	b.n	80019ca <command_parser_fsm+0xe6>
			break;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <command_parser_fsm+0xe8>
			break;
 80019ca:	bf00      	nop
	}
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000067b 	.word	0x2000067b
 80019d4:	2000067c 	.word	0x2000067c
 80019d8:	20000654 	.word	0x20000654
 80019dc:	2000067a 	.word	0x2000067a
 80019e0:	20000670 	.word	0x20000670
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	2000065e 	.word	0x2000065e
 80019ec:	20000680 	.word	0x20000680

080019f0 <uart_communiation_fsm>:

void uart_communiation_fsm(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	if(action_flag==SEND){
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <uart_communiation_fsm+0x94>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d13f      	bne.n	8001a7c <uart_communiation_fsm+0x8c>
		if(whatToSend == SEND_TEMP){
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <uart_communiation_fsm+0x98>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d11d      	bne.n	8001a40 <uart_communiation_fsm+0x50>
			HAL_UART_Transmit(&huart1, &(str[0]), sprintf( &(str[0]), "!1:T:%.2f#\n", getTemp()), 100);
 8001a04:	f7ff fc98 	bl	8001338 <getTemp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd0c 	bl	8000428 <__aeabi_f2d>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	491d      	ldr	r1, [pc, #116]	; (8001a8c <uart_communiation_fsm+0x9c>)
 8001a16:	481e      	ldr	r0, [pc, #120]	; (8001a90 <uart_communiation_fsm+0xa0>)
 8001a18:	f004 fb20 	bl	800605c <siprintf>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <uart_communiation_fsm+0xa0>)
 8001a24:	481b      	ldr	r0, [pc, #108]	; (8001a94 <uart_communiation_fsm+0xa4>)
 8001a26:	f003 f99c 	bl	8004d62 <HAL_UART_Transmit>
			whatToSend = (whatToSend + 1)%2;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <uart_communiation_fsm+0x98>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	bfb8      	it	lt
 8001a38:	425b      	neglt	r3, r3
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <uart_communiation_fsm+0x98>)
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e020      	b.n	8001a82 <uart_communiation_fsm+0x92>
		}
		else{
			HAL_UART_Transmit(&huart1, &(str[0]), sprintf( &(str[0]), "!1:H:%.2f#\n", getHumid()), 100);
 8001a40:	f7ff fc84 	bl	800134c <getHumid>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fcee 	bl	8000428 <__aeabi_f2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4911      	ldr	r1, [pc, #68]	; (8001a98 <uart_communiation_fsm+0xa8>)
 8001a52:	480f      	ldr	r0, [pc, #60]	; (8001a90 <uart_communiation_fsm+0xa0>)
 8001a54:	f004 fb02 	bl	800605c <siprintf>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	2364      	movs	r3, #100	; 0x64
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <uart_communiation_fsm+0xa0>)
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <uart_communiation_fsm+0xa4>)
 8001a62:	f003 f97e 	bl	8004d62 <HAL_UART_Transmit>
			whatToSend = (whatToSend + 1)%2;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <uart_communiation_fsm+0x98>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	bfb8      	it	lt
 8001a74:	425b      	neglt	r3, r3
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <uart_communiation_fsm+0x98>)
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e002      	b.n	8001a82 <uart_communiation_fsm+0x92>
		}
	}
	else if(action_flag==STOP_SEND){
 8001a7c:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <uart_communiation_fsm+0x94>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b04      	cmp	r3, #4
		return;
	}
}
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	20000680 	.word	0x20000680
 8001a8c:	08008568 	.word	0x08008568
 8001a90:	20000664 	.word	0x20000664
 8001a94:	20000610 	.word	0x20000610
 8001a98:	08008574 	.word	0x08008574

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac2:	f7ff fed5 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f003 fe3d 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff f8f9 	bl	8000cc0 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ad8:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8001adc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ae0:	20000698 	.word	0x20000698

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f923 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fc84 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f93b 	bl	8001dae <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b50:	f000 f903 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	20000010 	.word	0x20000010

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000014 	.word	0x20000014
 8001b94:	20000684 	.word	0x20000684

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000684 	.word	0x20000684

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d24:	f7ff ff90 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff2d 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff42 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff35 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d008      	beq.n	8001dee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e020      	b.n	8001e30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 020e 	bic.w	r2, r2, #14
 8001dfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d005      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e051      	b.n	8001f02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 020e 	bic.w	r2, r2, #14
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_DMA_Abort_IT+0xd0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d029      	beq.n	8001edc <HAL_DMA_Abort_IT+0xa0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_DMA_Abort_IT+0xd4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d022      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x9c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_DMA_Abort_IT+0xd8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01a      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x96>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_DMA_Abort_IT+0xdc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d012      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x90>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_DMA_Abort_IT+0xe0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x8a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_DMA_Abort_IT+0xe4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d102      	bne.n	8001ec0 <HAL_DMA_Abort_IT+0x84>
 8001eba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ebe:	e00e      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec4:	e00b      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eca:	e008      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	e005      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed6:	e002      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001ed8:	2310      	movs	r3, #16
 8001eda:	e000      	b.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_DMA_Abort_IT+0xe8>)
 8001ee0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
    } 
  }
  return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40020008 	.word	0x40020008
 8001f10:	4002001c 	.word	0x4002001c
 8001f14:	40020030 	.word	0x40020030
 8001f18:	40020044 	.word	0x40020044
 8001f1c:	40020058 	.word	0x40020058
 8001f20:	4002006c 	.word	0x4002006c
 8001f24:	40020000 	.word	0x40020000

08001f28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b08b      	sub	sp, #44	; 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e169      	b.n	8002228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f54:	2201      	movs	r2, #1
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8158 	bne.w	8002222 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a9a      	ldr	r2, [pc, #616]	; (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d05e      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a98      	ldr	r2, [pc, #608]	; (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d875      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f82:	4a98      	ldr	r2, [pc, #608]	; (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d058      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f88:	4a96      	ldr	r2, [pc, #600]	; (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d86f      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f8e:	4a96      	ldr	r2, [pc, #600]	; (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d052      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f94:	4a94      	ldr	r2, [pc, #592]	; (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d869      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f9a:	4a94      	ldr	r2, [pc, #592]	; (80021ec <HAL_GPIO_Init+0x2ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04c      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fa0:	4a92      	ldr	r2, [pc, #584]	; (80021ec <HAL_GPIO_Init+0x2ac>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d863      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fa6:	4a92      	ldr	r2, [pc, #584]	; (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d046      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fac:	4a90      	ldr	r2, [pc, #576]	; (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d85d      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d82a      	bhi.n	800200c <HAL_GPIO_Init+0xcc>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d859      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <HAL_GPIO_Init+0x80>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	08002015 	.word	0x08002015
 8001fc8:	08002027 	.word	0x08002027
 8001fcc:	08002069 	.word	0x08002069
 8001fd0:	0800206f 	.word	0x0800206f
 8001fd4:	0800206f 	.word	0x0800206f
 8001fd8:	0800206f 	.word	0x0800206f
 8001fdc:	0800206f 	.word	0x0800206f
 8001fe0:	0800206f 	.word	0x0800206f
 8001fe4:	0800206f 	.word	0x0800206f
 8001fe8:	0800206f 	.word	0x0800206f
 8001fec:	0800206f 	.word	0x0800206f
 8001ff0:	0800206f 	.word	0x0800206f
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	0800206f 	.word	0x0800206f
 8002000:	0800206f 	.word	0x0800206f
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002031 	.word	0x08002031
 800200c:	4a79      	ldr	r2, [pc, #484]	; (80021f4 <HAL_GPIO_Init+0x2b4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e029      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e024      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01f      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e01a      	b.n	8002070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e013      	b.n	8002070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e009      	b.n	8002070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e003      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x130>
          break;
 800206e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2bff      	cmp	r3, #255	; 0xff
 8002074:	d801      	bhi.n	800207a <HAL_GPIO_Init+0x13a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	e001      	b.n	800207e <HAL_GPIO_Init+0x13e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d802      	bhi.n	800208c <HAL_GPIO_Init+0x14c>
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x152>
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3b08      	subs	r3, #8
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	210f      	movs	r1, #15
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80b1 	beq.w	8002222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c0:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d8:	4a48      	ldr	r2, [pc, #288]	; (80021fc <HAL_GPIO_Init+0x2bc>)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <HAL_GPIO_Init+0x2c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1ec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <HAL_GPIO_Init+0x2c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1e8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3e      	ldr	r2, [pc, #248]	; (8002208 <HAL_GPIO_Init+0x2c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1e4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <HAL_GPIO_Init+0x2cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1e0>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002120:	2304      	movs	r3, #4
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 800212c:	2300      	movs	r3, #0
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213e:	492f      	ldr	r1, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x2bc>)
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	492c      	ldr	r1, [pc, #176]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	4928      	ldr	r1, [pc, #160]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4922      	ldr	r1, [pc, #136]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	491e      	ldr	r1, [pc, #120]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4918      	ldr	r1, [pc, #96]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4914      	ldr	r1, [pc, #80]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d021      	beq.n	8002214 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	490e      	ldr	r1, [pc, #56]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e021      	b.n	8002222 <HAL_GPIO_Init+0x2e2>
 80021de:	bf00      	nop
 80021e0:	10320000 	.word	0x10320000
 80021e4:	10310000 	.word	0x10310000
 80021e8:	10220000 	.word	0x10220000
 80021ec:	10210000 	.word	0x10210000
 80021f0:	10120000 	.word	0x10120000
 80021f4:	10110000 	.word	0x10110000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010000 	.word	0x40010000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00
 8002208:	40011000 	.word	0x40011000
 800220c:	40011400 	.word	0x40011400
 8002210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_GPIO_Init+0x304>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4909      	ldr	r1, [pc, #36]	; (8002244 <HAL_GPIO_Init+0x304>)
 800221e:	4013      	ands	r3, r2
 8002220:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f ae8e 	bne.w	8001f54 <HAL_GPIO_Init+0x14>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	372c      	adds	r7, #44	; 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43d9      	mvns	r1, r3
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	611a      	str	r2, [r3, #16]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e12b      	b.n	8002516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff f8be 	bl	8001454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002310:	f002 f89a 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a81      	ldr	r2, [pc, #516]	; (8002520 <HAL_I2C_Init+0x274>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d807      	bhi.n	8002330 <HAL_I2C_Init+0x84>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a80      	ldr	r2, [pc, #512]	; (8002524 <HAL_I2C_Init+0x278>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e006      	b.n	800233e <HAL_I2C_Init+0x92>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a7d      	ldr	r2, [pc, #500]	; (8002528 <HAL_I2C_Init+0x27c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0e7      	b.n	8002516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a78      	ldr	r2, [pc, #480]	; (800252c <HAL_I2C_Init+0x280>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_I2C_Init+0x274>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d802      	bhi.n	8002380 <HAL_I2C_Init+0xd4>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3301      	adds	r3, #1
 800237e:	e009      	b.n	8002394 <HAL_I2C_Init+0xe8>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a69      	ldr	r2, [pc, #420]	; (8002530 <HAL_I2C_Init+0x284>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	3301      	adds	r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	495c      	ldr	r1, [pc, #368]	; (8002520 <HAL_I2C_Init+0x274>)
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d819      	bhi.n	80023e8 <HAL_I2C_Init+0x13c>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e59      	subs	r1, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023c8:	400b      	ands	r3, r1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_I2C_Init+0x138>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e59      	subs	r1, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	e051      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e04f      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_I2C_Init+0x168>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e012      	b.n	800243a <HAL_I2C_Init+0x18e>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e58      	subs	r0, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	0099      	lsls	r1, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	fbb0 f3f3 	udiv	r3, r0, r3
 800242a:	3301      	adds	r3, #1
 800242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Init+0x196>
 800243e:	2301      	movs	r3, #1
 8002440:	e022      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10e      	bne.n	8002468 <HAL_I2C_Init+0x1bc>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e58      	subs	r0, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	440b      	add	r3, r1
 8002458:	fbb0 f3f3 	udiv	r3, r0, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e58      	subs	r0, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	0099      	lsls	r1, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6809      	ldr	r1, [r1, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6911      	ldr	r1, [r2, #16]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	000186a0 	.word	0x000186a0
 8002524:	001e847f 	.word	0x001e847f
 8002528:	003d08ff 	.word	0x003d08ff
 800252c:	431bde83 	.word	0x431bde83
 8002530:	10624dd3 	.word	0x10624dd3

08002534 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002554:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b10      	cmp	r3, #16
 8002562:	d003      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x38>
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	f040 80c1 	bne.w	80026ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800258c:	d003      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0x62>
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002594:	d101      	bne.n	800259a <HAL_I2C_EV_IRQHandler+0x66>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_I2C_EV_IRQHandler+0x68>
 800259a:	2300      	movs	r3, #0
 800259c:	2b01      	cmp	r3, #1
 800259e:	f000 8132 	beq.w	8002806 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0x92>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	0a5b      	lsrs	r3, r3, #9
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f001 fb57 	bl	8003c6c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fcc8 	bl	8002f54 <I2C_Master_SB>
 80025c4:	e092      	b.n	80026ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	0a5b      	lsrs	r3, r3, #9
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fd3d 	bl	800305e <I2C_Master_ADD10>
 80025e4:	e082      	b.n	80026ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_I2C_EV_IRQHandler+0xd2>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0a5b      	lsrs	r3, r3, #9
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fd56 	bl	80030b0 <I2C_Master_ADDR>
 8002604:	e072      	b.n	80026ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03b      	beq.n	800268a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002620:	f000 80f3 	beq.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	09db      	lsrs	r3, r3, #7
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00f      	beq.n	8002650 <HAL_I2C_EV_IRQHandler+0x11c>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_I2C_EV_IRQHandler+0x11c>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f942 	bl	80028d2 <I2C_MasterTransmit_TXE>
 800264e:	e04d      	b.n	80026ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80d6 	beq.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	0a5b      	lsrs	r3, r3, #9
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80cf 	beq.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	2b21      	cmp	r3, #33	; 0x21
 8002670:	d103      	bne.n	800267a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9c9 	bl	8002a0a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002678:	e0c7      	b.n	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	f040 80c4 	bne.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa37 	bl	8002af6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002688:	e0bf      	b.n	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002698:	f000 80b7 	beq.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00f      	beq.n	80026c8 <HAL_I2C_EV_IRQHandler+0x194>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0a9b      	lsrs	r3, r3, #10
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_I2C_EV_IRQHandler+0x194>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 faac 	bl	8002c1e <I2C_MasterReceive_RXNE>
 80026c6:	e011      	b.n	80026ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 809a 	beq.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	0a5b      	lsrs	r3, r3, #9
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8093 	beq.w	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb4b 	bl	8002d80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ea:	e08e      	b.n	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
 80026ec:	e08d      	b.n	800280a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e007      	b.n	8002710 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d012      	beq.n	8002742 <HAL_I2C_EV_IRQHandler+0x20e>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	0a5b      	lsrs	r3, r3, #9
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00c      	beq.n	8002742 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 ff0f 	bl	800355e <I2C_Slave_ADDR>
 8002740:	e066      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_I2C_EV_IRQHandler+0x22e>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	0a5b      	lsrs	r3, r3, #9
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 ff4a 	bl	80035f4 <I2C_Slave_STOPF>
 8002760:	e056      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002762:	7bbb      	ldrb	r3, [r7, #14]
 8002764:	2b21      	cmp	r3, #33	; 0x21
 8002766:	d002      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x23a>
 8002768:	7bbb      	ldrb	r3, [r7, #14]
 800276a:	2b29      	cmp	r3, #41	; 0x29
 800276c:	d125      	bne.n	80027ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	09db      	lsrs	r3, r3, #7
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00f      	beq.n	800279a <HAL_I2C_EV_IRQHandler+0x266>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	0a9b      	lsrs	r3, r3, #10
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_I2C_EV_IRQHandler+0x266>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fe27 	bl	80033e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002798:	e039      	b.n	800280e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d033      	beq.n	800280e <HAL_I2C_EV_IRQHandler+0x2da>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	0a5b      	lsrs	r3, r3, #9
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02d      	beq.n	800280e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fe54 	bl	8003460 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027b8:	e029      	b.n	800280e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00f      	beq.n	80027e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	0a9b      	lsrs	r3, r3, #10
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fe5e 	bl	80034a0 <I2C_SlaveReceive_RXNE>
 80027e4:	e014      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	0a5b      	lsrs	r3, r3, #9
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fe8c 	bl	800351c <I2C_SlaveReceive_BTF>
 8002804:	e004      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800280e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	70fb      	strb	r3, [r7, #3]
 800286a:	4613      	mov	r3, r2
 800286c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d150      	bne.n	800299a <I2C_MasterTransmit_TXE+0xc8>
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b21      	cmp	r3, #33	; 0x21
 80028fc:	d14d      	bne.n	800299a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d01d      	beq.n	8002940 <I2C_MasterTransmit_TXE+0x6e>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b20      	cmp	r3, #32
 8002908:	d01a      	beq.n	8002940 <I2C_MasterTransmit_TXE+0x6e>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002910:	d016      	beq.n	8002940 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002920:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2211      	movs	r2, #17
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff6c 	bl	8002816 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800293e:	e060      	b.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800294e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d107      	bne.n	800298a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff81 	bl	800288a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002988:	e03b      	b.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff3f 	bl	8002816 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002998:	e033      	b.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b21      	cmp	r3, #33	; 0x21
 800299e:	d005      	beq.n	80029ac <I2C_MasterTransmit_TXE+0xda>
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d12d      	bne.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b22      	cmp	r3, #34	; 0x22
 80029aa:	d12a      	bne.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d108      	bne.n	80029c8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029c6:	e01c      	b.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d103      	bne.n	80029dc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f88e 	bl	8002af6 <I2C_MemoryTransmit_TXE_BTF>
}
 80029da:	e012      	b.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a00:	e7ff      	b.n	8002a02 <I2C_MasterTransmit_TXE+0x130>
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b21      	cmp	r3, #33	; 0x21
 8002a22:	d164      	bne.n	8002aee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a52:	e04c      	b.n	8002aee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d01d      	beq.n	8002a96 <I2C_MasterTransmit_BTF+0x8c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d01a      	beq.n	8002a96 <I2C_MasterTransmit_BTF+0x8c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a66:	d016      	beq.n	8002a96 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a76:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2211      	movs	r2, #17
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fec1 	bl	8002816 <HAL_I2C_MasterTxCpltCallback>
}
 8002a94:	e02b      	b.n	8002aee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d107      	bne.n	8002ae0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fed6 	bl	800288a <HAL_I2C_MemTxCpltCallback>
}
 8002ade:	e006      	b.n	8002aee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fe94 	bl	8002816 <HAL_I2C_MasterTxCpltCallback>
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11d      	bne.n	8002b4a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10b      	bne.n	8002b2e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	1c9a      	adds	r2, r3, #2
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b2c:	e073      	b.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	121b      	asrs	r3, r3, #8
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b48:	e065      	b.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10b      	bne.n	8002b6a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b68:	e055      	b.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d151      	bne.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b22      	cmp	r3, #34	; 0x22
 8002b76:	d10d      	bne.n	8002b94 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b86:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b92:	e040      	b.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b21      	cmp	r3, #33	; 0x21
 8002ba2:	d112      	bne.n	8002bca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bc8:	e025      	b.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d120      	bne.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b21      	cmp	r3, #33	; 0x21
 8002bd8:	d11d      	bne.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fe3a 	bl	800288a <HAL_I2C_MemTxCpltCallback>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b22      	cmp	r3, #34	; 0x22
 8002c30:	f040 80a2 	bne.w	8002d78 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d921      	bls.n	8002c86 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	f040 8082 	bne.w	8002d78 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002c84:	e078      	b.n	8002d78 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d074      	beq.n	8002d78 <I2C_MasterReceive_RXNE+0x15a>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d002      	beq.n	8002c9a <I2C_MasterReceive_RXNE+0x7c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d16e      	bne.n	8002d78 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 ffb4 	bl	8003c08 <I2C_WaitOnSTOPRequestThroughIT>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d142      	bne.n	8002d2c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d10a      	bne.n	8002d16 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fdc4 	bl	800289c <HAL_I2C_MemRxCpltCallback>
}
 8002d14:	e030      	b.n	8002d78 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2212      	movs	r2, #18
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fd7f 	bl	8002828 <HAL_I2C_MasterRxCpltCallback>
}
 8002d2a:	e025      	b.n	8002d78 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fd9b 	bl	80028ae <HAL_I2C_ErrorCallback>
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11b      	bne.n	8002dd0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002dce:	e0bd      	b.n	8002f4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d129      	bne.n	8002e2e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00a      	beq.n	8002e06 <I2C_MasterReceive_BTF+0x86>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d007      	beq.n	8002e06 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e2c:	e08e      	b.n	8002f4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d176      	bne.n	8002f26 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d002      	beq.n	8002e44 <I2C_MasterReceive_BTF+0xc4>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d108      	bne.n	8002e56 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e019      	b.n	8002e8a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d002      	beq.n	8002e62 <I2C_MasterReceive_BTF+0xe2>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d108      	bne.n	8002e74 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e00a      	b.n	8002e8a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d007      	beq.n	8002e8a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ee4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d10a      	bne.n	8002f10 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fcc7 	bl	800289c <HAL_I2C_MemRxCpltCallback>
}
 8002f0e:	e01d      	b.n	8002f4c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2212      	movs	r2, #18
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fc82 	bl	8002828 <HAL_I2C_MasterRxCpltCallback>
}
 8002f24:	e012      	b.n	8002f4c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d117      	bne.n	8002f98 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f80:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f82:	e067      	b.n	8003054 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
}
 8002f96:	e05d      	b.n	8003054 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa0:	d133      	bne.n	800300a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b21      	cmp	r3, #33	; 0x21
 8002fac:	d109      	bne.n	8002fc2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fbe:	611a      	str	r2, [r3, #16]
 8002fc0:	e008      	b.n	8002fd4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <I2C_Master_SB+0x92>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d032      	beq.n	8003054 <I2C_Master_SB+0x100>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02d      	beq.n	8003054 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	605a      	str	r2, [r3, #4]
}
 8003008:	e024      	b.n	8003054 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	b29b      	uxth	r3, r3
 8003018:	11db      	asrs	r3, r3, #7
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 0306 	and.w	r3, r3, #6
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f063 030f 	orn	r3, r3, #15
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	611a      	str	r2, [r3, #16]
}
 800302e:	e011      	b.n	8003054 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10d      	bne.n	8003054 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	b29b      	uxth	r3, r3
 800303e:	11db      	asrs	r3, r3, #7
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f003 0306 	and.w	r3, r3, #6
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f063 030e 	orn	r3, r3, #14
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	b2da      	uxtb	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <I2C_Master_ADD10+0x26>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00c      	beq.n	80030a6 <I2C_Master_ADD10+0x48>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a4:	605a      	str	r2, [r3, #4]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b091      	sub	sp, #68	; 0x44
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b22      	cmp	r3, #34	; 0x22
 80030d8:	f040 8174 	bne.w	80033c4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10f      	bne.n	8003104 <I2C_Master_ADDR+0x54>
 80030e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d10b      	bne.n	8003104 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	e16b      	b.n	80033dc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11d      	bne.n	8003148 <I2C_Master_ADDR+0x98>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003114:	d118      	bne.n	8003148 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2300      	movs	r3, #0
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	651a      	str	r2, [r3, #80]	; 0x50
 8003146:	e149      	b.n	80033dc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e120      	b.n	80033bc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 808a 	bne.w	800329a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800318c:	d137      	bne.n	80031fe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ac:	d113      	bne.n	80031d6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	e0f2      	b.n	80033bc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	623b      	str	r3, [r7, #32]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	623b      	str	r3, [r7, #32]
 80031ea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e0de      	b.n	80033bc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	2b08      	cmp	r3, #8
 8003202:	d02e      	beq.n	8003262 <I2C_Master_ADDR+0x1b2>
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	2b20      	cmp	r3, #32
 8003208:	d02b      	beq.n	8003262 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	2b12      	cmp	r3, #18
 800320e:	d102      	bne.n	8003216 <I2C_Master_ADDR+0x166>
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	2b01      	cmp	r3, #1
 8003214:	d125      	bne.n	8003262 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b04      	cmp	r3, #4
 800321a:	d00e      	beq.n	800323a <I2C_Master_ADDR+0x18a>
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	2b02      	cmp	r3, #2
 8003220:	d00b      	beq.n	800323a <I2C_Master_ADDR+0x18a>
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2b10      	cmp	r3, #16
 8003226:	d008      	beq.n	800323a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e007      	b.n	800324a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	e0ac      	b.n	80033bc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e090      	b.n	80033bc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d158      	bne.n	8003356 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d021      	beq.n	80032ee <I2C_Master_ADDR+0x23e>
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d01e      	beq.n	80032ee <I2C_Master_ADDR+0x23e>
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d01b      	beq.n	80032ee <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e012      	b.n	8003314 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	d14b      	bne.n	80033bc <I2C_Master_ADDR+0x30c>
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800332a:	d00b      	beq.n	8003344 <I2C_Master_ADDR+0x294>
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	2b01      	cmp	r3, #1
 8003330:	d008      	beq.n	8003344 <I2C_Master_ADDR+0x294>
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	2b08      	cmp	r3, #8
 8003336:	d005      	beq.n	8003344 <I2C_Master_ADDR+0x294>
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	2b10      	cmp	r3, #16
 800333c:	d002      	beq.n	8003344 <I2C_Master_ADDR+0x294>
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	2b20      	cmp	r3, #32
 8003342:	d13b      	bne.n	80033bc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	e032      	b.n	80033bc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	d117      	bne.n	80033a6 <I2C_Master_ADDR+0x2f6>
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800337c:	d00b      	beq.n	8003396 <I2C_Master_ADDR+0x2e6>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b01      	cmp	r3, #1
 8003382:	d008      	beq.n	8003396 <I2C_Master_ADDR+0x2e6>
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b08      	cmp	r3, #8
 8003388:	d005      	beq.n	8003396 <I2C_Master_ADDR+0x2e6>
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b10      	cmp	r3, #16
 800338e:	d002      	beq.n	8003396 <I2C_Master_ADDR+0x2e6>
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	2b20      	cmp	r3, #32
 8003394:	d107      	bne.n	80033a6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033c2:	e00b      	b.n	80033dc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
}
 80033da:	e7ff      	b.n	80033dc <I2C_Master_ADDR+0x32c>
 80033dc:	bf00      	nop
 80033de:	3744      	adds	r7, #68	; 0x44
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02b      	beq.n	8003458 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d114      	bne.n	8003458 <I2C_SlaveTransmit_TXE+0x72>
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b29      	cmp	r3, #41	; 0x29
 8003432:	d111      	bne.n	8003458 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2221      	movs	r2, #33	; 0x21
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2228      	movs	r2, #40	; 0x28
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff f9f1 	bl	800283a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d011      	beq.n	8003496 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02c      	beq.n	8003514 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d114      	bne.n	8003514 <I2C_SlaveReceive_RXNE+0x74>
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b2a      	cmp	r3, #42	; 0x2a
 80034ee:	d111      	bne.n	8003514 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2222      	movs	r2, #34	; 0x22
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2228      	movs	r2, #40	; 0x28
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff f99c 	bl	800284c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003578:	2b28      	cmp	r3, #40	; 0x28
 800357a:	d127      	bne.n	80035cc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	09db      	lsrs	r3, r3, #7
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	81bb      	strh	r3, [r7, #12]
 80035ae:	e002      	b.n	80035b6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035be:	89ba      	ldrh	r2, [r7, #12]
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff f94a 	bl	800285e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035ca:	e00e      	b.n	80035ea <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003612:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003640:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003650:	d172      	bne.n	8003738 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b22      	cmp	r3, #34	; 0x22
 8003656:	d002      	beq.n	800365e <I2C_Slave_STOPF+0x6a>
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b2a      	cmp	r3, #42	; 0x2a
 800365c:	d135      	bne.n	80036ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003690:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe fc46 	bl	8001f28 <HAL_DMA_GetState>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d049      	beq.n	8003736 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	4a69      	ldr	r2, [pc, #420]	; (800384c <I2C_Slave_STOPF+0x258>)
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fbc4 	bl	8001e3c <HAL_DMA_Abort_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03d      	beq.n	8003736 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c4:	4610      	mov	r0, r2
 80036c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036c8:	e035      	b.n	8003736 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fc10 	bl	8001f28 <HAL_DMA_GetState>
 8003708:	4603      	mov	r3, r0
 800370a:	2b01      	cmp	r3, #1
 800370c:	d014      	beq.n	8003738 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	4a4e      	ldr	r2, [pc, #312]	; (800384c <I2C_Slave_STOPF+0x258>)
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fb8e 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003730:	4610      	mov	r0, r2
 8003732:	4798      	blx	r3
 8003734:	e000      	b.n	8003738 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003736:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03e      	beq.n	80037c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d112      	bne.n	8003776 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d112      	bne.n	80037aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f843 	bl	8003854 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037ce:	e039      	b.n	8003844 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b2a      	cmp	r3, #42	; 0x2a
 80037d4:	d109      	bne.n	80037ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2228      	movs	r2, #40	; 0x28
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff f831 	bl	800284c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b28      	cmp	r3, #40	; 0x28
 80037f4:	d111      	bne.n	800381a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a15      	ldr	r2, [pc, #84]	; (8003850 <I2C_Slave_STOPF+0x25c>)
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff f830 	bl	8002878 <HAL_I2C_ListenCpltCallback>
}
 8003818:	e014      	b.n	8003844 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	2b22      	cmp	r3, #34	; 0x22
 8003820:	d002      	beq.n	8003828 <I2C_Slave_STOPF+0x234>
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b22      	cmp	r3, #34	; 0x22
 8003826:	d10d      	bne.n	8003844 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff f804 	bl	800284c <HAL_I2C_SlaveRxCpltCallback>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	08003ab9 	.word	0x08003ab9
 8003850:	ffff0000 	.word	0xffff0000

08003854 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800386c:	7bbb      	ldrb	r3, [r7, #14]
 800386e:	2b10      	cmp	r3, #16
 8003870:	d002      	beq.n	8003878 <I2C_ITError+0x24>
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d10a      	bne.n	800388e <I2C_ITError+0x3a>
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b22      	cmp	r3, #34	; 0x22
 800387c:	d107      	bne.n	800388e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003894:	2b28      	cmp	r3, #40	; 0x28
 8003896:	d107      	bne.n	80038a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2228      	movs	r2, #40	; 0x28
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038a6:	e015      	b.n	80038d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b6:	d00a      	beq.n	80038ce <I2C_ITError+0x7a>
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b60      	cmp	r3, #96	; 0x60
 80038bc:	d007      	beq.n	80038ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e2:	d161      	bne.n	80039a8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d020      	beq.n	8003942 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003904:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <I2C_ITError+0x25c>)
 8003906:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fa95 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8089 	beq.w	8003a2c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
 8003940:	e074      	b.n	8003a2c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4a5a      	ldr	r2, [pc, #360]	; (8003ab0 <I2C_ITError+0x25c>)
 8003948:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fa74 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d068      	beq.n	8003a2c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d10b      	bne.n	8003980 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a2:	4610      	mov	r0, r2
 80039a4:	4798      	blx	r3
 80039a6:	e041      	b.n	8003a2c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d125      	bne.n	8003a00 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d10b      	bne.n	80039e8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fe ff61 	bl	80028c0 <HAL_I2C_AbortCpltCallback>
 80039fe:	e015      	b.n	8003a2c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d10b      	bne.n	8003a26 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe ff41 	bl	80028ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10e      	bne.n	8003a5a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a68:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d113      	bne.n	8003aa6 <I2C_ITError+0x252>
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b28      	cmp	r3, #40	; 0x28
 8003a82:	d110      	bne.n	8003aa6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <I2C_ITError+0x260>)
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fe fee9 	bl	8002878 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	08003ab9 	.word	0x08003ab9
 8003ab4:	ffff0000 	.word	0xffff0000

08003ab8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <I2C_DMAAbort+0x148>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	08db      	lsrs	r3, r3, #3
 8003ad8:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <I2C_DMAAbort+0x14c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a1a      	lsrs	r2, r3, #8
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00da      	lsls	r2, r3, #3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003afe:	e00a      	b.n	8003b16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d0ea      	beq.n	8003aec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b22:	2200      	movs	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	2200      	movs	r2, #0
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	2200      	movs	r2, #0
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	2200      	movs	r2, #0
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b60      	cmp	r3, #96	; 0x60
 8003b86:	d10e      	bne.n	8003ba6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7fe fe8e 	bl	80028c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ba4:	e027      	b.n	8003bf6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bac:	2b28      	cmp	r3, #40	; 0x28
 8003bae:	d117      	bne.n	8003be0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2228      	movs	r2, #40	; 0x28
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bde:	e007      	b.n	8003bf0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7fe fe5c 	bl	80028ae <HAL_I2C_ErrorCallback>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000008 	.word	0x20000008
 8003c04:	14f8b589 	.word	0x14f8b589

08003c08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	0a1a      	lsrs	r2, r3, #8
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e008      	b.n	8003c58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d0e9      	beq.n	8003c2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000008 	.word	0x20000008
 8003c68:	14f8b589 	.word	0x14f8b589

08003c6c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c7c:	d103      	bne.n	8003c86 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c84:	e007      	b.n	8003c96 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c8e:	d102      	bne.n	8003c96 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2208      	movs	r2, #8
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e272      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8087 	beq.w	8003dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cc0:	4b92      	ldr	r3, [pc, #584]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d00c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ccc:	4b8f      	ldr	r3, [pc, #572]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d112      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5e>
 8003cd8:	4b8c      	ldr	r3, [pc, #560]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d10b      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce6:	4b89      	ldr	r3, [pc, #548]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d06c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x12c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d168      	bne.n	8003dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e24c      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x76>
 8003d08:	4b80      	ldr	r3, [pc, #512]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7f      	ldr	r2, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e02e      	b.n	8003d74 <HAL_RCC_OscConfig+0xd4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x98>
 8003d1e:	4b7b      	ldr	r3, [pc, #492]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a7a      	ldr	r2, [pc, #488]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b78      	ldr	r3, [pc, #480]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a77      	ldr	r2, [pc, #476]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xd4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0xbc>
 8003d42:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a71      	ldr	r2, [pc, #452]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6e      	ldr	r2, [pc, #440]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xd4>
 8003d5c:	4b6b      	ldr	r3, [pc, #428]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6a      	ldr	r2, [pc, #424]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a67      	ldr	r2, [pc, #412]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd ff0c 	bl	8001b98 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fd ff08 	bl	8001b98 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e200      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe4>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd fef8 	bl	8001b98 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fd fef4 	bl	8001b98 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1ec      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x10c>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x18c>
 8003df2:	4b46      	ldr	r3, [pc, #280]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x176>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1c0      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_RCC_OscConfig+0x270>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fead 	bl	8001b98 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fd fea9 	bl	8001b98 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1a1      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4927      	ldr	r1, [pc, #156]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <HAL_RCC_OscConfig+0x270>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fe8c 	bl	8001b98 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fd fe88 	bl	8001b98 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e180      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d03a      	beq.n	8003f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d019      	beq.n	8003eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7fd fe6c 	bl	8001b98 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fd fe68 	bl	8001b98 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e160      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	f000 fad8 	bl	8004498 <RCC_Delay>
 8003ee8:	e01c      	b.n	8003f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_RCC_OscConfig+0x274>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fe52 	bl	8001b98 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef6:	e00f      	b.n	8003f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7fd fe4e 	bl	8001b98 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e146      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	42420000 	.word	0x42420000
 8003f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e9      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a6 	beq.w	800407e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f36:	4b8b      	ldr	r3, [pc, #556]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	4a87      	ldr	r2, [pc, #540]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	61d3      	str	r3, [r2, #28]
 8003f4e:	4b85      	ldr	r3, [pc, #532]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b82      	ldr	r3, [pc, #520]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d118      	bne.n	8003f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f76:	f7fd fe0f 	bl	8001b98 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fd fe0b 	bl	8001b98 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e103      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b75      	ldr	r3, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x4c8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x312>
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4a6e      	ldr	r2, [pc, #440]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6213      	str	r3, [r2, #32]
 8003fb0:	e02d      	b.n	800400e <HAL_RCC_OscConfig+0x36e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x334>
 8003fba:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a69      	ldr	r2, [pc, #420]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6213      	str	r3, [r2, #32]
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a66      	ldr	r2, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6213      	str	r3, [r2, #32]
 8003fd2:	e01c      	b.n	800400e <HAL_RCC_OscConfig+0x36e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x356>
 8003fdc:	4b61      	ldr	r3, [pc, #388]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4a60      	ldr	r2, [pc, #384]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6213      	str	r3, [r2, #32]
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4a5d      	ldr	r2, [pc, #372]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6213      	str	r3, [r2, #32]
 8003ff4:	e00b      	b.n	800400e <HAL_RCC_OscConfig+0x36e>
 8003ff6:	4b5b      	ldr	r3, [pc, #364]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6213      	str	r3, [r2, #32]
 8004002:	4b58      	ldr	r3, [pc, #352]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a57      	ldr	r2, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d015      	beq.n	8004042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004016:	f7fd fdbf 	bl	8001b98 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fdbb 	bl	8001b98 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0b1      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ee      	beq.n	800401e <HAL_RCC_OscConfig+0x37e>
 8004040:	e014      	b.n	800406c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fd fda9 	bl	8001b98 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd fda5 	bl	8001b98 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e09b      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ee      	bne.n	800404a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8087 	beq.w	8004196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d061      	beq.n	8004158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d146      	bne.n	800412a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409c:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_RCC_OscConfig+0x4cc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd fd79 	bl	8001b98 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd fd75 	bl	8001b98 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e06d      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d108      	bne.n	80040e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4921      	ldr	r1, [pc, #132]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a19      	ldr	r1, [r3, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	430b      	orrs	r3, r1
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fd fd49 	bl	8001b98 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fd fd45 	bl	8001b98 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e03d      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x46a>
 8004128:	e035      	b.n	8004196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_RCC_OscConfig+0x4cc>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fd32 	bl	8001b98 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fd fd2e 	bl	8001b98 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e026      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x498>
 8004156:	e01e      	b.n	8004196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e019      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
 800416c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x500>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	429a      	cmp	r2, r3
 8004182:	d106      	bne.n	8004192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d0      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d910      	bls.n	80041e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b67      	ldr	r3, [pc, #412]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4965      	ldr	r1, [pc, #404]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0b8      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004200:	4b59      	ldr	r3, [pc, #356]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800420a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004218:	4b53      	ldr	r3, [pc, #332]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	4b50      	ldr	r3, [pc, #320]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	494d      	ldr	r1, [pc, #308]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d040      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d115      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e07f      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e073      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06b      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004282:	4b39      	ldr	r3, [pc, #228]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4936      	ldr	r1, [pc, #216]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004294:	f7fd fc80 	bl	8001b98 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fd fc7c 	bl	8001b98 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e053      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 020c 	and.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1eb      	bne.n	800429c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d210      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b20      	ldr	r3, [pc, #128]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e032      	b.n	800435a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4916      	ldr	r1, [pc, #88]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	490e      	ldr	r1, [pc, #56]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004332:	f000 f821 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 8004336:	4602      	mov	r2, r0
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	490a      	ldr	r1, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1cc>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd fbde 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40022000 	.word	0x40022000
 8004368:	40021000 	.word	0x40021000
 800436c:	08008590 	.word	0x08008590
 8004370:	20000008 	.word	0x20000008
 8004374:	20000010 	.word	0x20000010

08004378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004378:	b490      	push	{r4, r7}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800437e:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCC_GetSysClockFreq+0xac>)
 8004380:	1d3c      	adds	r4, r7, #4
 8004382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004388:	f240 2301 	movw	r3, #513	; 0x201
 800438c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d002      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x40>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x46>
 80043b6:	e02b      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043ba:	623b      	str	r3, [r7, #32]
      break;
 80043bc:	e02b      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	0c9b      	lsrs	r3, r3, #18
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3328      	adds	r3, #40	; 0x28
 80043c8:	443b      	add	r3, r7
 80043ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0c5b      	lsrs	r3, r3, #17
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	3328      	adds	r3, #40	; 0x28
 80043e6:	443b      	add	r3, r7
 80043e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a0e      	ldr	r2, [pc, #56]	; (800442c <HAL_RCC_GetSysClockFreq+0xb4>)
 80043f2:	fb03 f202 	mul.w	r2, r3, r2
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	e004      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	623b      	str	r3, [r7, #32]
      break;
 800440e:	e002      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004412:	623b      	str	r3, [r7, #32]
      break;
 8004414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004416:	6a3b      	ldr	r3, [r7, #32]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc90      	pop	{r4, r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	08008580 	.word	0x08008580
 8004428:	40021000 	.word	0x40021000
 800442c:	007a1200 	.word	0x007a1200
 8004430:	003d0900 	.word	0x003d0900

08004434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <HAL_RCC_GetHCLKFreq+0x10>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000008 	.word	0x20000008

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800444c:	f7ff fff2 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	080085a0 	.word	0x080085a0

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004474:	f7ff ffde 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	0adb      	lsrs	r3, r3, #11
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	080085a0 	.word	0x080085a0

08004498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <RCC_Delay+0x34>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <RCC_Delay+0x38>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0a5b      	lsrs	r3, r3, #9
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044b4:	bf00      	nop
  }
  while (Delay --);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	60fa      	str	r2, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f9      	bne.n	80044b4 <RCC_Delay+0x1c>
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20000008 	.word	0x20000008
 80044d0:	10624dd3 	.word	0x10624dd3

080044d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e041      	b.n	800456a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fc fff0 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f000 fa70 	bl	80049f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d001      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e03a      	b.n	8004602 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a18      	ldr	r2, [pc, #96]	; (800460c <HAL_TIM_Base_Start_IT+0x98>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x58>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x58>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <HAL_TIM_Base_Start_IT+0x9c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x58>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <HAL_TIM_Base_Start_IT+0xa0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d111      	bne.n	80045f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d010      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	e007      	b.n	8004600 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800

08004618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d122      	bne.n	8004674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b02      	cmp	r3, #2
 800463a:	d11b      	bne.n	8004674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0202 	mvn.w	r2, #2
 8004644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f9b1 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9a4 	bl	80049b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f9b3 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d122      	bne.n	80046c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d11b      	bne.n	80046c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0204 	mvn.w	r2, #4
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f987 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f97a 	bl	80049b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f989 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d122      	bne.n	800471c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d11b      	bne.n	800471c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0208 	mvn.w	r2, #8
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2204      	movs	r2, #4
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f95d 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f950 	bl	80049b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f95f 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b10      	cmp	r3, #16
 8004728:	d122      	bne.n	8004770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b10      	cmp	r3, #16
 8004736:	d11b      	bne.n	8004770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0210 	mvn.w	r2, #16
 8004740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2208      	movs	r2, #8
 8004746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f933 	bl	80049c2 <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f926 	bl	80049b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f935 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d10e      	bne.n	800479c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d107      	bne.n	800479c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0201 	mvn.w	r2, #1
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fc18 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b80      	cmp	r3, #128	; 0x80
 80047a8:	d10e      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d107      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa77 	bl	8004cb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8f9 	bl	80049e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b20      	cmp	r3, #32
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0220 	mvn.w	r2, #32
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa42 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIM_ConfigClockSource+0x18>
 800483c:	2302      	movs	r3, #2
 800483e:	e0b3      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x180>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800485e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004878:	d03e      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0xd0>
 800487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487e:	f200 8087 	bhi.w	8004990 <HAL_TIM_ConfigClockSource+0x168>
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	f000 8085 	beq.w	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d87f      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 8004890:	2b70      	cmp	r3, #112	; 0x70
 8004892:	d01a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0xa2>
 8004894:	2b70      	cmp	r3, #112	; 0x70
 8004896:	d87b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 8004898:	2b60      	cmp	r3, #96	; 0x60
 800489a:	d050      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x116>
 800489c:	2b60      	cmp	r3, #96	; 0x60
 800489e:	d877      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 80048a0:	2b50      	cmp	r3, #80	; 0x50
 80048a2:	d03c      	beq.n	800491e <HAL_TIM_ConfigClockSource+0xf6>
 80048a4:	2b50      	cmp	r3, #80	; 0x50
 80048a6:	d873      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d058      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x136>
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d86f      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 80048b0:	2b30      	cmp	r3, #48	; 0x30
 80048b2:	d064      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x156>
 80048b4:	2b30      	cmp	r3, #48	; 0x30
 80048b6:	d86b      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d060      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x156>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d867      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d05c      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x156>
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d05a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048c8:	e062      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6899      	ldr	r1, [r3, #8]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f000 f966 	bl	8004baa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	609a      	str	r2, [r3, #8]
      break;
 80048f6:	e04e      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6899      	ldr	r1, [r3, #8]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f000 f94f 	bl	8004baa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491a:	609a      	str	r2, [r3, #8]
      break;
 800491c:	e03b      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	461a      	mov	r2, r3
 800492c:	f000 f8c6 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2150      	movs	r1, #80	; 0x50
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f91d 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 800493c:	e02b      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	f000 f8e4 	bl	8004b18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2160      	movs	r1, #96	; 0x60
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f90d 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 800495c:	e01b      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	f000 f8a6 	bl	8004abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2140      	movs	r1, #64	; 0x40
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f8fd 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 800497c:	e00b      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 f8f4 	bl	8004b76 <TIM_ITRx_SetConfig>
        break;
 800498e:	e002      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004994:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a29      	ldr	r2, [pc, #164]	; (8004ab0 <TIM_Base_SetConfig+0xb8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0x30>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x30>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x30>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <TIM_Base_SetConfig+0xc0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d108      	bne.n	8004a3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <TIM_Base_SetConfig+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0x62>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0x62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0x62>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <TIM_Base_SetConfig+0xc0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <TIM_Base_SetConfig+0xb8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d103      	bne.n	8004aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	615a      	str	r2, [r3, #20]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800

08004abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 030a 	bic.w	r3, r3, #10
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f023 0210 	bic.w	r2, r3, #16
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	031b      	lsls	r3, r3, #12
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f043 0307 	orr.w	r3, r3, #7
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	021a      	lsls	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	609a      	str	r2, [r3, #8]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e046      	b.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10c      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e03f      	b.n	8004d5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fc1a 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fc85 	bl	800561c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b08a      	sub	sp, #40	; 0x28
 8004d66:	af02      	add	r7, sp, #8
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d17c      	bne.n	8004e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_Transmit+0x2c>
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e075      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Transmit+0x3e>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e06e      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2221      	movs	r2, #33	; 0x21
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db6:	f7fc feef 	bl	8001b98 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d108      	bne.n	8004de4 <HAL_UART_Transmit+0x82>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e003      	b.n	8004dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004df4:	e02a      	b.n	8004e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa38 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e036      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e007      	b.n	8004e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1cf      	bne.n	8004df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fa08 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4613      	mov	r3, r2
 8004e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d11d      	bne.n	8004edc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Receive_IT+0x26>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e016      	b.n	8004ede <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Receive_IT+0x38>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e00f      	b.n	8004ede <HAL_UART_Receive_IT+0x58>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fa19 	bl	800530a <UART_Start_Receive_IT>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	e000      	b.n	8004ede <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_UART_IRQHandler+0x52>
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fac9 	bl	80054ca <UART_Receive_IT>
      return;
 8004f38:	e17b      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80b1 	beq.w	80050a4 <HAL_UART_IRQHandler+0x1bc>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_UART_IRQHandler+0x70>
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80a6 	beq.w	80050a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_UART_IRQHandler+0x90>
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_UART_IRQHandler+0xb0>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f043 0202 	orr.w	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xd0>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f043 0204 	orr.w	r2, r3, #4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00f      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xfa>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <HAL_UART_IRQHandler+0xee>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0208 	orr.w	r2, r3, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 811e 	beq.w	8005228 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_UART_IRQHandler+0x11e>
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fa62 	bl	80054ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <HAL_UART_IRQHandler+0x146>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d031      	beq.n	8005092 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f9a4 	bl	800537c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d023      	beq.n	800508a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	4a76      	ldr	r2, [pc, #472]	; (8005238 <HAL_UART_IRQHandler+0x350>)
 8005060:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f7fc fee8 	bl	8001e3c <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00e      	b.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8e3 	bl	800524e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	e00a      	b.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8df 	bl	800524e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8db 	bl	800524e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800509e:	e0c3      	b.n	8005228 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	bf00      	nop
    return;
 80050a2:	e0c1      	b.n	8005228 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 80a1 	bne.w	80051f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 809b 	beq.w	80051f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8095 	beq.w	80051f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04e      	beq.n	8005188 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80050f4:	8a3b      	ldrh	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8098 	beq.w	800522c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005100:	8a3a      	ldrh	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	f080 8092 	bcs.w	800522c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8a3a      	ldrh	r2, [r7, #16]
 800510c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b20      	cmp	r3, #32
 8005116:	d02b      	beq.n	8005170 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005126:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005146:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0210 	bic.w	r2, r2, #16
 8005164:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4618      	mov	r0, r3
 800516c:	f7fc fe2b 	bl	8001dc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f86d 	bl	8005260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005186:	e051      	b.n	800522c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005190:	b29b      	uxth	r3, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d047      	beq.n	8005230 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80051a0:	8a7b      	ldrh	r3, [r7, #18]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d044      	beq.n	8005230 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0210 	bic.w	r2, r2, #16
 80051e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051e4:	8a7b      	ldrh	r3, [r7, #18]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f839 	bl	8005260 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051ee:	e01f      	b.n	8005230 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_UART_IRQHandler+0x324>
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8f9 	bl	80053fc <UART_Transmit_IT>
    return;
 800520a:	e012      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <HAL_UART_IRQHandler+0x34a>
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f93a 	bl	800549a <UART_EndTransmit_IT>
    return;
 8005226:	e004      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
    return;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
      return;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_UART_IRQHandler+0x34a>
      return;
 8005230:	bf00      	nop
  }
}
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	080053d5 	.word	0x080053d5

0800523c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	e02c      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528e:	d028      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005296:	f7fc fc7f 	bl	8001b98 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d21d      	bcs.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d0c3      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	4613      	mov	r3, r2
 8005316:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	88fa      	ldrh	r2, [r7, #6]
 8005322:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2222      	movs	r2, #34	; 0x22
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800534e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0220 	orr.w	r2, r2, #32
 800536e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005392:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0210 	bic.w	r2, r2, #16
 80053ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff ff2d 	bl	800524e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b21      	cmp	r3, #33	; 0x21
 800540e:	d13e      	bne.n	800548e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005418:	d114      	bne.n	8005444 <UART_Transmit_IT+0x48>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d110      	bne.n	8005444 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005436:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	1c9a      	adds	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]
 8005442:	e008      	b.n	8005456 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6211      	str	r1, [r2, #32]
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4619      	mov	r1, r3
 8005464:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005478:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005488:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800548e:	2302      	movs	r3, #2
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff febe 	bl	800523c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b22      	cmp	r3, #34	; 0x22
 80054dc:	f040 8099 	bne.w	8005612 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d117      	bne.n	800551a <UART_Receive_IT+0x50>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d113      	bne.n	800551a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005508:	b29a      	uxth	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
 8005518:	e026      	b.n	8005568 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	d007      	beq.n	800553e <UART_Receive_IT+0x74>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <UART_Receive_IT+0x82>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e008      	b.n	800555e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29b      	uxth	r3, r3
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4619      	mov	r1, r3
 8005576:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005578:	2b00      	cmp	r3, #0
 800557a:	d148      	bne.n	800560e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0220 	bic.w	r2, r2, #32
 800558a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800559a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d123      	bne.n	8005604 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0210 	bic.w	r2, r2, #16
 80055d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d10a      	bne.n	80055f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fe2f 	bl	8005260 <HAL_UARTEx_RxEventCallback>
 8005602:	e002      	b.n	800560a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fb fb05 	bl	8000c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e002      	b.n	8005614 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e000      	b.n	8005614 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005656:	f023 030c 	bic.w	r3, r3, #12
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	430b      	orrs	r3, r1
 8005662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <UART_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fef4 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	e002      	b.n	8005692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe fedc 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8005690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009a      	lsls	r2, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	4a22      	ldr	r2, [pc, #136]	; (8005734 <UART_SetConfig+0x118>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	0119      	lsls	r1, r3, #4
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009a      	lsls	r2, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056c8:	4b1a      	ldr	r3, [pc, #104]	; (8005734 <UART_SetConfig+0x118>)
 80056ca:	fba3 0302 	umull	r0, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2064      	movs	r0, #100	; 0x64
 80056d2:	fb00 f303 	mul.w	r3, r0, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a15      	ldr	r2, [pc, #84]	; (8005734 <UART_SetConfig+0x118>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e8:	4419      	add	r1, r3
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009a      	lsls	r2, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <UART_SetConfig+0x118>)
 8005702:	fba3 0302 	umull	r0, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2064      	movs	r0, #100	; 0x64
 800570a:	fb00 f303 	mul.w	r3, r0, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	; 0x32
 8005714:	4a07      	ldr	r2, [pc, #28]	; (8005734 <UART_SetConfig+0x118>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	440a      	add	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40013800 	.word	0x40013800
 8005734:	51eb851f 	.word	0x51eb851f

08005738 <__errno>:
 8005738:	4b01      	ldr	r3, [pc, #4]	; (8005740 <__errno+0x8>)
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20000018 	.word	0x20000018

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	2600      	movs	r6, #0
 8005748:	4d0c      	ldr	r5, [pc, #48]	; (800577c <__libc_init_array+0x38>)
 800574a:	4c0d      	ldr	r4, [pc, #52]	; (8005780 <__libc_init_array+0x3c>)
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	f002 fefc 	bl	8008550 <_init>
 8005758:	2600      	movs	r6, #0
 800575a:	4d0a      	ldr	r5, [pc, #40]	; (8005784 <__libc_init_array+0x40>)
 800575c:	4c0a      	ldr	r4, [pc, #40]	; (8005788 <__libc_init_array+0x44>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	08008984 	.word	0x08008984
 8005780:	08008984 	.word	0x08008984
 8005784:	08008984 	.word	0x08008984
 8005788:	08008988 	.word	0x08008988

0800578c <memset>:
 800578c:	4603      	mov	r3, r0
 800578e:	4402      	add	r2, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <__cvt>:
 800579c:	2b00      	cmp	r3, #0
 800579e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a2:	461f      	mov	r7, r3
 80057a4:	bfbb      	ittet	lt
 80057a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80057aa:	461f      	movlt	r7, r3
 80057ac:	2300      	movge	r3, #0
 80057ae:	232d      	movlt	r3, #45	; 0x2d
 80057b0:	b088      	sub	sp, #32
 80057b2:	4614      	mov	r4, r2
 80057b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057b8:	7013      	strb	r3, [r2, #0]
 80057ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80057c0:	f023 0820 	bic.w	r8, r3, #32
 80057c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057c8:	d005      	beq.n	80057d6 <__cvt+0x3a>
 80057ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057ce:	d100      	bne.n	80057d2 <__cvt+0x36>
 80057d0:	3501      	adds	r5, #1
 80057d2:	2302      	movs	r3, #2
 80057d4:	e000      	b.n	80057d8 <__cvt+0x3c>
 80057d6:	2303      	movs	r3, #3
 80057d8:	aa07      	add	r2, sp, #28
 80057da:	9204      	str	r2, [sp, #16]
 80057dc:	aa06      	add	r2, sp, #24
 80057de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057e2:	e9cd 3500 	strd	r3, r5, [sp]
 80057e6:	4622      	mov	r2, r4
 80057e8:	463b      	mov	r3, r7
 80057ea:	f000 fce5 	bl	80061b8 <_dtoa_r>
 80057ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057f2:	4606      	mov	r6, r0
 80057f4:	d102      	bne.n	80057fc <__cvt+0x60>
 80057f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057f8:	07db      	lsls	r3, r3, #31
 80057fa:	d522      	bpl.n	8005842 <__cvt+0xa6>
 80057fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005800:	eb06 0905 	add.w	r9, r6, r5
 8005804:	d110      	bne.n	8005828 <__cvt+0x8c>
 8005806:	7833      	ldrb	r3, [r6, #0]
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d10a      	bne.n	8005822 <__cvt+0x86>
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	4620      	mov	r0, r4
 8005812:	4639      	mov	r1, r7
 8005814:	f7fb f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8005818:	b918      	cbnz	r0, 8005822 <__cvt+0x86>
 800581a:	f1c5 0501 	rsb	r5, r5, #1
 800581e:	f8ca 5000 	str.w	r5, [sl]
 8005822:	f8da 3000 	ldr.w	r3, [sl]
 8005826:	4499      	add	r9, r3
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	4620      	mov	r0, r4
 800582e:	4639      	mov	r1, r7
 8005830:	f7fb f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8005834:	b108      	cbz	r0, 800583a <__cvt+0x9e>
 8005836:	f8cd 901c 	str.w	r9, [sp, #28]
 800583a:	2230      	movs	r2, #48	; 0x30
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	454b      	cmp	r3, r9
 8005840:	d307      	bcc.n	8005852 <__cvt+0xb6>
 8005842:	4630      	mov	r0, r6
 8005844:	9b07      	ldr	r3, [sp, #28]
 8005846:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005848:	1b9b      	subs	r3, r3, r6
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	b008      	add	sp, #32
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	9107      	str	r1, [sp, #28]
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e7f0      	b.n	800583c <__cvt+0xa0>

0800585a <__exponent>:
 800585a:	4603      	mov	r3, r0
 800585c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800585e:	2900      	cmp	r1, #0
 8005860:	f803 2b02 	strb.w	r2, [r3], #2
 8005864:	bfb6      	itet	lt
 8005866:	222d      	movlt	r2, #45	; 0x2d
 8005868:	222b      	movge	r2, #43	; 0x2b
 800586a:	4249      	neglt	r1, r1
 800586c:	2909      	cmp	r1, #9
 800586e:	7042      	strb	r2, [r0, #1]
 8005870:	dd2b      	ble.n	80058ca <__exponent+0x70>
 8005872:	f10d 0407 	add.w	r4, sp, #7
 8005876:	46a4      	mov	ip, r4
 8005878:	270a      	movs	r7, #10
 800587a:	fb91 f6f7 	sdiv	r6, r1, r7
 800587e:	460a      	mov	r2, r1
 8005880:	46a6      	mov	lr, r4
 8005882:	fb07 1516 	mls	r5, r7, r6, r1
 8005886:	2a63      	cmp	r2, #99	; 0x63
 8005888:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800588c:	4631      	mov	r1, r6
 800588e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005892:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005896:	dcf0      	bgt.n	800587a <__exponent+0x20>
 8005898:	3130      	adds	r1, #48	; 0x30
 800589a:	f1ae 0502 	sub.w	r5, lr, #2
 800589e:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058a2:	4629      	mov	r1, r5
 80058a4:	1c44      	adds	r4, r0, #1
 80058a6:	4561      	cmp	r1, ip
 80058a8:	d30a      	bcc.n	80058c0 <__exponent+0x66>
 80058aa:	f10d 0209 	add.w	r2, sp, #9
 80058ae:	eba2 020e 	sub.w	r2, r2, lr
 80058b2:	4565      	cmp	r5, ip
 80058b4:	bf88      	it	hi
 80058b6:	2200      	movhi	r2, #0
 80058b8:	4413      	add	r3, r2
 80058ba:	1a18      	subs	r0, r3, r0
 80058bc:	b003      	add	sp, #12
 80058be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058c8:	e7ed      	b.n	80058a6 <__exponent+0x4c>
 80058ca:	2330      	movs	r3, #48	; 0x30
 80058cc:	3130      	adds	r1, #48	; 0x30
 80058ce:	7083      	strb	r3, [r0, #2]
 80058d0:	70c1      	strb	r1, [r0, #3]
 80058d2:	1d03      	adds	r3, r0, #4
 80058d4:	e7f1      	b.n	80058ba <__exponent+0x60>
	...

080058d8 <_printf_float>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	b091      	sub	sp, #68	; 0x44
 80058de:	460c      	mov	r4, r1
 80058e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058e4:	4616      	mov	r6, r2
 80058e6:	461f      	mov	r7, r3
 80058e8:	4605      	mov	r5, r0
 80058ea:	f001 fa53 	bl	8006d94 <_localeconv_r>
 80058ee:	6803      	ldr	r3, [r0, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	9309      	str	r3, [sp, #36]	; 0x24
 80058f4:	f7fa fc2c 	bl	8000150 <strlen>
 80058f8:	2300      	movs	r3, #0
 80058fa:	930e      	str	r3, [sp, #56]	; 0x38
 80058fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005900:	900a      	str	r0, [sp, #40]	; 0x28
 8005902:	3307      	adds	r3, #7
 8005904:	f023 0307 	bic.w	r3, r3, #7
 8005908:	f103 0208 	add.w	r2, r3, #8
 800590c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005910:	f8d4 b000 	ldr.w	fp, [r4]
 8005914:	f8c8 2000 	str.w	r2, [r8]
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005920:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005924:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005928:	930b      	str	r3, [sp, #44]	; 0x2c
 800592a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800592e:	4640      	mov	r0, r8
 8005930:	4b9c      	ldr	r3, [pc, #624]	; (8005ba4 <_printf_float+0x2cc>)
 8005932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005934:	f7fb f86a 	bl	8000a0c <__aeabi_dcmpun>
 8005938:	bb70      	cbnz	r0, 8005998 <_printf_float+0xc0>
 800593a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593e:	4640      	mov	r0, r8
 8005940:	4b98      	ldr	r3, [pc, #608]	; (8005ba4 <_printf_float+0x2cc>)
 8005942:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005944:	f7fb f844 	bl	80009d0 <__aeabi_dcmple>
 8005948:	bb30      	cbnz	r0, 8005998 <_printf_float+0xc0>
 800594a:	2200      	movs	r2, #0
 800594c:	2300      	movs	r3, #0
 800594e:	4640      	mov	r0, r8
 8005950:	4651      	mov	r1, sl
 8005952:	f7fb f833 	bl	80009bc <__aeabi_dcmplt>
 8005956:	b110      	cbz	r0, 800595e <_printf_float+0x86>
 8005958:	232d      	movs	r3, #45	; 0x2d
 800595a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595e:	4b92      	ldr	r3, [pc, #584]	; (8005ba8 <_printf_float+0x2d0>)
 8005960:	4892      	ldr	r0, [pc, #584]	; (8005bac <_printf_float+0x2d4>)
 8005962:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005966:	bf94      	ite	ls
 8005968:	4698      	movls	r8, r3
 800596a:	4680      	movhi	r8, r0
 800596c:	2303      	movs	r3, #3
 800596e:	f04f 0a00 	mov.w	sl, #0
 8005972:	6123      	str	r3, [r4, #16]
 8005974:	f02b 0304 	bic.w	r3, fp, #4
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	4633      	mov	r3, r6
 800597c:	4621      	mov	r1, r4
 800597e:	4628      	mov	r0, r5
 8005980:	9700      	str	r7, [sp, #0]
 8005982:	aa0f      	add	r2, sp, #60	; 0x3c
 8005984:	f000 f9d4 	bl	8005d30 <_printf_common>
 8005988:	3001      	adds	r0, #1
 800598a:	f040 8090 	bne.w	8005aae <_printf_float+0x1d6>
 800598e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005992:	b011      	add	sp, #68	; 0x44
 8005994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005998:	4642      	mov	r2, r8
 800599a:	4653      	mov	r3, sl
 800599c:	4640      	mov	r0, r8
 800599e:	4651      	mov	r1, sl
 80059a0:	f7fb f834 	bl	8000a0c <__aeabi_dcmpun>
 80059a4:	b148      	cbz	r0, 80059ba <_printf_float+0xe2>
 80059a6:	f1ba 0f00 	cmp.w	sl, #0
 80059aa:	bfb8      	it	lt
 80059ac:	232d      	movlt	r3, #45	; 0x2d
 80059ae:	4880      	ldr	r0, [pc, #512]	; (8005bb0 <_printf_float+0x2d8>)
 80059b0:	bfb8      	it	lt
 80059b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059b6:	4b7f      	ldr	r3, [pc, #508]	; (8005bb4 <_printf_float+0x2dc>)
 80059b8:	e7d3      	b.n	8005962 <_printf_float+0x8a>
 80059ba:	6863      	ldr	r3, [r4, #4]
 80059bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	d142      	bne.n	8005a4a <_printf_float+0x172>
 80059c4:	2306      	movs	r3, #6
 80059c6:	6063      	str	r3, [r4, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	9206      	str	r2, [sp, #24]
 80059cc:	aa0e      	add	r2, sp, #56	; 0x38
 80059ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80059d2:	aa0d      	add	r2, sp, #52	; 0x34
 80059d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059d8:	9203      	str	r2, [sp, #12]
 80059da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	4642      	mov	r2, r8
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4628      	mov	r0, r5
 80059ec:	4653      	mov	r3, sl
 80059ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80059f0:	f7ff fed4 	bl	800579c <__cvt>
 80059f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059f6:	4680      	mov	r8, r0
 80059f8:	2947      	cmp	r1, #71	; 0x47
 80059fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059fc:	d108      	bne.n	8005a10 <_printf_float+0x138>
 80059fe:	1cc8      	adds	r0, r1, #3
 8005a00:	db02      	blt.n	8005a08 <_printf_float+0x130>
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	4299      	cmp	r1, r3
 8005a06:	dd40      	ble.n	8005a8a <_printf_float+0x1b2>
 8005a08:	f1a9 0902 	sub.w	r9, r9, #2
 8005a0c:	fa5f f989 	uxtb.w	r9, r9
 8005a10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a14:	d81f      	bhi.n	8005a56 <_printf_float+0x17e>
 8005a16:	464a      	mov	r2, r9
 8005a18:	3901      	subs	r1, #1
 8005a1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a1e:	910d      	str	r1, [sp, #52]	; 0x34
 8005a20:	f7ff ff1b 	bl	800585a <__exponent>
 8005a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a26:	4682      	mov	sl, r0
 8005a28:	1813      	adds	r3, r2, r0
 8005a2a:	2a01      	cmp	r2, #1
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	dc02      	bgt.n	8005a36 <_printf_float+0x15e>
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	07d2      	lsls	r2, r2, #31
 8005a34:	d501      	bpl.n	8005a3a <_printf_float+0x162>
 8005a36:	3301      	adds	r3, #1
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d09b      	beq.n	800597a <_printf_float+0xa2>
 8005a42:	232d      	movs	r3, #45	; 0x2d
 8005a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a48:	e797      	b.n	800597a <_printf_float+0xa2>
 8005a4a:	2947      	cmp	r1, #71	; 0x47
 8005a4c:	d1bc      	bne.n	80059c8 <_printf_float+0xf0>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ba      	bne.n	80059c8 <_printf_float+0xf0>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e7b7      	b.n	80059c6 <_printf_float+0xee>
 8005a56:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a5a:	d118      	bne.n	8005a8e <_printf_float+0x1b6>
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	dd0b      	ble.n	8005a7a <_printf_float+0x1a2>
 8005a62:	6121      	str	r1, [r4, #16]
 8005a64:	b913      	cbnz	r3, 8005a6c <_printf_float+0x194>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	07d0      	lsls	r0, r2, #31
 8005a6a:	d502      	bpl.n	8005a72 <_printf_float+0x19a>
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	440b      	add	r3, r1
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	f04f 0a00 	mov.w	sl, #0
 8005a76:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a78:	e7df      	b.n	8005a3a <_printf_float+0x162>
 8005a7a:	b913      	cbnz	r3, 8005a82 <_printf_float+0x1aa>
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	07d2      	lsls	r2, r2, #31
 8005a80:	d501      	bpl.n	8005a86 <_printf_float+0x1ae>
 8005a82:	3302      	adds	r3, #2
 8005a84:	e7f4      	b.n	8005a70 <_printf_float+0x198>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e7f2      	b.n	8005a70 <_printf_float+0x198>
 8005a8a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a90:	4299      	cmp	r1, r3
 8005a92:	db05      	blt.n	8005aa0 <_printf_float+0x1c8>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	6121      	str	r1, [r4, #16]
 8005a98:	07d8      	lsls	r0, r3, #31
 8005a9a:	d5ea      	bpl.n	8005a72 <_printf_float+0x19a>
 8005a9c:	1c4b      	adds	r3, r1, #1
 8005a9e:	e7e7      	b.n	8005a70 <_printf_float+0x198>
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	bfcc      	ite	gt
 8005aa4:	2201      	movgt	r2, #1
 8005aa6:	f1c1 0202 	rsble	r2, r1, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	e7e0      	b.n	8005a70 <_printf_float+0x198>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	055a      	lsls	r2, r3, #21
 8005ab2:	d407      	bmi.n	8005ac4 <_printf_float+0x1ec>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d12b      	bne.n	8005b1a <_printf_float+0x242>
 8005ac2:	e764      	b.n	800598e <_printf_float+0xb6>
 8005ac4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ac8:	f240 80dd 	bls.w	8005c86 <_printf_float+0x3ae>
 8005acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f7fa ff68 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d033      	beq.n	8005b44 <_printf_float+0x26c>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <_printf_float+0x2e0>)
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f af51 	beq.w	800598e <_printf_float+0xb6>
 8005aec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005af0:	429a      	cmp	r2, r3
 8005af2:	db02      	blt.n	8005afa <_printf_float+0x222>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	07d8      	lsls	r0, r3, #31
 8005af8:	d50f      	bpl.n	8005b1a <_printf_float+0x242>
 8005afa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f af42 	beq.w	800598e <_printf_float+0xb6>
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	f104 091a 	add.w	r9, r4, #26
 8005b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4543      	cmp	r3, r8
 8005b18:	dc09      	bgt.n	8005b2e <_printf_float+0x256>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	f100 8102 	bmi.w	8005d26 <_printf_float+0x44e>
 8005b22:	68e0      	ldr	r0, [r4, #12]
 8005b24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b26:	4298      	cmp	r0, r3
 8005b28:	bfb8      	it	lt
 8005b2a:	4618      	movlt	r0, r3
 8005b2c:	e731      	b.n	8005992 <_printf_float+0xba>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	464a      	mov	r2, r9
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f af28 	beq.w	800598e <_printf_float+0xb6>
 8005b3e:	f108 0801 	add.w	r8, r8, #1
 8005b42:	e7e6      	b.n	8005b12 <_printf_float+0x23a>
 8005b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dc38      	bgt.n	8005bbc <_printf_float+0x2e4>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <_printf_float+0x2e0>)
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f af1a 	beq.w	800598e <_printf_float+0xb6>
 8005b5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	d102      	bne.n	8005b68 <_printf_float+0x290>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	07d9      	lsls	r1, r3, #31
 8005b66:	d5d8      	bpl.n	8005b1a <_printf_float+0x242>
 8005b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f af0b 	beq.w	800598e <_printf_float+0xb6>
 8005b78:	f04f 0900 	mov.w	r9, #0
 8005b7c:	f104 0a1a 	add.w	sl, r4, #26
 8005b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b82:	425b      	negs	r3, r3
 8005b84:	454b      	cmp	r3, r9
 8005b86:	dc01      	bgt.n	8005b8c <_printf_float+0x2b4>
 8005b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b8a:	e794      	b.n	8005ab6 <_printf_float+0x1de>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4652      	mov	r2, sl
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f aef9 	beq.w	800598e <_printf_float+0xb6>
 8005b9c:	f109 0901 	add.w	r9, r9, #1
 8005ba0:	e7ee      	b.n	8005b80 <_printf_float+0x2a8>
 8005ba2:	bf00      	nop
 8005ba4:	7fefffff 	.word	0x7fefffff
 8005ba8:	080085ac 	.word	0x080085ac
 8005bac:	080085b0 	.word	0x080085b0
 8005bb0:	080085b8 	.word	0x080085b8
 8005bb4:	080085b4 	.word	0x080085b4
 8005bb8:	080085bc 	.word	0x080085bc
 8005bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bfa8      	it	ge
 8005bc4:	461a      	movge	r2, r3
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	4691      	mov	r9, r2
 8005bca:	dc37      	bgt.n	8005c3c <_printf_float+0x364>
 8005bcc:	f04f 0b00 	mov.w	fp, #0
 8005bd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bd4:	f104 021a 	add.w	r2, r4, #26
 8005bd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005bdc:	ebaa 0309 	sub.w	r3, sl, r9
 8005be0:	455b      	cmp	r3, fp
 8005be2:	dc33      	bgt.n	8005c4c <_printf_float+0x374>
 8005be4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005be8:	429a      	cmp	r2, r3
 8005bea:	db3b      	blt.n	8005c64 <_printf_float+0x38c>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	07da      	lsls	r2, r3, #31
 8005bf0:	d438      	bmi.n	8005c64 <_printf_float+0x38c>
 8005bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bf6:	eba3 020a 	sub.w	r2, r3, sl
 8005bfa:	eba3 0901 	sub.w	r9, r3, r1
 8005bfe:	4591      	cmp	r9, r2
 8005c00:	bfa8      	it	ge
 8005c02:	4691      	movge	r9, r2
 8005c04:	f1b9 0f00 	cmp.w	r9, #0
 8005c08:	dc34      	bgt.n	8005c74 <_printf_float+0x39c>
 8005c0a:	f04f 0800 	mov.w	r8, #0
 8005c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c12:	f104 0a1a 	add.w	sl, r4, #26
 8005c16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	eba3 0309 	sub.w	r3, r3, r9
 8005c20:	4543      	cmp	r3, r8
 8005c22:	f77f af7a 	ble.w	8005b1a <_printf_float+0x242>
 8005c26:	2301      	movs	r3, #1
 8005c28:	4652      	mov	r2, sl
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	f43f aeac 	beq.w	800598e <_printf_float+0xb6>
 8005c36:	f108 0801 	add.w	r8, r8, #1
 8005c3a:	e7ec      	b.n	8005c16 <_printf_float+0x33e>
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4642      	mov	r2, r8
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	d1c0      	bne.n	8005bcc <_printf_float+0x2f4>
 8005c4a:	e6a0      	b.n	800598e <_printf_float+0xb6>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4628      	mov	r0, r5
 8005c52:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	f43f ae99 	beq.w	800598e <_printf_float+0xb6>
 8005c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c5e:	f10b 0b01 	add.w	fp, fp, #1
 8005c62:	e7b9      	b.n	8005bd8 <_printf_float+0x300>
 8005c64:	4631      	mov	r1, r6
 8005c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d1bf      	bne.n	8005bf2 <_printf_float+0x31a>
 8005c72:	e68c      	b.n	800598e <_printf_float+0xb6>
 8005c74:	464b      	mov	r3, r9
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	eb08 020a 	add.w	r2, r8, sl
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	d1c2      	bne.n	8005c0a <_printf_float+0x332>
 8005c84:	e683      	b.n	800598e <_printf_float+0xb6>
 8005c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c88:	2a01      	cmp	r2, #1
 8005c8a:	dc01      	bgt.n	8005c90 <_printf_float+0x3b8>
 8005c8c:	07db      	lsls	r3, r3, #31
 8005c8e:	d537      	bpl.n	8005d00 <_printf_float+0x428>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4642      	mov	r2, r8
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f ae77 	beq.w	800598e <_printf_float+0xb6>
 8005ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f ae6f 	beq.w	800598e <_printf_float+0xb6>
 8005cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f7fa fe76 	bl	80009a8 <__aeabi_dcmpeq>
 8005cbc:	b9d8      	cbnz	r0, 8005cf6 <_printf_float+0x41e>
 8005cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc0:	f108 0201 	add.w	r2, r8, #1
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b8      	blx	r7
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d10e      	bne.n	8005cee <_printf_float+0x416>
 8005cd0:	e65d      	b.n	800598e <_printf_float+0xb6>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	464a      	mov	r2, r9
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f ae56 	beq.w	800598e <_printf_float+0xb6>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	4543      	cmp	r3, r8
 8005cec:	dcf1      	bgt.n	8005cd2 <_printf_float+0x3fa>
 8005cee:	4653      	mov	r3, sl
 8005cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cf4:	e6e0      	b.n	8005ab8 <_printf_float+0x1e0>
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	f104 091a 	add.w	r9, r4, #26
 8005cfe:	e7f2      	b.n	8005ce6 <_printf_float+0x40e>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4642      	mov	r2, r8
 8005d04:	e7df      	b.n	8005cc6 <_printf_float+0x3ee>
 8005d06:	2301      	movs	r3, #1
 8005d08:	464a      	mov	r2, r9
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f ae3c 	beq.w	800598e <_printf_float+0xb6>
 8005d16:	f108 0801 	add.w	r8, r8, #1
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d1e:	1a5b      	subs	r3, r3, r1
 8005d20:	4543      	cmp	r3, r8
 8005d22:	dcf0      	bgt.n	8005d06 <_printf_float+0x42e>
 8005d24:	e6fd      	b.n	8005b22 <_printf_float+0x24a>
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	f104 0919 	add.w	r9, r4, #25
 8005d2e:	e7f4      	b.n	8005d1a <_printf_float+0x442>

08005d30 <_printf_common>:
 8005d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	4616      	mov	r6, r2
 8005d36:	4699      	mov	r9, r3
 8005d38:	688a      	ldr	r2, [r1, #8]
 8005d3a:	690b      	ldr	r3, [r1, #16]
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	bfb8      	it	lt
 8005d42:	4613      	movlt	r3, r2
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d50:	b10a      	cbz	r2, 8005d56 <_printf_common+0x26>
 8005d52:	3301      	adds	r3, #1
 8005d54:	6033      	str	r3, [r6, #0]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	0699      	lsls	r1, r3, #26
 8005d5a:	bf42      	ittt	mi
 8005d5c:	6833      	ldrmi	r3, [r6, #0]
 8005d5e:	3302      	addmi	r3, #2
 8005d60:	6033      	strmi	r3, [r6, #0]
 8005d62:	6825      	ldr	r5, [r4, #0]
 8005d64:	f015 0506 	ands.w	r5, r5, #6
 8005d68:	d106      	bne.n	8005d78 <_printf_common+0x48>
 8005d6a:	f104 0a19 	add.w	sl, r4, #25
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	6832      	ldr	r2, [r6, #0]
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	dc28      	bgt.n	8005dca <_printf_common+0x9a>
 8005d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d7c:	1e13      	subs	r3, r2, #0
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	bf18      	it	ne
 8005d82:	2301      	movne	r3, #1
 8005d84:	0692      	lsls	r2, r2, #26
 8005d86:	d42d      	bmi.n	8005de4 <_printf_common+0xb4>
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d90:	47c0      	blx	r8
 8005d92:	3001      	adds	r0, #1
 8005d94:	d020      	beq.n	8005dd8 <_printf_common+0xa8>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	68e5      	ldr	r5, [r4, #12]
 8005d9a:	f003 0306 	and.w	r3, r3, #6
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	bf18      	it	ne
 8005da2:	2500      	movne	r5, #0
 8005da4:	6832      	ldr	r2, [r6, #0]
 8005da6:	f04f 0600 	mov.w	r6, #0
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	bf08      	it	eq
 8005dae:	1aad      	subeq	r5, r5, r2
 8005db0:	6922      	ldr	r2, [r4, #16]
 8005db2:	bf08      	it	eq
 8005db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005db8:	4293      	cmp	r3, r2
 8005dba:	bfc4      	itt	gt
 8005dbc:	1a9b      	subgt	r3, r3, r2
 8005dbe:	18ed      	addgt	r5, r5, r3
 8005dc0:	341a      	adds	r4, #26
 8005dc2:	42b5      	cmp	r5, r6
 8005dc4:	d11a      	bne.n	8005dfc <_printf_common+0xcc>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e008      	b.n	8005ddc <_printf_common+0xac>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4652      	mov	r2, sl
 8005dce:	4649      	mov	r1, r9
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	47c0      	blx	r8
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d103      	bne.n	8005de0 <_printf_common+0xb0>
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de0:	3501      	adds	r5, #1
 8005de2:	e7c4      	b.n	8005d6e <_printf_common+0x3e>
 8005de4:	2030      	movs	r0, #48	; 0x30
 8005de6:	18e1      	adds	r1, r4, r3
 8005de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005df2:	4422      	add	r2, r4
 8005df4:	3302      	adds	r3, #2
 8005df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dfa:	e7c5      	b.n	8005d88 <_printf_common+0x58>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4649      	mov	r1, r9
 8005e02:	4638      	mov	r0, r7
 8005e04:	47c0      	blx	r8
 8005e06:	3001      	adds	r0, #1
 8005e08:	d0e6      	beq.n	8005dd8 <_printf_common+0xa8>
 8005e0a:	3601      	adds	r6, #1
 8005e0c:	e7d9      	b.n	8005dc2 <_printf_common+0x92>
	...

08005e10 <_printf_i>:
 8005e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	7e0f      	ldrb	r7, [r1, #24]
 8005e16:	4691      	mov	r9, r2
 8005e18:	2f78      	cmp	r7, #120	; 0x78
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	469a      	mov	sl, r3
 8005e20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e26:	d807      	bhi.n	8005e38 <_printf_i+0x28>
 8005e28:	2f62      	cmp	r7, #98	; 0x62
 8005e2a:	d80a      	bhi.n	8005e42 <_printf_i+0x32>
 8005e2c:	2f00      	cmp	r7, #0
 8005e2e:	f000 80d9 	beq.w	8005fe4 <_printf_i+0x1d4>
 8005e32:	2f58      	cmp	r7, #88	; 0x58
 8005e34:	f000 80a4 	beq.w	8005f80 <_printf_i+0x170>
 8005e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e40:	e03a      	b.n	8005eb8 <_printf_i+0xa8>
 8005e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e46:	2b15      	cmp	r3, #21
 8005e48:	d8f6      	bhi.n	8005e38 <_printf_i+0x28>
 8005e4a:	a101      	add	r1, pc, #4	; (adr r1, 8005e50 <_printf_i+0x40>)
 8005e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e50:	08005ea9 	.word	0x08005ea9
 8005e54:	08005ebd 	.word	0x08005ebd
 8005e58:	08005e39 	.word	0x08005e39
 8005e5c:	08005e39 	.word	0x08005e39
 8005e60:	08005e39 	.word	0x08005e39
 8005e64:	08005e39 	.word	0x08005e39
 8005e68:	08005ebd 	.word	0x08005ebd
 8005e6c:	08005e39 	.word	0x08005e39
 8005e70:	08005e39 	.word	0x08005e39
 8005e74:	08005e39 	.word	0x08005e39
 8005e78:	08005e39 	.word	0x08005e39
 8005e7c:	08005fcb 	.word	0x08005fcb
 8005e80:	08005eed 	.word	0x08005eed
 8005e84:	08005fad 	.word	0x08005fad
 8005e88:	08005e39 	.word	0x08005e39
 8005e8c:	08005e39 	.word	0x08005e39
 8005e90:	08005fed 	.word	0x08005fed
 8005e94:	08005e39 	.word	0x08005e39
 8005e98:	08005eed 	.word	0x08005eed
 8005e9c:	08005e39 	.word	0x08005e39
 8005ea0:	08005e39 	.word	0x08005e39
 8005ea4:	08005fb5 	.word	0x08005fb5
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	1d1a      	adds	r2, r3, #4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0a4      	b.n	8006006 <_printf_i+0x1f6>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	6829      	ldr	r1, [r5, #0]
 8005ec0:	0606      	lsls	r6, r0, #24
 8005ec2:	f101 0304 	add.w	r3, r1, #4
 8005ec6:	d50a      	bpl.n	8005ede <_printf_i+0xce>
 8005ec8:	680e      	ldr	r6, [r1, #0]
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	2e00      	cmp	r6, #0
 8005ece:	da03      	bge.n	8005ed8 <_printf_i+0xc8>
 8005ed0:	232d      	movs	r3, #45	; 0x2d
 8005ed2:	4276      	negs	r6, r6
 8005ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed8:	230a      	movs	r3, #10
 8005eda:	485e      	ldr	r0, [pc, #376]	; (8006054 <_printf_i+0x244>)
 8005edc:	e019      	b.n	8005f12 <_printf_i+0x102>
 8005ede:	680e      	ldr	r6, [r1, #0]
 8005ee0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	bf18      	it	ne
 8005ee8:	b236      	sxthne	r6, r6
 8005eea:	e7ef      	b.n	8005ecc <_printf_i+0xbc>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	1d19      	adds	r1, r3, #4
 8005ef2:	6029      	str	r1, [r5, #0]
 8005ef4:	0601      	lsls	r1, r0, #24
 8005ef6:	d501      	bpl.n	8005efc <_printf_i+0xec>
 8005ef8:	681e      	ldr	r6, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <_printf_i+0xf2>
 8005efc:	0646      	lsls	r6, r0, #25
 8005efe:	d5fb      	bpl.n	8005ef8 <_printf_i+0xe8>
 8005f00:	881e      	ldrh	r6, [r3, #0]
 8005f02:	2f6f      	cmp	r7, #111	; 0x6f
 8005f04:	bf0c      	ite	eq
 8005f06:	2308      	moveq	r3, #8
 8005f08:	230a      	movne	r3, #10
 8005f0a:	4852      	ldr	r0, [pc, #328]	; (8006054 <_printf_i+0x244>)
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f12:	6865      	ldr	r5, [r4, #4]
 8005f14:	2d00      	cmp	r5, #0
 8005f16:	bfa8      	it	ge
 8005f18:	6821      	ldrge	r1, [r4, #0]
 8005f1a:	60a5      	str	r5, [r4, #8]
 8005f1c:	bfa4      	itt	ge
 8005f1e:	f021 0104 	bicge.w	r1, r1, #4
 8005f22:	6021      	strge	r1, [r4, #0]
 8005f24:	b90e      	cbnz	r6, 8005f2a <_printf_i+0x11a>
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	d04d      	beq.n	8005fc6 <_printf_i+0x1b6>
 8005f2a:	4615      	mov	r5, r2
 8005f2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f30:	fb03 6711 	mls	r7, r3, r1, r6
 8005f34:	5dc7      	ldrb	r7, [r0, r7]
 8005f36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f3a:	4637      	mov	r7, r6
 8005f3c:	42bb      	cmp	r3, r7
 8005f3e:	460e      	mov	r6, r1
 8005f40:	d9f4      	bls.n	8005f2c <_printf_i+0x11c>
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d10b      	bne.n	8005f5e <_printf_i+0x14e>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	07de      	lsls	r6, r3, #31
 8005f4a:	d508      	bpl.n	8005f5e <_printf_i+0x14e>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	6861      	ldr	r1, [r4, #4]
 8005f50:	4299      	cmp	r1, r3
 8005f52:	bfde      	ittt	le
 8005f54:	2330      	movle	r3, #48	; 0x30
 8005f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f5e:	1b52      	subs	r2, r2, r5
 8005f60:	6122      	str	r2, [r4, #16]
 8005f62:	464b      	mov	r3, r9
 8005f64:	4621      	mov	r1, r4
 8005f66:	4640      	mov	r0, r8
 8005f68:	f8cd a000 	str.w	sl, [sp]
 8005f6c:	aa03      	add	r2, sp, #12
 8005f6e:	f7ff fedf 	bl	8005d30 <_printf_common>
 8005f72:	3001      	adds	r0, #1
 8005f74:	d14c      	bne.n	8006010 <_printf_i+0x200>
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f7a:	b004      	add	sp, #16
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	4834      	ldr	r0, [pc, #208]	; (8006054 <_printf_i+0x244>)
 8005f82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f86:	6829      	ldr	r1, [r5, #0]
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f8e:	6029      	str	r1, [r5, #0]
 8005f90:	061d      	lsls	r5, r3, #24
 8005f92:	d514      	bpl.n	8005fbe <_printf_i+0x1ae>
 8005f94:	07df      	lsls	r7, r3, #31
 8005f96:	bf44      	itt	mi
 8005f98:	f043 0320 	orrmi.w	r3, r3, #32
 8005f9c:	6023      	strmi	r3, [r4, #0]
 8005f9e:	b91e      	cbnz	r6, 8005fa8 <_printf_i+0x198>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	f023 0320 	bic.w	r3, r3, #32
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	2310      	movs	r3, #16
 8005faa:	e7af      	b.n	8005f0c <_printf_i+0xfc>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	f043 0320 	orr.w	r3, r3, #32
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	2378      	movs	r3, #120	; 0x78
 8005fb6:	4828      	ldr	r0, [pc, #160]	; (8006058 <_printf_i+0x248>)
 8005fb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fbc:	e7e3      	b.n	8005f86 <_printf_i+0x176>
 8005fbe:	0659      	lsls	r1, r3, #25
 8005fc0:	bf48      	it	mi
 8005fc2:	b2b6      	uxthmi	r6, r6
 8005fc4:	e7e6      	b.n	8005f94 <_printf_i+0x184>
 8005fc6:	4615      	mov	r5, r2
 8005fc8:	e7bb      	b.n	8005f42 <_printf_i+0x132>
 8005fca:	682b      	ldr	r3, [r5, #0]
 8005fcc:	6826      	ldr	r6, [r4, #0]
 8005fce:	1d18      	adds	r0, r3, #4
 8005fd0:	6961      	ldr	r1, [r4, #20]
 8005fd2:	6028      	str	r0, [r5, #0]
 8005fd4:	0635      	lsls	r5, r6, #24
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	d501      	bpl.n	8005fde <_printf_i+0x1ce>
 8005fda:	6019      	str	r1, [r3, #0]
 8005fdc:	e002      	b.n	8005fe4 <_printf_i+0x1d4>
 8005fde:	0670      	lsls	r0, r6, #25
 8005fe0:	d5fb      	bpl.n	8005fda <_printf_i+0x1ca>
 8005fe2:	8019      	strh	r1, [r3, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4615      	mov	r5, r2
 8005fe8:	6123      	str	r3, [r4, #16]
 8005fea:	e7ba      	b.n	8005f62 <_printf_i+0x152>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	1d1a      	adds	r2, r3, #4
 8005ff2:	602a      	str	r2, [r5, #0]
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f000 fed7 	bl	8006dac <memchr>
 8005ffe:	b108      	cbz	r0, 8006004 <_printf_i+0x1f4>
 8006000:	1b40      	subs	r0, r0, r5
 8006002:	6060      	str	r0, [r4, #4]
 8006004:	6863      	ldr	r3, [r4, #4]
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	2300      	movs	r3, #0
 800600a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600e:	e7a8      	b.n	8005f62 <_printf_i+0x152>
 8006010:	462a      	mov	r2, r5
 8006012:	4649      	mov	r1, r9
 8006014:	4640      	mov	r0, r8
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	47d0      	blx	sl
 800601a:	3001      	adds	r0, #1
 800601c:	d0ab      	beq.n	8005f76 <_printf_i+0x166>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	079b      	lsls	r3, r3, #30
 8006022:	d413      	bmi.n	800604c <_printf_i+0x23c>
 8006024:	68e0      	ldr	r0, [r4, #12]
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	4298      	cmp	r0, r3
 800602a:	bfb8      	it	lt
 800602c:	4618      	movlt	r0, r3
 800602e:	e7a4      	b.n	8005f7a <_printf_i+0x16a>
 8006030:	2301      	movs	r3, #1
 8006032:	4632      	mov	r2, r6
 8006034:	4649      	mov	r1, r9
 8006036:	4640      	mov	r0, r8
 8006038:	47d0      	blx	sl
 800603a:	3001      	adds	r0, #1
 800603c:	d09b      	beq.n	8005f76 <_printf_i+0x166>
 800603e:	3501      	adds	r5, #1
 8006040:	68e3      	ldr	r3, [r4, #12]
 8006042:	9903      	ldr	r1, [sp, #12]
 8006044:	1a5b      	subs	r3, r3, r1
 8006046:	42ab      	cmp	r3, r5
 8006048:	dcf2      	bgt.n	8006030 <_printf_i+0x220>
 800604a:	e7eb      	b.n	8006024 <_printf_i+0x214>
 800604c:	2500      	movs	r5, #0
 800604e:	f104 0619 	add.w	r6, r4, #25
 8006052:	e7f5      	b.n	8006040 <_printf_i+0x230>
 8006054:	080085be 	.word	0x080085be
 8006058:	080085cf 	.word	0x080085cf

0800605c <siprintf>:
 800605c:	b40e      	push	{r1, r2, r3}
 800605e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006062:	b500      	push	{lr}
 8006064:	b09c      	sub	sp, #112	; 0x70
 8006066:	ab1d      	add	r3, sp, #116	; 0x74
 8006068:	9002      	str	r0, [sp, #8]
 800606a:	9006      	str	r0, [sp, #24]
 800606c:	9107      	str	r1, [sp, #28]
 800606e:	9104      	str	r1, [sp, #16]
 8006070:	4808      	ldr	r0, [pc, #32]	; (8006094 <siprintf+0x38>)
 8006072:	4909      	ldr	r1, [pc, #36]	; (8006098 <siprintf+0x3c>)
 8006074:	f853 2b04 	ldr.w	r2, [r3], #4
 8006078:	9105      	str	r1, [sp, #20]
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	a902      	add	r1, sp, #8
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	f001 fb7e 	bl	8007780 <_svfiprintf_r>
 8006084:	2200      	movs	r2, #0
 8006086:	9b02      	ldr	r3, [sp, #8]
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	b01c      	add	sp, #112	; 0x70
 800608c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006090:	b003      	add	sp, #12
 8006092:	4770      	bx	lr
 8006094:	20000018 	.word	0x20000018
 8006098:	ffff0208 	.word	0xffff0208

0800609c <quorem>:
 800609c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	6903      	ldr	r3, [r0, #16]
 80060a2:	690c      	ldr	r4, [r1, #16]
 80060a4:	4607      	mov	r7, r0
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	f2c0 8082 	blt.w	80061b0 <quorem+0x114>
 80060ac:	3c01      	subs	r4, #1
 80060ae:	f100 0514 	add.w	r5, r0, #20
 80060b2:	f101 0814 	add.w	r8, r1, #20
 80060b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c4:	3301      	adds	r3, #1
 80060c6:	429a      	cmp	r2, r3
 80060c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80060cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060d4:	d331      	bcc.n	800613a <quorem+0x9e>
 80060d6:	f04f 0e00 	mov.w	lr, #0
 80060da:	4640      	mov	r0, r8
 80060dc:	46ac      	mov	ip, r5
 80060de:	46f2      	mov	sl, lr
 80060e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80060e4:	b293      	uxth	r3, r2
 80060e6:	fb06 e303 	mla	r3, r6, r3, lr
 80060ea:	0c12      	lsrs	r2, r2, #16
 80060ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	fb06 e202 	mla	r2, r6, r2, lr
 80060f6:	ebaa 0303 	sub.w	r3, sl, r3
 80060fa:	f8dc a000 	ldr.w	sl, [ip]
 80060fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006102:	fa1f fa8a 	uxth.w	sl, sl
 8006106:	4453      	add	r3, sl
 8006108:	f8dc a000 	ldr.w	sl, [ip]
 800610c:	b292      	uxth	r2, r2
 800610e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006112:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006116:	b29b      	uxth	r3, r3
 8006118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800611c:	4581      	cmp	r9, r0
 800611e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006122:	f84c 3b04 	str.w	r3, [ip], #4
 8006126:	d2db      	bcs.n	80060e0 <quorem+0x44>
 8006128:	f855 300b 	ldr.w	r3, [r5, fp]
 800612c:	b92b      	cbnz	r3, 800613a <quorem+0x9e>
 800612e:	9b01      	ldr	r3, [sp, #4]
 8006130:	3b04      	subs	r3, #4
 8006132:	429d      	cmp	r5, r3
 8006134:	461a      	mov	r2, r3
 8006136:	d32f      	bcc.n	8006198 <quorem+0xfc>
 8006138:	613c      	str	r4, [r7, #16]
 800613a:	4638      	mov	r0, r7
 800613c:	f001 f8d0 	bl	80072e0 <__mcmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	db25      	blt.n	8006190 <quorem+0xf4>
 8006144:	4628      	mov	r0, r5
 8006146:	f04f 0c00 	mov.w	ip, #0
 800614a:	3601      	adds	r6, #1
 800614c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006150:	f8d0 e000 	ldr.w	lr, [r0]
 8006154:	b28b      	uxth	r3, r1
 8006156:	ebac 0303 	sub.w	r3, ip, r3
 800615a:	fa1f f28e 	uxth.w	r2, lr
 800615e:	4413      	add	r3, r2
 8006160:	0c0a      	lsrs	r2, r1, #16
 8006162:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006166:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800616a:	b29b      	uxth	r3, r3
 800616c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006170:	45c1      	cmp	r9, r8
 8006172:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006176:	f840 3b04 	str.w	r3, [r0], #4
 800617a:	d2e7      	bcs.n	800614c <quorem+0xb0>
 800617c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006180:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006184:	b922      	cbnz	r2, 8006190 <quorem+0xf4>
 8006186:	3b04      	subs	r3, #4
 8006188:	429d      	cmp	r5, r3
 800618a:	461a      	mov	r2, r3
 800618c:	d30a      	bcc.n	80061a4 <quorem+0x108>
 800618e:	613c      	str	r4, [r7, #16]
 8006190:	4630      	mov	r0, r6
 8006192:	b003      	add	sp, #12
 8006194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	3b04      	subs	r3, #4
 800619c:	2a00      	cmp	r2, #0
 800619e:	d1cb      	bne.n	8006138 <quorem+0x9c>
 80061a0:	3c01      	subs	r4, #1
 80061a2:	e7c6      	b.n	8006132 <quorem+0x96>
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	3b04      	subs	r3, #4
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	d1f0      	bne.n	800618e <quorem+0xf2>
 80061ac:	3c01      	subs	r4, #1
 80061ae:	e7eb      	b.n	8006188 <quorem+0xec>
 80061b0:	2000      	movs	r0, #0
 80061b2:	e7ee      	b.n	8006192 <quorem+0xf6>
 80061b4:	0000      	movs	r0, r0
	...

080061b8 <_dtoa_r>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4616      	mov	r6, r2
 80061be:	461f      	mov	r7, r3
 80061c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061c2:	b099      	sub	sp, #100	; 0x64
 80061c4:	4605      	mov	r5, r0
 80061c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80061ce:	b974      	cbnz	r4, 80061ee <_dtoa_r+0x36>
 80061d0:	2010      	movs	r0, #16
 80061d2:	f000 fde3 	bl	8006d9c <malloc>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6268      	str	r0, [r5, #36]	; 0x24
 80061da:	b920      	cbnz	r0, 80061e6 <_dtoa_r+0x2e>
 80061dc:	21ea      	movs	r1, #234	; 0xea
 80061de:	4ba8      	ldr	r3, [pc, #672]	; (8006480 <_dtoa_r+0x2c8>)
 80061e0:	48a8      	ldr	r0, [pc, #672]	; (8006484 <_dtoa_r+0x2cc>)
 80061e2:	f001 fbdd 	bl	80079a0 <__assert_func>
 80061e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061ea:	6004      	str	r4, [r0, #0]
 80061ec:	60c4      	str	r4, [r0, #12]
 80061ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	b151      	cbz	r1, 800620a <_dtoa_r+0x52>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	2301      	movs	r3, #1
 80061f8:	4093      	lsls	r3, r2
 80061fa:	604a      	str	r2, [r1, #4]
 80061fc:	608b      	str	r3, [r1, #8]
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 fe30 	bl	8006e64 <_Bfree>
 8006204:	2200      	movs	r2, #0
 8006206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	1e3b      	subs	r3, r7, #0
 800620c:	bfaf      	iteee	ge
 800620e:	2300      	movge	r3, #0
 8006210:	2201      	movlt	r2, #1
 8006212:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006216:	9305      	strlt	r3, [sp, #20]
 8006218:	bfa8      	it	ge
 800621a:	f8c8 3000 	strge.w	r3, [r8]
 800621e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006222:	4b99      	ldr	r3, [pc, #612]	; (8006488 <_dtoa_r+0x2d0>)
 8006224:	bfb8      	it	lt
 8006226:	f8c8 2000 	strlt.w	r2, [r8]
 800622a:	ea33 0309 	bics.w	r3, r3, r9
 800622e:	d119      	bne.n	8006264 <_dtoa_r+0xac>
 8006230:	f242 730f 	movw	r3, #9999	; 0x270f
 8006234:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800623c:	4333      	orrs	r3, r6
 800623e:	f000 857f 	beq.w	8006d40 <_dtoa_r+0xb88>
 8006242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006244:	b953      	cbnz	r3, 800625c <_dtoa_r+0xa4>
 8006246:	4b91      	ldr	r3, [pc, #580]	; (800648c <_dtoa_r+0x2d4>)
 8006248:	e022      	b.n	8006290 <_dtoa_r+0xd8>
 800624a:	4b91      	ldr	r3, [pc, #580]	; (8006490 <_dtoa_r+0x2d8>)
 800624c:	9303      	str	r3, [sp, #12]
 800624e:	3308      	adds	r3, #8
 8006250:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	9803      	ldr	r0, [sp, #12]
 8006256:	b019      	add	sp, #100	; 0x64
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	4b8b      	ldr	r3, [pc, #556]	; (800648c <_dtoa_r+0x2d4>)
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	3303      	adds	r3, #3
 8006262:	e7f5      	b.n	8006250 <_dtoa_r+0x98>
 8006264:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006268:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800626c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	f7fa fb98 	bl	80009a8 <__aeabi_dcmpeq>
 8006278:	4680      	mov	r8, r0
 800627a:	b158      	cbz	r0, 8006294 <_dtoa_r+0xdc>
 800627c:	2301      	movs	r3, #1
 800627e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8558 	beq.w	8006d3a <_dtoa_r+0xb82>
 800628a:	4882      	ldr	r0, [pc, #520]	; (8006494 <_dtoa_r+0x2dc>)
 800628c:	6018      	str	r0, [r3, #0]
 800628e:	1e43      	subs	r3, r0, #1
 8006290:	9303      	str	r3, [sp, #12]
 8006292:	e7df      	b.n	8006254 <_dtoa_r+0x9c>
 8006294:	ab16      	add	r3, sp, #88	; 0x58
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	ab17      	add	r3, sp, #92	; 0x5c
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4628      	mov	r0, r5
 800629e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062a2:	f001 f8c5 	bl	8007430 <__d2b>
 80062a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062aa:	4683      	mov	fp, r0
 80062ac:	2c00      	cmp	r4, #0
 80062ae:	d07f      	beq.n	80063b0 <_dtoa_r+0x1f8>
 80062b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80062ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80062c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80062c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80062ca:	2200      	movs	r2, #0
 80062cc:	4b72      	ldr	r3, [pc, #456]	; (8006498 <_dtoa_r+0x2e0>)
 80062ce:	f7f9 ff4b 	bl	8000168 <__aeabi_dsub>
 80062d2:	a365      	add	r3, pc, #404	; (adr r3, 8006468 <_dtoa_r+0x2b0>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7fa f8fe 	bl	80004d8 <__aeabi_dmul>
 80062dc:	a364      	add	r3, pc, #400	; (adr r3, 8006470 <_dtoa_r+0x2b8>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ff43 	bl	800016c <__adddf3>
 80062e6:	4606      	mov	r6, r0
 80062e8:	4620      	mov	r0, r4
 80062ea:	460f      	mov	r7, r1
 80062ec:	f7fa f88a 	bl	8000404 <__aeabi_i2d>
 80062f0:	a361      	add	r3, pc, #388	; (adr r3, 8006478 <_dtoa_r+0x2c0>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f8ef 	bl	80004d8 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4630      	mov	r0, r6
 8006300:	4639      	mov	r1, r7
 8006302:	f7f9 ff33 	bl	800016c <__adddf3>
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	f7fa fb95 	bl	8000a38 <__aeabi_d2iz>
 800630e:	2200      	movs	r2, #0
 8006310:	4682      	mov	sl, r0
 8006312:	2300      	movs	r3, #0
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f7fa fb50 	bl	80009bc <__aeabi_dcmplt>
 800631c:	b148      	cbz	r0, 8006332 <_dtoa_r+0x17a>
 800631e:	4650      	mov	r0, sl
 8006320:	f7fa f870 	bl	8000404 <__aeabi_i2d>
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	f7fa fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800632c:	b908      	cbnz	r0, 8006332 <_dtoa_r+0x17a>
 800632e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006332:	f1ba 0f16 	cmp.w	sl, #22
 8006336:	d858      	bhi.n	80063ea <_dtoa_r+0x232>
 8006338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800633c:	4b57      	ldr	r3, [pc, #348]	; (800649c <_dtoa_r+0x2e4>)
 800633e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7fa fb39 	bl	80009bc <__aeabi_dcmplt>
 800634a:	2800      	cmp	r0, #0
 800634c:	d04f      	beq.n	80063ee <_dtoa_r+0x236>
 800634e:	2300      	movs	r3, #0
 8006350:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006354:	930f      	str	r3, [sp, #60]	; 0x3c
 8006356:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006358:	1b1c      	subs	r4, r3, r4
 800635a:	1e63      	subs	r3, r4, #1
 800635c:	9309      	str	r3, [sp, #36]	; 0x24
 800635e:	bf49      	itett	mi
 8006360:	f1c4 0301 	rsbmi	r3, r4, #1
 8006364:	2300      	movpl	r3, #0
 8006366:	9306      	strmi	r3, [sp, #24]
 8006368:	2300      	movmi	r3, #0
 800636a:	bf54      	ite	pl
 800636c:	9306      	strpl	r3, [sp, #24]
 800636e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	db3d      	blt.n	80063f2 <_dtoa_r+0x23a>
 8006376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006378:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800637c:	4453      	add	r3, sl
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	2300      	movs	r3, #0
 8006382:	930a      	str	r3, [sp, #40]	; 0x28
 8006384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006386:	2b09      	cmp	r3, #9
 8006388:	f200 808c 	bhi.w	80064a4 <_dtoa_r+0x2ec>
 800638c:	2b05      	cmp	r3, #5
 800638e:	bfc4      	itt	gt
 8006390:	3b04      	subgt	r3, #4
 8006392:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006396:	bfc8      	it	gt
 8006398:	2400      	movgt	r4, #0
 800639a:	f1a3 0302 	sub.w	r3, r3, #2
 800639e:	bfd8      	it	le
 80063a0:	2401      	movle	r4, #1
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f200 808a 	bhi.w	80064bc <_dtoa_r+0x304>
 80063a8:	e8df f003 	tbb	[pc, r3]
 80063ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80063b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80063b4:	441c      	add	r4, r3
 80063b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	bfc3      	ittte	gt
 80063be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80063c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80063ca:	f1c3 0320 	rsble	r3, r3, #32
 80063ce:	bfc6      	itte	gt
 80063d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80063d4:	4318      	orrgt	r0, r3
 80063d6:	fa06 f003 	lslle.w	r0, r6, r3
 80063da:	f7fa f803 	bl	80003e4 <__aeabi_ui2d>
 80063de:	2301      	movs	r3, #1
 80063e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80063e4:	3c01      	subs	r4, #1
 80063e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80063e8:	e76f      	b.n	80062ca <_dtoa_r+0x112>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e7b2      	b.n	8006354 <_dtoa_r+0x19c>
 80063ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80063f0:	e7b1      	b.n	8006356 <_dtoa_r+0x19e>
 80063f2:	9b06      	ldr	r3, [sp, #24]
 80063f4:	eba3 030a 	sub.w	r3, r3, sl
 80063f8:	9306      	str	r3, [sp, #24]
 80063fa:	f1ca 0300 	rsb	r3, sl, #0
 80063fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006400:	2300      	movs	r3, #0
 8006402:	930e      	str	r3, [sp, #56]	; 0x38
 8006404:	e7be      	b.n	8006384 <_dtoa_r+0x1cc>
 8006406:	2300      	movs	r3, #0
 8006408:	930b      	str	r3, [sp, #44]	; 0x2c
 800640a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800640c:	2b00      	cmp	r3, #0
 800640e:	dc58      	bgt.n	80064c2 <_dtoa_r+0x30a>
 8006410:	f04f 0901 	mov.w	r9, #1
 8006414:	464b      	mov	r3, r9
 8006416:	f8cd 9020 	str.w	r9, [sp, #32]
 800641a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800641e:	2200      	movs	r2, #0
 8006420:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006422:	6042      	str	r2, [r0, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	f102 0614 	add.w	r6, r2, #20
 800642a:	429e      	cmp	r6, r3
 800642c:	6841      	ldr	r1, [r0, #4]
 800642e:	d94e      	bls.n	80064ce <_dtoa_r+0x316>
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fcd7 	bl	8006de4 <_Balloc>
 8006436:	9003      	str	r0, [sp, #12]
 8006438:	2800      	cmp	r0, #0
 800643a:	d14c      	bne.n	80064d6 <_dtoa_r+0x31e>
 800643c:	4602      	mov	r2, r0
 800643e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <_dtoa_r+0x2e8>)
 8006444:	e6cc      	b.n	80061e0 <_dtoa_r+0x28>
 8006446:	2301      	movs	r3, #1
 8006448:	e7de      	b.n	8006408 <_dtoa_r+0x250>
 800644a:	2300      	movs	r3, #0
 800644c:	930b      	str	r3, [sp, #44]	; 0x2c
 800644e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006450:	eb0a 0903 	add.w	r9, sl, r3
 8006454:	f109 0301 	add.w	r3, r9, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	9308      	str	r3, [sp, #32]
 800645c:	bfb8      	it	lt
 800645e:	2301      	movlt	r3, #1
 8006460:	e7dd      	b.n	800641e <_dtoa_r+0x266>
 8006462:	2301      	movs	r3, #1
 8006464:	e7f2      	b.n	800644c <_dtoa_r+0x294>
 8006466:	bf00      	nop
 8006468:	636f4361 	.word	0x636f4361
 800646c:	3fd287a7 	.word	0x3fd287a7
 8006470:	8b60c8b3 	.word	0x8b60c8b3
 8006474:	3fc68a28 	.word	0x3fc68a28
 8006478:	509f79fb 	.word	0x509f79fb
 800647c:	3fd34413 	.word	0x3fd34413
 8006480:	080085ed 	.word	0x080085ed
 8006484:	08008604 	.word	0x08008604
 8006488:	7ff00000 	.word	0x7ff00000
 800648c:	080085e9 	.word	0x080085e9
 8006490:	080085e0 	.word	0x080085e0
 8006494:	080085bd 	.word	0x080085bd
 8006498:	3ff80000 	.word	0x3ff80000
 800649c:	080086f8 	.word	0x080086f8
 80064a0:	0800865f 	.word	0x0800865f
 80064a4:	2401      	movs	r4, #1
 80064a6:	2300      	movs	r3, #0
 80064a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80064aa:	9322      	str	r3, [sp, #136]	; 0x88
 80064ac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80064b0:	2200      	movs	r2, #0
 80064b2:	2312      	movs	r3, #18
 80064b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80064b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80064ba:	e7b0      	b.n	800641e <_dtoa_r+0x266>
 80064bc:	2301      	movs	r3, #1
 80064be:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c0:	e7f4      	b.n	80064ac <_dtoa_r+0x2f4>
 80064c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80064c6:	464b      	mov	r3, r9
 80064c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80064cc:	e7a7      	b.n	800641e <_dtoa_r+0x266>
 80064ce:	3101      	adds	r1, #1
 80064d0:	6041      	str	r1, [r0, #4]
 80064d2:	0052      	lsls	r2, r2, #1
 80064d4:	e7a7      	b.n	8006426 <_dtoa_r+0x26e>
 80064d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064d8:	9a03      	ldr	r2, [sp, #12]
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	9b08      	ldr	r3, [sp, #32]
 80064de:	2b0e      	cmp	r3, #14
 80064e0:	f200 80a8 	bhi.w	8006634 <_dtoa_r+0x47c>
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	f000 80a5 	beq.w	8006634 <_dtoa_r+0x47c>
 80064ea:	f1ba 0f00 	cmp.w	sl, #0
 80064ee:	dd34      	ble.n	800655a <_dtoa_r+0x3a2>
 80064f0:	4a9a      	ldr	r2, [pc, #616]	; (800675c <_dtoa_r+0x5a4>)
 80064f2:	f00a 030f 	and.w	r3, sl, #15
 80064f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006502:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006506:	ea4f 142a 	mov.w	r4, sl, asr #4
 800650a:	d016      	beq.n	800653a <_dtoa_r+0x382>
 800650c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006510:	4b93      	ldr	r3, [pc, #588]	; (8006760 <_dtoa_r+0x5a8>)
 8006512:	2703      	movs	r7, #3
 8006514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006518:	f7fa f908 	bl	800072c <__aeabi_ddiv>
 800651c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006520:	f004 040f 	and.w	r4, r4, #15
 8006524:	4e8e      	ldr	r6, [pc, #568]	; (8006760 <_dtoa_r+0x5a8>)
 8006526:	b954      	cbnz	r4, 800653e <_dtoa_r+0x386>
 8006528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	f7fa f8fc 	bl	800072c <__aeabi_ddiv>
 8006534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006538:	e029      	b.n	800658e <_dtoa_r+0x3d6>
 800653a:	2702      	movs	r7, #2
 800653c:	e7f2      	b.n	8006524 <_dtoa_r+0x36c>
 800653e:	07e1      	lsls	r1, r4, #31
 8006540:	d508      	bpl.n	8006554 <_dtoa_r+0x39c>
 8006542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006546:	e9d6 2300 	ldrd	r2, r3, [r6]
 800654a:	f7f9 ffc5 	bl	80004d8 <__aeabi_dmul>
 800654e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006552:	3701      	adds	r7, #1
 8006554:	1064      	asrs	r4, r4, #1
 8006556:	3608      	adds	r6, #8
 8006558:	e7e5      	b.n	8006526 <_dtoa_r+0x36e>
 800655a:	f000 80a5 	beq.w	80066a8 <_dtoa_r+0x4f0>
 800655e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006562:	f1ca 0400 	rsb	r4, sl, #0
 8006566:	4b7d      	ldr	r3, [pc, #500]	; (800675c <_dtoa_r+0x5a4>)
 8006568:	f004 020f 	and.w	r2, r4, #15
 800656c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 ffb0 	bl	80004d8 <__aeabi_dmul>
 8006578:	2702      	movs	r7, #2
 800657a:	2300      	movs	r3, #0
 800657c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006580:	4e77      	ldr	r6, [pc, #476]	; (8006760 <_dtoa_r+0x5a8>)
 8006582:	1124      	asrs	r4, r4, #4
 8006584:	2c00      	cmp	r4, #0
 8006586:	f040 8084 	bne.w	8006692 <_dtoa_r+0x4da>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1d2      	bne.n	8006534 <_dtoa_r+0x37c>
 800658e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 808b 	beq.w	80066ac <_dtoa_r+0x4f4>
 8006596:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800659a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800659e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065a2:	2200      	movs	r2, #0
 80065a4:	4b6f      	ldr	r3, [pc, #444]	; (8006764 <_dtoa_r+0x5ac>)
 80065a6:	f7fa fa09 	bl	80009bc <__aeabi_dcmplt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d07e      	beq.n	80066ac <_dtoa_r+0x4f4>
 80065ae:	9b08      	ldr	r3, [sp, #32]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d07b      	beq.n	80066ac <_dtoa_r+0x4f4>
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	dd38      	ble.n	800662c <_dtoa_r+0x474>
 80065ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065be:	2200      	movs	r2, #0
 80065c0:	4b69      	ldr	r3, [pc, #420]	; (8006768 <_dtoa_r+0x5b0>)
 80065c2:	f7f9 ff89 	bl	80004d8 <__aeabi_dmul>
 80065c6:	464c      	mov	r4, r9
 80065c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065cc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80065d0:	3701      	adds	r7, #1
 80065d2:	4638      	mov	r0, r7
 80065d4:	f7f9 ff16 	bl	8000404 <__aeabi_i2d>
 80065d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065dc:	f7f9 ff7c 	bl	80004d8 <__aeabi_dmul>
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b62      	ldr	r3, [pc, #392]	; (800676c <_dtoa_r+0x5b4>)
 80065e4:	f7f9 fdc2 	bl	800016c <__adddf3>
 80065e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80065ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065f0:	9611      	str	r6, [sp, #68]	; 0x44
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	d15d      	bne.n	80066b2 <_dtoa_r+0x4fa>
 80065f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b5c      	ldr	r3, [pc, #368]	; (8006770 <_dtoa_r+0x5b8>)
 80065fe:	f7f9 fdb3 	bl	8000168 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800660a:	4633      	mov	r3, r6
 800660c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800660e:	f7fa f9f3 	bl	80009f8 <__aeabi_dcmpgt>
 8006612:	2800      	cmp	r0, #0
 8006614:	f040 829c 	bne.w	8006b50 <_dtoa_r+0x998>
 8006618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800661e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006622:	f7fa f9cb 	bl	80009bc <__aeabi_dcmplt>
 8006626:	2800      	cmp	r0, #0
 8006628:	f040 8290 	bne.w	8006b4c <_dtoa_r+0x994>
 800662c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006630:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006636:	2b00      	cmp	r3, #0
 8006638:	f2c0 8152 	blt.w	80068e0 <_dtoa_r+0x728>
 800663c:	f1ba 0f0e 	cmp.w	sl, #14
 8006640:	f300 814e 	bgt.w	80068e0 <_dtoa_r+0x728>
 8006644:	4b45      	ldr	r3, [pc, #276]	; (800675c <_dtoa_r+0x5a4>)
 8006646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800664a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800664e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006654:	2b00      	cmp	r3, #0
 8006656:	f280 80db 	bge.w	8006810 <_dtoa_r+0x658>
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f300 80d7 	bgt.w	8006810 <_dtoa_r+0x658>
 8006662:	f040 8272 	bne.w	8006b4a <_dtoa_r+0x992>
 8006666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800666a:	2200      	movs	r2, #0
 800666c:	4b40      	ldr	r3, [pc, #256]	; (8006770 <_dtoa_r+0x5b8>)
 800666e:	f7f9 ff33 	bl	80004d8 <__aeabi_dmul>
 8006672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006676:	f7fa f9b5 	bl	80009e4 <__aeabi_dcmpge>
 800667a:	9c08      	ldr	r4, [sp, #32]
 800667c:	4626      	mov	r6, r4
 800667e:	2800      	cmp	r0, #0
 8006680:	f040 8248 	bne.w	8006b14 <_dtoa_r+0x95c>
 8006684:	2331      	movs	r3, #49	; 0x31
 8006686:	9f03      	ldr	r7, [sp, #12]
 8006688:	f10a 0a01 	add.w	sl, sl, #1
 800668c:	f807 3b01 	strb.w	r3, [r7], #1
 8006690:	e244      	b.n	8006b1c <_dtoa_r+0x964>
 8006692:	07e2      	lsls	r2, r4, #31
 8006694:	d505      	bpl.n	80066a2 <_dtoa_r+0x4ea>
 8006696:	e9d6 2300 	ldrd	r2, r3, [r6]
 800669a:	f7f9 ff1d 	bl	80004d8 <__aeabi_dmul>
 800669e:	2301      	movs	r3, #1
 80066a0:	3701      	adds	r7, #1
 80066a2:	1064      	asrs	r4, r4, #1
 80066a4:	3608      	adds	r6, #8
 80066a6:	e76d      	b.n	8006584 <_dtoa_r+0x3cc>
 80066a8:	2702      	movs	r7, #2
 80066aa:	e770      	b.n	800658e <_dtoa_r+0x3d6>
 80066ac:	46d0      	mov	r8, sl
 80066ae:	9c08      	ldr	r4, [sp, #32]
 80066b0:	e78f      	b.n	80065d2 <_dtoa_r+0x41a>
 80066b2:	9903      	ldr	r1, [sp, #12]
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <_dtoa_r+0x5a4>)
 80066b6:	4421      	add	r1, r4
 80066b8:	9112      	str	r1, [sp, #72]	; 0x48
 80066ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d055      	beq.n	8006778 <_dtoa_r+0x5c0>
 80066cc:	2000      	movs	r0, #0
 80066ce:	4929      	ldr	r1, [pc, #164]	; (8006774 <_dtoa_r+0x5bc>)
 80066d0:	f7fa f82c 	bl	800072c <__aeabi_ddiv>
 80066d4:	463b      	mov	r3, r7
 80066d6:	4632      	mov	r2, r6
 80066d8:	f7f9 fd46 	bl	8000168 <__aeabi_dsub>
 80066dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066e0:	9f03      	ldr	r7, [sp, #12]
 80066e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e6:	f7fa f9a7 	bl	8000a38 <__aeabi_d2iz>
 80066ea:	4604      	mov	r4, r0
 80066ec:	f7f9 fe8a 	bl	8000404 <__aeabi_i2d>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f8:	f7f9 fd36 	bl	8000168 <__aeabi_dsub>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	3430      	adds	r4, #48	; 0x30
 8006702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800670a:	f807 4b01 	strb.w	r4, [r7], #1
 800670e:	f7fa f955 	bl	80009bc <__aeabi_dcmplt>
 8006712:	2800      	cmp	r0, #0
 8006714:	d174      	bne.n	8006800 <_dtoa_r+0x648>
 8006716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671a:	2000      	movs	r0, #0
 800671c:	4911      	ldr	r1, [pc, #68]	; (8006764 <_dtoa_r+0x5ac>)
 800671e:	f7f9 fd23 	bl	8000168 <__aeabi_dsub>
 8006722:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006726:	f7fa f949 	bl	80009bc <__aeabi_dcmplt>
 800672a:	2800      	cmp	r0, #0
 800672c:	f040 80b7 	bne.w	800689e <_dtoa_r+0x6e6>
 8006730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006732:	429f      	cmp	r7, r3
 8006734:	f43f af7a 	beq.w	800662c <_dtoa_r+0x474>
 8006738:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800673c:	2200      	movs	r2, #0
 800673e:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <_dtoa_r+0x5b0>)
 8006740:	f7f9 feca 	bl	80004d8 <__aeabi_dmul>
 8006744:	2200      	movs	r2, #0
 8006746:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800674a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <_dtoa_r+0x5b0>)
 8006750:	f7f9 fec2 	bl	80004d8 <__aeabi_dmul>
 8006754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006758:	e7c3      	b.n	80066e2 <_dtoa_r+0x52a>
 800675a:	bf00      	nop
 800675c:	080086f8 	.word	0x080086f8
 8006760:	080086d0 	.word	0x080086d0
 8006764:	3ff00000 	.word	0x3ff00000
 8006768:	40240000 	.word	0x40240000
 800676c:	401c0000 	.word	0x401c0000
 8006770:	40140000 	.word	0x40140000
 8006774:	3fe00000 	.word	0x3fe00000
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7f9 feac 	bl	80004d8 <__aeabi_dmul>
 8006780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006782:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006786:	9c03      	ldr	r4, [sp, #12]
 8006788:	9314      	str	r3, [sp, #80]	; 0x50
 800678a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678e:	f7fa f953 	bl	8000a38 <__aeabi_d2iz>
 8006792:	9015      	str	r0, [sp, #84]	; 0x54
 8006794:	f7f9 fe36 	bl	8000404 <__aeabi_i2d>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a0:	f7f9 fce2 	bl	8000168 <__aeabi_dsub>
 80067a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067a6:	4606      	mov	r6, r0
 80067a8:	3330      	adds	r3, #48	; 0x30
 80067aa:	f804 3b01 	strb.w	r3, [r4], #1
 80067ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067b0:	460f      	mov	r7, r1
 80067b2:	429c      	cmp	r4, r3
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	d124      	bne.n	8006804 <_dtoa_r+0x64c>
 80067ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067be:	4bb0      	ldr	r3, [pc, #704]	; (8006a80 <_dtoa_r+0x8c8>)
 80067c0:	f7f9 fcd4 	bl	800016c <__adddf3>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7fa f914 	bl	80009f8 <__aeabi_dcmpgt>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d163      	bne.n	800689c <_dtoa_r+0x6e4>
 80067d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067d8:	2000      	movs	r0, #0
 80067da:	49a9      	ldr	r1, [pc, #676]	; (8006a80 <_dtoa_r+0x8c8>)
 80067dc:	f7f9 fcc4 	bl	8000168 <__aeabi_dsub>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4630      	mov	r0, r6
 80067e6:	4639      	mov	r1, r7
 80067e8:	f7fa f8e8 	bl	80009bc <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f43f af1d 	beq.w	800662c <_dtoa_r+0x474>
 80067f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80067f4:	1e7b      	subs	r3, r7, #1
 80067f6:	9314      	str	r3, [sp, #80]	; 0x50
 80067f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d0f8      	beq.n	80067f2 <_dtoa_r+0x63a>
 8006800:	46c2      	mov	sl, r8
 8006802:	e03b      	b.n	800687c <_dtoa_r+0x6c4>
 8006804:	4b9f      	ldr	r3, [pc, #636]	; (8006a84 <_dtoa_r+0x8cc>)
 8006806:	f7f9 fe67 	bl	80004d8 <__aeabi_dmul>
 800680a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800680e:	e7bc      	b.n	800678a <_dtoa_r+0x5d2>
 8006810:	9f03      	ldr	r7, [sp, #12]
 8006812:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006816:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800681a:	4640      	mov	r0, r8
 800681c:	4649      	mov	r1, r9
 800681e:	f7f9 ff85 	bl	800072c <__aeabi_ddiv>
 8006822:	f7fa f909 	bl	8000a38 <__aeabi_d2iz>
 8006826:	4604      	mov	r4, r0
 8006828:	f7f9 fdec 	bl	8000404 <__aeabi_i2d>
 800682c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006830:	f7f9 fe52 	bl	80004d8 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4640      	mov	r0, r8
 800683a:	4649      	mov	r1, r9
 800683c:	f7f9 fc94 	bl	8000168 <__aeabi_dsub>
 8006840:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006844:	f807 6b01 	strb.w	r6, [r7], #1
 8006848:	9e03      	ldr	r6, [sp, #12]
 800684a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800684e:	1bbe      	subs	r6, r7, r6
 8006850:	45b4      	cmp	ip, r6
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	d136      	bne.n	80068c6 <_dtoa_r+0x70e>
 8006858:	f7f9 fc88 	bl	800016c <__adddf3>
 800685c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006860:	4680      	mov	r8, r0
 8006862:	4689      	mov	r9, r1
 8006864:	f7fa f8c8 	bl	80009f8 <__aeabi_dcmpgt>
 8006868:	bb58      	cbnz	r0, 80068c2 <_dtoa_r+0x70a>
 800686a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7fa f899 	bl	80009a8 <__aeabi_dcmpeq>
 8006876:	b108      	cbz	r0, 800687c <_dtoa_r+0x6c4>
 8006878:	07e1      	lsls	r1, r4, #31
 800687a:	d422      	bmi.n	80068c2 <_dtoa_r+0x70a>
 800687c:	4628      	mov	r0, r5
 800687e:	4659      	mov	r1, fp
 8006880:	f000 faf0 	bl	8006e64 <_Bfree>
 8006884:	2300      	movs	r3, #0
 8006886:	703b      	strb	r3, [r7, #0]
 8006888:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800688a:	f10a 0001 	add.w	r0, sl, #1
 800688e:	6018      	str	r0, [r3, #0]
 8006890:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006892:	2b00      	cmp	r3, #0
 8006894:	f43f acde 	beq.w	8006254 <_dtoa_r+0x9c>
 8006898:	601f      	str	r7, [r3, #0]
 800689a:	e4db      	b.n	8006254 <_dtoa_r+0x9c>
 800689c:	4627      	mov	r7, r4
 800689e:	463b      	mov	r3, r7
 80068a0:	461f      	mov	r7, r3
 80068a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068a6:	2a39      	cmp	r2, #57	; 0x39
 80068a8:	d107      	bne.n	80068ba <_dtoa_r+0x702>
 80068aa:	9a03      	ldr	r2, [sp, #12]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d1f7      	bne.n	80068a0 <_dtoa_r+0x6e8>
 80068b0:	2230      	movs	r2, #48	; 0x30
 80068b2:	9903      	ldr	r1, [sp, #12]
 80068b4:	f108 0801 	add.w	r8, r8, #1
 80068b8:	700a      	strb	r2, [r1, #0]
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	3201      	adds	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	e79e      	b.n	8006800 <_dtoa_r+0x648>
 80068c2:	46d0      	mov	r8, sl
 80068c4:	e7eb      	b.n	800689e <_dtoa_r+0x6e6>
 80068c6:	2200      	movs	r2, #0
 80068c8:	4b6e      	ldr	r3, [pc, #440]	; (8006a84 <_dtoa_r+0x8cc>)
 80068ca:	f7f9 fe05 	bl	80004d8 <__aeabi_dmul>
 80068ce:	2200      	movs	r2, #0
 80068d0:	2300      	movs	r3, #0
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	f7fa f867 	bl	80009a8 <__aeabi_dcmpeq>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d09b      	beq.n	8006816 <_dtoa_r+0x65e>
 80068de:	e7cd      	b.n	800687c <_dtoa_r+0x6c4>
 80068e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	f000 80d0 	beq.w	8006a88 <_dtoa_r+0x8d0>
 80068e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068ea:	2a01      	cmp	r2, #1
 80068ec:	f300 80ae 	bgt.w	8006a4c <_dtoa_r+0x894>
 80068f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	f000 80a6 	beq.w	8006a44 <_dtoa_r+0x88c>
 80068f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068fe:	9f06      	ldr	r7, [sp, #24]
 8006900:	9a06      	ldr	r2, [sp, #24]
 8006902:	2101      	movs	r1, #1
 8006904:	441a      	add	r2, r3
 8006906:	9206      	str	r2, [sp, #24]
 8006908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800690a:	4628      	mov	r0, r5
 800690c:	441a      	add	r2, r3
 800690e:	9209      	str	r2, [sp, #36]	; 0x24
 8006910:	f000 fb5e 	bl	8006fd0 <__i2b>
 8006914:	4606      	mov	r6, r0
 8006916:	2f00      	cmp	r7, #0
 8006918:	dd0c      	ble.n	8006934 <_dtoa_r+0x77c>
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	dd09      	ble.n	8006934 <_dtoa_r+0x77c>
 8006920:	42bb      	cmp	r3, r7
 8006922:	bfa8      	it	ge
 8006924:	463b      	movge	r3, r7
 8006926:	9a06      	ldr	r2, [sp, #24]
 8006928:	1aff      	subs	r7, r7, r3
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	9206      	str	r2, [sp, #24]
 800692e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006936:	b1f3      	cbz	r3, 8006976 <_dtoa_r+0x7be>
 8006938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80a8 	beq.w	8006a90 <_dtoa_r+0x8d8>
 8006940:	2c00      	cmp	r4, #0
 8006942:	dd10      	ble.n	8006966 <_dtoa_r+0x7ae>
 8006944:	4631      	mov	r1, r6
 8006946:	4622      	mov	r2, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f000 fbff 	bl	800714c <__pow5mult>
 800694e:	465a      	mov	r2, fp
 8006950:	4601      	mov	r1, r0
 8006952:	4606      	mov	r6, r0
 8006954:	4628      	mov	r0, r5
 8006956:	f000 fb51 	bl	8006ffc <__multiply>
 800695a:	4680      	mov	r8, r0
 800695c:	4659      	mov	r1, fp
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fa80 	bl	8006e64 <_Bfree>
 8006964:	46c3      	mov	fp, r8
 8006966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006968:	1b1a      	subs	r2, r3, r4
 800696a:	d004      	beq.n	8006976 <_dtoa_r+0x7be>
 800696c:	4659      	mov	r1, fp
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fbec 	bl	800714c <__pow5mult>
 8006974:	4683      	mov	fp, r0
 8006976:	2101      	movs	r1, #1
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fb29 	bl	8006fd0 <__i2b>
 800697e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006980:	4604      	mov	r4, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f340 8086 	ble.w	8006a94 <_dtoa_r+0x8dc>
 8006988:	461a      	mov	r2, r3
 800698a:	4601      	mov	r1, r0
 800698c:	4628      	mov	r0, r5
 800698e:	f000 fbdd 	bl	800714c <__pow5mult>
 8006992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006994:	4604      	mov	r4, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	dd7f      	ble.n	8006a9a <_dtoa_r+0x8e2>
 800699a:	f04f 0800 	mov.w	r8, #0
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069a4:	6918      	ldr	r0, [r3, #16]
 80069a6:	f000 fac5 	bl	8006f34 <__hi0bits>
 80069aa:	f1c0 0020 	rsb	r0, r0, #32
 80069ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b0:	4418      	add	r0, r3
 80069b2:	f010 001f 	ands.w	r0, r0, #31
 80069b6:	f000 8092 	beq.w	8006ade <_dtoa_r+0x926>
 80069ba:	f1c0 0320 	rsb	r3, r0, #32
 80069be:	2b04      	cmp	r3, #4
 80069c0:	f340 808a 	ble.w	8006ad8 <_dtoa_r+0x920>
 80069c4:	f1c0 001c 	rsb	r0, r0, #28
 80069c8:	9b06      	ldr	r3, [sp, #24]
 80069ca:	4407      	add	r7, r0
 80069cc:	4403      	add	r3, r0
 80069ce:	9306      	str	r3, [sp, #24]
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	4403      	add	r3, r0
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dd05      	ble.n	80069e8 <_dtoa_r+0x830>
 80069dc:	4659      	mov	r1, fp
 80069de:	461a      	mov	r2, r3
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 fc0d 	bl	8007200 <__lshift>
 80069e6:	4683      	mov	fp, r0
 80069e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dd05      	ble.n	80069fa <_dtoa_r+0x842>
 80069ee:	4621      	mov	r1, r4
 80069f0:	461a      	mov	r2, r3
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 fc04 	bl	8007200 <__lshift>
 80069f8:	4604      	mov	r4, r0
 80069fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d070      	beq.n	8006ae2 <_dtoa_r+0x92a>
 8006a00:	4621      	mov	r1, r4
 8006a02:	4658      	mov	r0, fp
 8006a04:	f000 fc6c 	bl	80072e0 <__mcmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	da6a      	bge.n	8006ae2 <_dtoa_r+0x92a>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4659      	mov	r1, fp
 8006a10:	220a      	movs	r2, #10
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 fa48 	bl	8006ea8 <__multadd>
 8006a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a1a:	4683      	mov	fp, r0
 8006a1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 8194 	beq.w	8006d4e <_dtoa_r+0xb96>
 8006a26:	4631      	mov	r1, r6
 8006a28:	2300      	movs	r3, #0
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 fa3b 	bl	8006ea8 <__multadd>
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	4606      	mov	r6, r0
 8006a38:	f300 8093 	bgt.w	8006b62 <_dtoa_r+0x9aa>
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dc57      	bgt.n	8006af2 <_dtoa_r+0x93a>
 8006a42:	e08e      	b.n	8006b62 <_dtoa_r+0x9aa>
 8006a44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a4a:	e757      	b.n	80068fc <_dtoa_r+0x744>
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	1e5c      	subs	r4, r3, #1
 8006a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	bfb7      	itett	lt
 8006a56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a58:	1b1c      	subge	r4, r3, r4
 8006a5a:	1ae2      	sublt	r2, r4, r3
 8006a5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a5e:	bfbe      	ittt	lt
 8006a60:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a62:	189b      	addlt	r3, r3, r2
 8006a64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a66:	9b08      	ldr	r3, [sp, #32]
 8006a68:	bfb8      	it	lt
 8006a6a:	2400      	movlt	r4, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bfbb      	ittet	lt
 8006a70:	9b06      	ldrlt	r3, [sp, #24]
 8006a72:	9a08      	ldrlt	r2, [sp, #32]
 8006a74:	9f06      	ldrge	r7, [sp, #24]
 8006a76:	1a9f      	sublt	r7, r3, r2
 8006a78:	bfac      	ite	ge
 8006a7a:	9b08      	ldrge	r3, [sp, #32]
 8006a7c:	2300      	movlt	r3, #0
 8006a7e:	e73f      	b.n	8006900 <_dtoa_r+0x748>
 8006a80:	3fe00000 	.word	0x3fe00000
 8006a84:	40240000 	.word	0x40240000
 8006a88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a8a:	9f06      	ldr	r7, [sp, #24]
 8006a8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a8e:	e742      	b.n	8006916 <_dtoa_r+0x75e>
 8006a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a92:	e76b      	b.n	800696c <_dtoa_r+0x7b4>
 8006a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	dc19      	bgt.n	8006ace <_dtoa_r+0x916>
 8006a9a:	9b04      	ldr	r3, [sp, #16]
 8006a9c:	b9bb      	cbnz	r3, 8006ace <_dtoa_r+0x916>
 8006a9e:	9b05      	ldr	r3, [sp, #20]
 8006aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa4:	b99b      	cbnz	r3, 8006ace <_dtoa_r+0x916>
 8006aa6:	9b05      	ldr	r3, [sp, #20]
 8006aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	0d1b      	lsrs	r3, r3, #20
 8006aae:	051b      	lsls	r3, r3, #20
 8006ab0:	b183      	cbz	r3, 8006ad4 <_dtoa_r+0x91c>
 8006ab2:	f04f 0801 	mov.w	r8, #1
 8006ab6:	9b06      	ldr	r3, [sp, #24]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	9306      	str	r3, [sp, #24]
 8006abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f af6a 	bne.w	800699e <_dtoa_r+0x7e6>
 8006aca:	2001      	movs	r0, #1
 8006acc:	e76f      	b.n	80069ae <_dtoa_r+0x7f6>
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	e7f6      	b.n	8006ac2 <_dtoa_r+0x90a>
 8006ad4:	4698      	mov	r8, r3
 8006ad6:	e7f4      	b.n	8006ac2 <_dtoa_r+0x90a>
 8006ad8:	f43f af7d 	beq.w	80069d6 <_dtoa_r+0x81e>
 8006adc:	4618      	mov	r0, r3
 8006ade:	301c      	adds	r0, #28
 8006ae0:	e772      	b.n	80069c8 <_dtoa_r+0x810>
 8006ae2:	9b08      	ldr	r3, [sp, #32]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dc36      	bgt.n	8006b56 <_dtoa_r+0x99e>
 8006ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd33      	ble.n	8006b56 <_dtoa_r+0x99e>
 8006aee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006af2:	f1b9 0f00 	cmp.w	r9, #0
 8006af6:	d10d      	bne.n	8006b14 <_dtoa_r+0x95c>
 8006af8:	4621      	mov	r1, r4
 8006afa:	464b      	mov	r3, r9
 8006afc:	2205      	movs	r2, #5
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 f9d2 	bl	8006ea8 <__multadd>
 8006b04:	4601      	mov	r1, r0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4658      	mov	r0, fp
 8006b0a:	f000 fbe9 	bl	80072e0 <__mcmp>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f73f adb8 	bgt.w	8006684 <_dtoa_r+0x4cc>
 8006b14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b16:	9f03      	ldr	r7, [sp, #12]
 8006b18:	ea6f 0a03 	mvn.w	sl, r3
 8006b1c:	f04f 0800 	mov.w	r8, #0
 8006b20:	4621      	mov	r1, r4
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 f99e 	bl	8006e64 <_Bfree>
 8006b28:	2e00      	cmp	r6, #0
 8006b2a:	f43f aea7 	beq.w	800687c <_dtoa_r+0x6c4>
 8006b2e:	f1b8 0f00 	cmp.w	r8, #0
 8006b32:	d005      	beq.n	8006b40 <_dtoa_r+0x988>
 8006b34:	45b0      	cmp	r8, r6
 8006b36:	d003      	beq.n	8006b40 <_dtoa_r+0x988>
 8006b38:	4641      	mov	r1, r8
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 f992 	bl	8006e64 <_Bfree>
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 f98e 	bl	8006e64 <_Bfree>
 8006b48:	e698      	b.n	800687c <_dtoa_r+0x6c4>
 8006b4a:	2400      	movs	r4, #0
 8006b4c:	4626      	mov	r6, r4
 8006b4e:	e7e1      	b.n	8006b14 <_dtoa_r+0x95c>
 8006b50:	46c2      	mov	sl, r8
 8006b52:	4626      	mov	r6, r4
 8006b54:	e596      	b.n	8006684 <_dtoa_r+0x4cc>
 8006b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80fd 	beq.w	8006d5c <_dtoa_r+0xba4>
 8006b62:	2f00      	cmp	r7, #0
 8006b64:	dd05      	ble.n	8006b72 <_dtoa_r+0x9ba>
 8006b66:	4631      	mov	r1, r6
 8006b68:	463a      	mov	r2, r7
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 fb48 	bl	8007200 <__lshift>
 8006b70:	4606      	mov	r6, r0
 8006b72:	f1b8 0f00 	cmp.w	r8, #0
 8006b76:	d05c      	beq.n	8006c32 <_dtoa_r+0xa7a>
 8006b78:	4628      	mov	r0, r5
 8006b7a:	6871      	ldr	r1, [r6, #4]
 8006b7c:	f000 f932 	bl	8006de4 <_Balloc>
 8006b80:	4607      	mov	r7, r0
 8006b82:	b928      	cbnz	r0, 8006b90 <_dtoa_r+0x9d8>
 8006b84:	4602      	mov	r2, r0
 8006b86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b8a:	4b7f      	ldr	r3, [pc, #508]	; (8006d88 <_dtoa_r+0xbd0>)
 8006b8c:	f7ff bb28 	b.w	80061e0 <_dtoa_r+0x28>
 8006b90:	6932      	ldr	r2, [r6, #16]
 8006b92:	f106 010c 	add.w	r1, r6, #12
 8006b96:	3202      	adds	r2, #2
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	300c      	adds	r0, #12
 8006b9c:	f000 f914 	bl	8006dc8 <memcpy>
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 fb2b 	bl	8007200 <__lshift>
 8006baa:	46b0      	mov	r8, r6
 8006bac:	4606      	mov	r6, r0
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	9308      	str	r3, [sp, #32]
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	444b      	add	r3, r9
 8006bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc2:	9b08      	ldr	r3, [sp, #32]
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4658      	mov	r0, fp
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	f7ff fa66 	bl	800609c <quorem>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4641      	mov	r1, r8
 8006bd4:	3330      	adds	r3, #48	; 0x30
 8006bd6:	9006      	str	r0, [sp, #24]
 8006bd8:	4658      	mov	r0, fp
 8006bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bdc:	f000 fb80 	bl	80072e0 <__mcmp>
 8006be0:	4632      	mov	r2, r6
 8006be2:	4681      	mov	r9, r0
 8006be4:	4621      	mov	r1, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 fb96 	bl	8007318 <__mdiff>
 8006bec:	68c2      	ldr	r2, [r0, #12]
 8006bee:	4607      	mov	r7, r0
 8006bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf2:	bb02      	cbnz	r2, 8006c36 <_dtoa_r+0xa7e>
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	f000 fb72 	bl	80072e0 <__mcmp>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c00:	4639      	mov	r1, r7
 8006c02:	4628      	mov	r0, r5
 8006c04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006c08:	f000 f92c 	bl	8006e64 <_Bfree>
 8006c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c10:	9f08      	ldr	r7, [sp, #32]
 8006c12:	ea43 0102 	orr.w	r1, r3, r2
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c1c:	d10d      	bne.n	8006c3a <_dtoa_r+0xa82>
 8006c1e:	2b39      	cmp	r3, #57	; 0x39
 8006c20:	d029      	beq.n	8006c76 <_dtoa_r+0xabe>
 8006c22:	f1b9 0f00 	cmp.w	r9, #0
 8006c26:	dd01      	ble.n	8006c2c <_dtoa_r+0xa74>
 8006c28:	9b06      	ldr	r3, [sp, #24]
 8006c2a:	3331      	adds	r3, #49	; 0x31
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	7013      	strb	r3, [r2, #0]
 8006c30:	e776      	b.n	8006b20 <_dtoa_r+0x968>
 8006c32:	4630      	mov	r0, r6
 8006c34:	e7b9      	b.n	8006baa <_dtoa_r+0x9f2>
 8006c36:	2201      	movs	r2, #1
 8006c38:	e7e2      	b.n	8006c00 <_dtoa_r+0xa48>
 8006c3a:	f1b9 0f00 	cmp.w	r9, #0
 8006c3e:	db06      	blt.n	8006c4e <_dtoa_r+0xa96>
 8006c40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c42:	ea41 0909 	orr.w	r9, r1, r9
 8006c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c48:	ea59 0101 	orrs.w	r1, r9, r1
 8006c4c:	d120      	bne.n	8006c90 <_dtoa_r+0xad8>
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	ddec      	ble.n	8006c2c <_dtoa_r+0xa74>
 8006c52:	4659      	mov	r1, fp
 8006c54:	2201      	movs	r2, #1
 8006c56:	4628      	mov	r0, r5
 8006c58:	9308      	str	r3, [sp, #32]
 8006c5a:	f000 fad1 	bl	8007200 <__lshift>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4683      	mov	fp, r0
 8006c62:	f000 fb3d 	bl	80072e0 <__mcmp>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	9b08      	ldr	r3, [sp, #32]
 8006c6a:	dc02      	bgt.n	8006c72 <_dtoa_r+0xaba>
 8006c6c:	d1de      	bne.n	8006c2c <_dtoa_r+0xa74>
 8006c6e:	07da      	lsls	r2, r3, #31
 8006c70:	d5dc      	bpl.n	8006c2c <_dtoa_r+0xa74>
 8006c72:	2b39      	cmp	r3, #57	; 0x39
 8006c74:	d1d8      	bne.n	8006c28 <_dtoa_r+0xa70>
 8006c76:	2339      	movs	r3, #57	; 0x39
 8006c78:	9a04      	ldr	r2, [sp, #16]
 8006c7a:	7013      	strb	r3, [r2, #0]
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	461f      	mov	r7, r3
 8006c80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	2a39      	cmp	r2, #57	; 0x39
 8006c88:	d050      	beq.n	8006d2c <_dtoa_r+0xb74>
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e747      	b.n	8006b20 <_dtoa_r+0x968>
 8006c90:	2a00      	cmp	r2, #0
 8006c92:	dd03      	ble.n	8006c9c <_dtoa_r+0xae4>
 8006c94:	2b39      	cmp	r3, #57	; 0x39
 8006c96:	d0ee      	beq.n	8006c76 <_dtoa_r+0xabe>
 8006c98:	3301      	adds	r3, #1
 8006c9a:	e7c7      	b.n	8006c2c <_dtoa_r+0xa74>
 8006c9c:	9a08      	ldr	r2, [sp, #32]
 8006c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ca0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ca4:	428a      	cmp	r2, r1
 8006ca6:	d02a      	beq.n	8006cfe <_dtoa_r+0xb46>
 8006ca8:	4659      	mov	r1, fp
 8006caa:	2300      	movs	r3, #0
 8006cac:	220a      	movs	r2, #10
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f8fa 	bl	8006ea8 <__multadd>
 8006cb4:	45b0      	cmp	r8, r6
 8006cb6:	4683      	mov	fp, r0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	f04f 020a 	mov.w	r2, #10
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	d107      	bne.n	8006cd6 <_dtoa_r+0xb1e>
 8006cc6:	f000 f8ef 	bl	8006ea8 <__multadd>
 8006cca:	4680      	mov	r8, r0
 8006ccc:	4606      	mov	r6, r0
 8006cce:	9b08      	ldr	r3, [sp, #32]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	9308      	str	r3, [sp, #32]
 8006cd4:	e775      	b.n	8006bc2 <_dtoa_r+0xa0a>
 8006cd6:	f000 f8e7 	bl	8006ea8 <__multadd>
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4680      	mov	r8, r0
 8006cde:	2300      	movs	r3, #0
 8006ce0:	220a      	movs	r2, #10
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f8e0 	bl	8006ea8 <__multadd>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	e7f0      	b.n	8006cce <_dtoa_r+0xb16>
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	bfcc      	ite	gt
 8006cf2:	464f      	movgt	r7, r9
 8006cf4:	2701      	movle	r7, #1
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	9a03      	ldr	r2, [sp, #12]
 8006cfc:	4417      	add	r7, r2
 8006cfe:	4659      	mov	r1, fp
 8006d00:	2201      	movs	r2, #1
 8006d02:	4628      	mov	r0, r5
 8006d04:	9308      	str	r3, [sp, #32]
 8006d06:	f000 fa7b 	bl	8007200 <__lshift>
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4683      	mov	fp, r0
 8006d0e:	f000 fae7 	bl	80072e0 <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	dcb2      	bgt.n	8006c7c <_dtoa_r+0xac4>
 8006d16:	d102      	bne.n	8006d1e <_dtoa_r+0xb66>
 8006d18:	9b08      	ldr	r3, [sp, #32]
 8006d1a:	07db      	lsls	r3, r3, #31
 8006d1c:	d4ae      	bmi.n	8006c7c <_dtoa_r+0xac4>
 8006d1e:	463b      	mov	r3, r7
 8006d20:	461f      	mov	r7, r3
 8006d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d26:	2a30      	cmp	r2, #48	; 0x30
 8006d28:	d0fa      	beq.n	8006d20 <_dtoa_r+0xb68>
 8006d2a:	e6f9      	b.n	8006b20 <_dtoa_r+0x968>
 8006d2c:	9a03      	ldr	r2, [sp, #12]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d1a5      	bne.n	8006c7e <_dtoa_r+0xac6>
 8006d32:	2331      	movs	r3, #49	; 0x31
 8006d34:	f10a 0a01 	add.w	sl, sl, #1
 8006d38:	e779      	b.n	8006c2e <_dtoa_r+0xa76>
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <_dtoa_r+0xbd4>)
 8006d3c:	f7ff baa8 	b.w	8006290 <_dtoa_r+0xd8>
 8006d40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f47f aa81 	bne.w	800624a <_dtoa_r+0x92>
 8006d48:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <_dtoa_r+0xbd8>)
 8006d4a:	f7ff baa1 	b.w	8006290 <_dtoa_r+0xd8>
 8006d4e:	f1b9 0f00 	cmp.w	r9, #0
 8006d52:	dc03      	bgt.n	8006d5c <_dtoa_r+0xba4>
 8006d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	f73f aecb 	bgt.w	8006af2 <_dtoa_r+0x93a>
 8006d5c:	9f03      	ldr	r7, [sp, #12]
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4658      	mov	r0, fp
 8006d62:	f7ff f99b 	bl	800609c <quorem>
 8006d66:	9a03      	ldr	r2, [sp, #12]
 8006d68:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d6c:	f807 3b01 	strb.w	r3, [r7], #1
 8006d70:	1aba      	subs	r2, r7, r2
 8006d72:	4591      	cmp	r9, r2
 8006d74:	ddba      	ble.n	8006cec <_dtoa_r+0xb34>
 8006d76:	4659      	mov	r1, fp
 8006d78:	2300      	movs	r3, #0
 8006d7a:	220a      	movs	r2, #10
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 f893 	bl	8006ea8 <__multadd>
 8006d82:	4683      	mov	fp, r0
 8006d84:	e7eb      	b.n	8006d5e <_dtoa_r+0xba6>
 8006d86:	bf00      	nop
 8006d88:	0800865f 	.word	0x0800865f
 8006d8c:	080085bc 	.word	0x080085bc
 8006d90:	080085e0 	.word	0x080085e0

08006d94 <_localeconv_r>:
 8006d94:	4800      	ldr	r0, [pc, #0]	; (8006d98 <_localeconv_r+0x4>)
 8006d96:	4770      	bx	lr
 8006d98:	2000016c 	.word	0x2000016c

08006d9c <malloc>:
 8006d9c:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <malloc+0xc>)
 8006d9e:	4601      	mov	r1, r0
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f000 bc1d 	b.w	80075e0 <_malloc_r>
 8006da6:	bf00      	nop
 8006da8:	20000018 	.word	0x20000018

08006dac <memchr>:
 8006dac:	4603      	mov	r3, r0
 8006dae:	b510      	push	{r4, lr}
 8006db0:	b2c9      	uxtb	r1, r1
 8006db2:	4402      	add	r2, r0
 8006db4:	4293      	cmp	r3, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	d101      	bne.n	8006dbe <memchr+0x12>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e003      	b.n	8006dc6 <memchr+0x1a>
 8006dbe:	7804      	ldrb	r4, [r0, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	428c      	cmp	r4, r1
 8006dc4:	d1f6      	bne.n	8006db4 <memchr+0x8>
 8006dc6:	bd10      	pop	{r4, pc}

08006dc8 <memcpy>:
 8006dc8:	440a      	add	r2, r1
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dd0:	d100      	bne.n	8006dd4 <memcpy+0xc>
 8006dd2:	4770      	bx	lr
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dda:	4291      	cmp	r1, r2
 8006ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de0:	d1f9      	bne.n	8006dd6 <memcpy+0xe>
 8006de2:	bd10      	pop	{r4, pc}

08006de4 <_Balloc>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	b976      	cbnz	r6, 8006e0c <_Balloc+0x28>
 8006dee:	2010      	movs	r0, #16
 8006df0:	f7ff ffd4 	bl	8006d9c <malloc>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6260      	str	r0, [r4, #36]	; 0x24
 8006df8:	b920      	cbnz	r0, 8006e04 <_Balloc+0x20>
 8006dfa:	2166      	movs	r1, #102	; 0x66
 8006dfc:	4b17      	ldr	r3, [pc, #92]	; (8006e5c <_Balloc+0x78>)
 8006dfe:	4818      	ldr	r0, [pc, #96]	; (8006e60 <_Balloc+0x7c>)
 8006e00:	f000 fdce 	bl	80079a0 <__assert_func>
 8006e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e08:	6006      	str	r6, [r0, #0]
 8006e0a:	60c6      	str	r6, [r0, #12]
 8006e0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e0e:	68f3      	ldr	r3, [r6, #12]
 8006e10:	b183      	cbz	r3, 8006e34 <_Balloc+0x50>
 8006e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e1a:	b9b8      	cbnz	r0, 8006e4c <_Balloc+0x68>
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e22:	1d72      	adds	r2, r6, #5
 8006e24:	4620      	mov	r0, r4
 8006e26:	0092      	lsls	r2, r2, #2
 8006e28:	f000 fb5e 	bl	80074e8 <_calloc_r>
 8006e2c:	b160      	cbz	r0, 8006e48 <_Balloc+0x64>
 8006e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e32:	e00e      	b.n	8006e52 <_Balloc+0x6e>
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	2104      	movs	r1, #4
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 fb55 	bl	80074e8 <_calloc_r>
 8006e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e40:	60f0      	str	r0, [r6, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e4      	bne.n	8006e12 <_Balloc+0x2e>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	6802      	ldr	r2, [r0, #0]
 8006e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e52:	2300      	movs	r3, #0
 8006e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e58:	e7f7      	b.n	8006e4a <_Balloc+0x66>
 8006e5a:	bf00      	nop
 8006e5c:	080085ed 	.word	0x080085ed
 8006e60:	08008670 	.word	0x08008670

08006e64 <_Bfree>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	b976      	cbnz	r6, 8006e8c <_Bfree+0x28>
 8006e6e:	2010      	movs	r0, #16
 8006e70:	f7ff ff94 	bl	8006d9c <malloc>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6268      	str	r0, [r5, #36]	; 0x24
 8006e78:	b920      	cbnz	r0, 8006e84 <_Bfree+0x20>
 8006e7a:	218a      	movs	r1, #138	; 0x8a
 8006e7c:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <_Bfree+0x3c>)
 8006e7e:	4809      	ldr	r0, [pc, #36]	; (8006ea4 <_Bfree+0x40>)
 8006e80:	f000 fd8e 	bl	80079a0 <__assert_func>
 8006e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e88:	6006      	str	r6, [r0, #0]
 8006e8a:	60c6      	str	r6, [r0, #12]
 8006e8c:	b13c      	cbz	r4, 8006e9e <_Bfree+0x3a>
 8006e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e90:	6862      	ldr	r2, [r4, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e98:	6021      	str	r1, [r4, #0]
 8006e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	080085ed 	.word	0x080085ed
 8006ea4:	08008670 	.word	0x08008670

08006ea8 <__multadd>:
 8006ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	4607      	mov	r7, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	461e      	mov	r6, r3
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	690d      	ldr	r5, [r1, #16]
 8006eb6:	f101 0c14 	add.w	ip, r1, #20
 8006eba:	f8dc 3000 	ldr.w	r3, [ip]
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	b299      	uxth	r1, r3
 8006ec2:	fb02 6101 	mla	r1, r2, r1, r6
 8006ec6:	0c1e      	lsrs	r6, r3, #16
 8006ec8:	0c0b      	lsrs	r3, r1, #16
 8006eca:	fb02 3306 	mla	r3, r2, r6, r3
 8006ece:	b289      	uxth	r1, r1
 8006ed0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ed4:	4285      	cmp	r5, r0
 8006ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eda:	f84c 1b04 	str.w	r1, [ip], #4
 8006ede:	dcec      	bgt.n	8006eba <__multadd+0x12>
 8006ee0:	b30e      	cbz	r6, 8006f26 <__multadd+0x7e>
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	dc19      	bgt.n	8006f1c <__multadd+0x74>
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4638      	mov	r0, r7
 8006eec:	3101      	adds	r1, #1
 8006eee:	f7ff ff79 	bl	8006de4 <_Balloc>
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	b928      	cbnz	r0, 8006f02 <__multadd+0x5a>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	21b5      	movs	r1, #181	; 0xb5
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <__multadd+0x84>)
 8006efc:	480c      	ldr	r0, [pc, #48]	; (8006f30 <__multadd+0x88>)
 8006efe:	f000 fd4f 	bl	80079a0 <__assert_func>
 8006f02:	6922      	ldr	r2, [r4, #16]
 8006f04:	f104 010c 	add.w	r1, r4, #12
 8006f08:	3202      	adds	r2, #2
 8006f0a:	0092      	lsls	r2, r2, #2
 8006f0c:	300c      	adds	r0, #12
 8006f0e:	f7ff ff5b 	bl	8006dc8 <memcpy>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff ffa5 	bl	8006e64 <_Bfree>
 8006f1a:	4644      	mov	r4, r8
 8006f1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f20:	3501      	adds	r5, #1
 8006f22:	615e      	str	r6, [r3, #20]
 8006f24:	6125      	str	r5, [r4, #16]
 8006f26:	4620      	mov	r0, r4
 8006f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2c:	0800865f 	.word	0x0800865f
 8006f30:	08008670 	.word	0x08008670

08006f34 <__hi0bits>:
 8006f34:	0c02      	lsrs	r2, r0, #16
 8006f36:	0412      	lsls	r2, r2, #16
 8006f38:	4603      	mov	r3, r0
 8006f3a:	b9ca      	cbnz	r2, 8006f70 <__hi0bits+0x3c>
 8006f3c:	0403      	lsls	r3, r0, #16
 8006f3e:	2010      	movs	r0, #16
 8006f40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f44:	bf04      	itt	eq
 8006f46:	021b      	lsleq	r3, r3, #8
 8006f48:	3008      	addeq	r0, #8
 8006f4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f4e:	bf04      	itt	eq
 8006f50:	011b      	lsleq	r3, r3, #4
 8006f52:	3004      	addeq	r0, #4
 8006f54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f58:	bf04      	itt	eq
 8006f5a:	009b      	lsleq	r3, r3, #2
 8006f5c:	3002      	addeq	r0, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	db05      	blt.n	8006f6e <__hi0bits+0x3a>
 8006f62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006f66:	f100 0001 	add.w	r0, r0, #1
 8006f6a:	bf08      	it	eq
 8006f6c:	2020      	moveq	r0, #32
 8006f6e:	4770      	bx	lr
 8006f70:	2000      	movs	r0, #0
 8006f72:	e7e5      	b.n	8006f40 <__hi0bits+0xc>

08006f74 <__lo0bits>:
 8006f74:	6803      	ldr	r3, [r0, #0]
 8006f76:	4602      	mov	r2, r0
 8006f78:	f013 0007 	ands.w	r0, r3, #7
 8006f7c:	d00b      	beq.n	8006f96 <__lo0bits+0x22>
 8006f7e:	07d9      	lsls	r1, r3, #31
 8006f80:	d421      	bmi.n	8006fc6 <__lo0bits+0x52>
 8006f82:	0798      	lsls	r0, r3, #30
 8006f84:	bf49      	itett	mi
 8006f86:	085b      	lsrmi	r3, r3, #1
 8006f88:	089b      	lsrpl	r3, r3, #2
 8006f8a:	2001      	movmi	r0, #1
 8006f8c:	6013      	strmi	r3, [r2, #0]
 8006f8e:	bf5c      	itt	pl
 8006f90:	2002      	movpl	r0, #2
 8006f92:	6013      	strpl	r3, [r2, #0]
 8006f94:	4770      	bx	lr
 8006f96:	b299      	uxth	r1, r3
 8006f98:	b909      	cbnz	r1, 8006f9e <__lo0bits+0x2a>
 8006f9a:	2010      	movs	r0, #16
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	b2d9      	uxtb	r1, r3
 8006fa0:	b909      	cbnz	r1, 8006fa6 <__lo0bits+0x32>
 8006fa2:	3008      	adds	r0, #8
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	0719      	lsls	r1, r3, #28
 8006fa8:	bf04      	itt	eq
 8006faa:	091b      	lsreq	r3, r3, #4
 8006fac:	3004      	addeq	r0, #4
 8006fae:	0799      	lsls	r1, r3, #30
 8006fb0:	bf04      	itt	eq
 8006fb2:	089b      	lsreq	r3, r3, #2
 8006fb4:	3002      	addeq	r0, #2
 8006fb6:	07d9      	lsls	r1, r3, #31
 8006fb8:	d403      	bmi.n	8006fc2 <__lo0bits+0x4e>
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	f100 0001 	add.w	r0, r0, #1
 8006fc0:	d003      	beq.n	8006fca <__lo0bits+0x56>
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	4770      	bx	lr
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	4770      	bx	lr
 8006fca:	2020      	movs	r0, #32
 8006fcc:	4770      	bx	lr
	...

08006fd0 <__i2b>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	f7ff ff05 	bl	8006de4 <_Balloc>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	b928      	cbnz	r0, 8006fea <__i2b+0x1a>
 8006fde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fe2:	4b04      	ldr	r3, [pc, #16]	; (8006ff4 <__i2b+0x24>)
 8006fe4:	4804      	ldr	r0, [pc, #16]	; (8006ff8 <__i2b+0x28>)
 8006fe6:	f000 fcdb 	bl	80079a0 <__assert_func>
 8006fea:	2301      	movs	r3, #1
 8006fec:	6144      	str	r4, [r0, #20]
 8006fee:	6103      	str	r3, [r0, #16]
 8006ff0:	bd10      	pop	{r4, pc}
 8006ff2:	bf00      	nop
 8006ff4:	0800865f 	.word	0x0800865f
 8006ff8:	08008670 	.word	0x08008670

08006ffc <__multiply>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	4691      	mov	r9, r2
 8007002:	690a      	ldr	r2, [r1, #16]
 8007004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007008:	460c      	mov	r4, r1
 800700a:	429a      	cmp	r2, r3
 800700c:	bfbe      	ittt	lt
 800700e:	460b      	movlt	r3, r1
 8007010:	464c      	movlt	r4, r9
 8007012:	4699      	movlt	r9, r3
 8007014:	6927      	ldr	r7, [r4, #16]
 8007016:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	6861      	ldr	r1, [r4, #4]
 800701e:	eb07 060a 	add.w	r6, r7, sl
 8007022:	42b3      	cmp	r3, r6
 8007024:	b085      	sub	sp, #20
 8007026:	bfb8      	it	lt
 8007028:	3101      	addlt	r1, #1
 800702a:	f7ff fedb 	bl	8006de4 <_Balloc>
 800702e:	b930      	cbnz	r0, 800703e <__multiply+0x42>
 8007030:	4602      	mov	r2, r0
 8007032:	f240 115d 	movw	r1, #349	; 0x15d
 8007036:	4b43      	ldr	r3, [pc, #268]	; (8007144 <__multiply+0x148>)
 8007038:	4843      	ldr	r0, [pc, #268]	; (8007148 <__multiply+0x14c>)
 800703a:	f000 fcb1 	bl	80079a0 <__assert_func>
 800703e:	f100 0514 	add.w	r5, r0, #20
 8007042:	462b      	mov	r3, r5
 8007044:	2200      	movs	r2, #0
 8007046:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800704a:	4543      	cmp	r3, r8
 800704c:	d321      	bcc.n	8007092 <__multiply+0x96>
 800704e:	f104 0314 	add.w	r3, r4, #20
 8007052:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007056:	f109 0314 	add.w	r3, r9, #20
 800705a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800705e:	9202      	str	r2, [sp, #8]
 8007060:	1b3a      	subs	r2, r7, r4
 8007062:	3a15      	subs	r2, #21
 8007064:	f022 0203 	bic.w	r2, r2, #3
 8007068:	3204      	adds	r2, #4
 800706a:	f104 0115 	add.w	r1, r4, #21
 800706e:	428f      	cmp	r7, r1
 8007070:	bf38      	it	cc
 8007072:	2204      	movcc	r2, #4
 8007074:	9201      	str	r2, [sp, #4]
 8007076:	9a02      	ldr	r2, [sp, #8]
 8007078:	9303      	str	r3, [sp, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d80c      	bhi.n	8007098 <__multiply+0x9c>
 800707e:	2e00      	cmp	r6, #0
 8007080:	dd03      	ble.n	800708a <__multiply+0x8e>
 8007082:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007086:	2b00      	cmp	r3, #0
 8007088:	d059      	beq.n	800713e <__multiply+0x142>
 800708a:	6106      	str	r6, [r0, #16]
 800708c:	b005      	add	sp, #20
 800708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	f843 2b04 	str.w	r2, [r3], #4
 8007096:	e7d8      	b.n	800704a <__multiply+0x4e>
 8007098:	f8b3 a000 	ldrh.w	sl, [r3]
 800709c:	f1ba 0f00 	cmp.w	sl, #0
 80070a0:	d023      	beq.n	80070ea <__multiply+0xee>
 80070a2:	46a9      	mov	r9, r5
 80070a4:	f04f 0c00 	mov.w	ip, #0
 80070a8:	f104 0e14 	add.w	lr, r4, #20
 80070ac:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070b0:	f8d9 1000 	ldr.w	r1, [r9]
 80070b4:	fa1f fb82 	uxth.w	fp, r2
 80070b8:	b289      	uxth	r1, r1
 80070ba:	fb0a 110b 	mla	r1, sl, fp, r1
 80070be:	4461      	add	r1, ip
 80070c0:	f8d9 c000 	ldr.w	ip, [r9]
 80070c4:	0c12      	lsrs	r2, r2, #16
 80070c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80070ca:	fb0a c202 	mla	r2, sl, r2, ip
 80070ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070d2:	b289      	uxth	r1, r1
 80070d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070d8:	4577      	cmp	r7, lr
 80070da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070de:	f849 1b04 	str.w	r1, [r9], #4
 80070e2:	d8e3      	bhi.n	80070ac <__multiply+0xb0>
 80070e4:	9a01      	ldr	r2, [sp, #4]
 80070e6:	f845 c002 	str.w	ip, [r5, r2]
 80070ea:	9a03      	ldr	r2, [sp, #12]
 80070ec:	3304      	adds	r3, #4
 80070ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070f2:	f1b9 0f00 	cmp.w	r9, #0
 80070f6:	d020      	beq.n	800713a <__multiply+0x13e>
 80070f8:	46ae      	mov	lr, r5
 80070fa:	f04f 0a00 	mov.w	sl, #0
 80070fe:	6829      	ldr	r1, [r5, #0]
 8007100:	f104 0c14 	add.w	ip, r4, #20
 8007104:	f8bc b000 	ldrh.w	fp, [ip]
 8007108:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800710c:	b289      	uxth	r1, r1
 800710e:	fb09 220b 	mla	r2, r9, fp, r2
 8007112:	4492      	add	sl, r2
 8007114:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007118:	f84e 1b04 	str.w	r1, [lr], #4
 800711c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007120:	f8be 1000 	ldrh.w	r1, [lr]
 8007124:	0c12      	lsrs	r2, r2, #16
 8007126:	fb09 1102 	mla	r1, r9, r2, r1
 800712a:	4567      	cmp	r7, ip
 800712c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007130:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007134:	d8e6      	bhi.n	8007104 <__multiply+0x108>
 8007136:	9a01      	ldr	r2, [sp, #4]
 8007138:	50a9      	str	r1, [r5, r2]
 800713a:	3504      	adds	r5, #4
 800713c:	e79b      	b.n	8007076 <__multiply+0x7a>
 800713e:	3e01      	subs	r6, #1
 8007140:	e79d      	b.n	800707e <__multiply+0x82>
 8007142:	bf00      	nop
 8007144:	0800865f 	.word	0x0800865f
 8007148:	08008670 	.word	0x08008670

0800714c <__pow5mult>:
 800714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007150:	4615      	mov	r5, r2
 8007152:	f012 0203 	ands.w	r2, r2, #3
 8007156:	4606      	mov	r6, r0
 8007158:	460f      	mov	r7, r1
 800715a:	d007      	beq.n	800716c <__pow5mult+0x20>
 800715c:	4c25      	ldr	r4, [pc, #148]	; (80071f4 <__pow5mult+0xa8>)
 800715e:	3a01      	subs	r2, #1
 8007160:	2300      	movs	r3, #0
 8007162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007166:	f7ff fe9f 	bl	8006ea8 <__multadd>
 800716a:	4607      	mov	r7, r0
 800716c:	10ad      	asrs	r5, r5, #2
 800716e:	d03d      	beq.n	80071ec <__pow5mult+0xa0>
 8007170:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007172:	b97c      	cbnz	r4, 8007194 <__pow5mult+0x48>
 8007174:	2010      	movs	r0, #16
 8007176:	f7ff fe11 	bl	8006d9c <malloc>
 800717a:	4602      	mov	r2, r0
 800717c:	6270      	str	r0, [r6, #36]	; 0x24
 800717e:	b928      	cbnz	r0, 800718c <__pow5mult+0x40>
 8007180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007184:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <__pow5mult+0xac>)
 8007186:	481d      	ldr	r0, [pc, #116]	; (80071fc <__pow5mult+0xb0>)
 8007188:	f000 fc0a 	bl	80079a0 <__assert_func>
 800718c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007190:	6004      	str	r4, [r0, #0]
 8007192:	60c4      	str	r4, [r0, #12]
 8007194:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800719c:	b94c      	cbnz	r4, 80071b2 <__pow5mult+0x66>
 800719e:	f240 2171 	movw	r1, #625	; 0x271
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff ff14 	bl	8006fd0 <__i2b>
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80071b0:	6003      	str	r3, [r0, #0]
 80071b2:	f04f 0900 	mov.w	r9, #0
 80071b6:	07eb      	lsls	r3, r5, #31
 80071b8:	d50a      	bpl.n	80071d0 <__pow5mult+0x84>
 80071ba:	4639      	mov	r1, r7
 80071bc:	4622      	mov	r2, r4
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff ff1c 	bl	8006ffc <__multiply>
 80071c4:	4680      	mov	r8, r0
 80071c6:	4639      	mov	r1, r7
 80071c8:	4630      	mov	r0, r6
 80071ca:	f7ff fe4b 	bl	8006e64 <_Bfree>
 80071ce:	4647      	mov	r7, r8
 80071d0:	106d      	asrs	r5, r5, #1
 80071d2:	d00b      	beq.n	80071ec <__pow5mult+0xa0>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	b938      	cbnz	r0, 80071e8 <__pow5mult+0x9c>
 80071d8:	4622      	mov	r2, r4
 80071da:	4621      	mov	r1, r4
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff ff0d 	bl	8006ffc <__multiply>
 80071e2:	6020      	str	r0, [r4, #0]
 80071e4:	f8c0 9000 	str.w	r9, [r0]
 80071e8:	4604      	mov	r4, r0
 80071ea:	e7e4      	b.n	80071b6 <__pow5mult+0x6a>
 80071ec:	4638      	mov	r0, r7
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	bf00      	nop
 80071f4:	080087c0 	.word	0x080087c0
 80071f8:	080085ed 	.word	0x080085ed
 80071fc:	08008670 	.word	0x08008670

08007200 <__lshift>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	460c      	mov	r4, r1
 8007206:	4607      	mov	r7, r0
 8007208:	4691      	mov	r9, r2
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	6849      	ldr	r1, [r1, #4]
 800720e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007218:	f108 0601 	add.w	r6, r8, #1
 800721c:	42b3      	cmp	r3, r6
 800721e:	db0b      	blt.n	8007238 <__lshift+0x38>
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff fddf 	bl	8006de4 <_Balloc>
 8007226:	4605      	mov	r5, r0
 8007228:	b948      	cbnz	r0, 800723e <__lshift+0x3e>
 800722a:	4602      	mov	r2, r0
 800722c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007230:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <__lshift+0xd8>)
 8007232:	482a      	ldr	r0, [pc, #168]	; (80072dc <__lshift+0xdc>)
 8007234:	f000 fbb4 	bl	80079a0 <__assert_func>
 8007238:	3101      	adds	r1, #1
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	e7ee      	b.n	800721c <__lshift+0x1c>
 800723e:	2300      	movs	r3, #0
 8007240:	f100 0114 	add.w	r1, r0, #20
 8007244:	f100 0210 	add.w	r2, r0, #16
 8007248:	4618      	mov	r0, r3
 800724a:	4553      	cmp	r3, sl
 800724c:	db37      	blt.n	80072be <__lshift+0xbe>
 800724e:	6920      	ldr	r0, [r4, #16]
 8007250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007254:	f104 0314 	add.w	r3, r4, #20
 8007258:	f019 091f 	ands.w	r9, r9, #31
 800725c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007264:	d02f      	beq.n	80072c6 <__lshift+0xc6>
 8007266:	468a      	mov	sl, r1
 8007268:	f04f 0c00 	mov.w	ip, #0
 800726c:	f1c9 0e20 	rsb	lr, r9, #32
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	fa02 f209 	lsl.w	r2, r2, r9
 8007276:	ea42 020c 	orr.w	r2, r2, ip
 800727a:	f84a 2b04 	str.w	r2, [sl], #4
 800727e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007282:	4298      	cmp	r0, r3
 8007284:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007288:	d8f2      	bhi.n	8007270 <__lshift+0x70>
 800728a:	1b03      	subs	r3, r0, r4
 800728c:	3b15      	subs	r3, #21
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	3304      	adds	r3, #4
 8007294:	f104 0215 	add.w	r2, r4, #21
 8007298:	4290      	cmp	r0, r2
 800729a:	bf38      	it	cc
 800729c:	2304      	movcc	r3, #4
 800729e:	f841 c003 	str.w	ip, [r1, r3]
 80072a2:	f1bc 0f00 	cmp.w	ip, #0
 80072a6:	d001      	beq.n	80072ac <__lshift+0xac>
 80072a8:	f108 0602 	add.w	r6, r8, #2
 80072ac:	3e01      	subs	r6, #1
 80072ae:	4638      	mov	r0, r7
 80072b0:	4621      	mov	r1, r4
 80072b2:	612e      	str	r6, [r5, #16]
 80072b4:	f7ff fdd6 	bl	8006e64 <_Bfree>
 80072b8:	4628      	mov	r0, r5
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	f842 0f04 	str.w	r0, [r2, #4]!
 80072c2:	3301      	adds	r3, #1
 80072c4:	e7c1      	b.n	800724a <__lshift+0x4a>
 80072c6:	3904      	subs	r1, #4
 80072c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072cc:	4298      	cmp	r0, r3
 80072ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80072d2:	d8f9      	bhi.n	80072c8 <__lshift+0xc8>
 80072d4:	e7ea      	b.n	80072ac <__lshift+0xac>
 80072d6:	bf00      	nop
 80072d8:	0800865f 	.word	0x0800865f
 80072dc:	08008670 	.word	0x08008670

080072e0 <__mcmp>:
 80072e0:	4603      	mov	r3, r0
 80072e2:	690a      	ldr	r2, [r1, #16]
 80072e4:	6900      	ldr	r0, [r0, #16]
 80072e6:	b530      	push	{r4, r5, lr}
 80072e8:	1a80      	subs	r0, r0, r2
 80072ea:	d10d      	bne.n	8007308 <__mcmp+0x28>
 80072ec:	3314      	adds	r3, #20
 80072ee:	3114      	adds	r1, #20
 80072f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007300:	4295      	cmp	r5, r2
 8007302:	d002      	beq.n	800730a <__mcmp+0x2a>
 8007304:	d304      	bcc.n	8007310 <__mcmp+0x30>
 8007306:	2001      	movs	r0, #1
 8007308:	bd30      	pop	{r4, r5, pc}
 800730a:	42a3      	cmp	r3, r4
 800730c:	d3f4      	bcc.n	80072f8 <__mcmp+0x18>
 800730e:	e7fb      	b.n	8007308 <__mcmp+0x28>
 8007310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007314:	e7f8      	b.n	8007308 <__mcmp+0x28>
	...

08007318 <__mdiff>:
 8007318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	460d      	mov	r5, r1
 800731e:	4607      	mov	r7, r0
 8007320:	4611      	mov	r1, r2
 8007322:	4628      	mov	r0, r5
 8007324:	4614      	mov	r4, r2
 8007326:	f7ff ffdb 	bl	80072e0 <__mcmp>
 800732a:	1e06      	subs	r6, r0, #0
 800732c:	d111      	bne.n	8007352 <__mdiff+0x3a>
 800732e:	4631      	mov	r1, r6
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff fd57 	bl	8006de4 <_Balloc>
 8007336:	4602      	mov	r2, r0
 8007338:	b928      	cbnz	r0, 8007346 <__mdiff+0x2e>
 800733a:	f240 2132 	movw	r1, #562	; 0x232
 800733e:	4b3a      	ldr	r3, [pc, #232]	; (8007428 <__mdiff+0x110>)
 8007340:	483a      	ldr	r0, [pc, #232]	; (800742c <__mdiff+0x114>)
 8007342:	f000 fb2d 	bl	80079a0 <__assert_func>
 8007346:	2301      	movs	r3, #1
 8007348:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800734c:	4610      	mov	r0, r2
 800734e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	bfa4      	itt	ge
 8007354:	4623      	movge	r3, r4
 8007356:	462c      	movge	r4, r5
 8007358:	4638      	mov	r0, r7
 800735a:	6861      	ldr	r1, [r4, #4]
 800735c:	bfa6      	itte	ge
 800735e:	461d      	movge	r5, r3
 8007360:	2600      	movge	r6, #0
 8007362:	2601      	movlt	r6, #1
 8007364:	f7ff fd3e 	bl	8006de4 <_Balloc>
 8007368:	4602      	mov	r2, r0
 800736a:	b918      	cbnz	r0, 8007374 <__mdiff+0x5c>
 800736c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007370:	4b2d      	ldr	r3, [pc, #180]	; (8007428 <__mdiff+0x110>)
 8007372:	e7e5      	b.n	8007340 <__mdiff+0x28>
 8007374:	f102 0814 	add.w	r8, r2, #20
 8007378:	46c2      	mov	sl, r8
 800737a:	f04f 0c00 	mov.w	ip, #0
 800737e:	6927      	ldr	r7, [r4, #16]
 8007380:	60c6      	str	r6, [r0, #12]
 8007382:	692e      	ldr	r6, [r5, #16]
 8007384:	f104 0014 	add.w	r0, r4, #20
 8007388:	f105 0914 	add.w	r9, r5, #20
 800738c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007390:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007394:	3410      	adds	r4, #16
 8007396:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800739a:	f859 3b04 	ldr.w	r3, [r9], #4
 800739e:	fa1f f18b 	uxth.w	r1, fp
 80073a2:	448c      	add	ip, r1
 80073a4:	b299      	uxth	r1, r3
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	ebac 0101 	sub.w	r1, ip, r1
 80073ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80073b4:	b289      	uxth	r1, r1
 80073b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80073ba:	454e      	cmp	r6, r9
 80073bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80073c0:	f84a 3b04 	str.w	r3, [sl], #4
 80073c4:	d8e7      	bhi.n	8007396 <__mdiff+0x7e>
 80073c6:	1b73      	subs	r3, r6, r5
 80073c8:	3b15      	subs	r3, #21
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	3515      	adds	r5, #21
 80073d0:	3304      	adds	r3, #4
 80073d2:	42ae      	cmp	r6, r5
 80073d4:	bf38      	it	cc
 80073d6:	2304      	movcc	r3, #4
 80073d8:	4418      	add	r0, r3
 80073da:	4443      	add	r3, r8
 80073dc:	461e      	mov	r6, r3
 80073de:	4605      	mov	r5, r0
 80073e0:	4575      	cmp	r5, lr
 80073e2:	d30e      	bcc.n	8007402 <__mdiff+0xea>
 80073e4:	f10e 0103 	add.w	r1, lr, #3
 80073e8:	1a09      	subs	r1, r1, r0
 80073ea:	f021 0103 	bic.w	r1, r1, #3
 80073ee:	3803      	subs	r0, #3
 80073f0:	4586      	cmp	lr, r0
 80073f2:	bf38      	it	cc
 80073f4:	2100      	movcc	r1, #0
 80073f6:	4419      	add	r1, r3
 80073f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80073fc:	b18b      	cbz	r3, 8007422 <__mdiff+0x10a>
 80073fe:	6117      	str	r7, [r2, #16]
 8007400:	e7a4      	b.n	800734c <__mdiff+0x34>
 8007402:	f855 8b04 	ldr.w	r8, [r5], #4
 8007406:	fa1f f188 	uxth.w	r1, r8
 800740a:	4461      	add	r1, ip
 800740c:	140c      	asrs	r4, r1, #16
 800740e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007412:	b289      	uxth	r1, r1
 8007414:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007418:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800741c:	f846 1b04 	str.w	r1, [r6], #4
 8007420:	e7de      	b.n	80073e0 <__mdiff+0xc8>
 8007422:	3f01      	subs	r7, #1
 8007424:	e7e8      	b.n	80073f8 <__mdiff+0xe0>
 8007426:	bf00      	nop
 8007428:	0800865f 	.word	0x0800865f
 800742c:	08008670 	.word	0x08008670

08007430 <__d2b>:
 8007430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007434:	2101      	movs	r1, #1
 8007436:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800743a:	4690      	mov	r8, r2
 800743c:	461d      	mov	r5, r3
 800743e:	f7ff fcd1 	bl	8006de4 <_Balloc>
 8007442:	4604      	mov	r4, r0
 8007444:	b930      	cbnz	r0, 8007454 <__d2b+0x24>
 8007446:	4602      	mov	r2, r0
 8007448:	f240 310a 	movw	r1, #778	; 0x30a
 800744c:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <__d2b+0xb0>)
 800744e:	4825      	ldr	r0, [pc, #148]	; (80074e4 <__d2b+0xb4>)
 8007450:	f000 faa6 	bl	80079a0 <__assert_func>
 8007454:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007458:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800745c:	bb2d      	cbnz	r5, 80074aa <__d2b+0x7a>
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	f1b8 0300 	subs.w	r3, r8, #0
 8007464:	d026      	beq.n	80074b4 <__d2b+0x84>
 8007466:	4668      	mov	r0, sp
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	f7ff fd83 	bl	8006f74 <__lo0bits>
 800746e:	9900      	ldr	r1, [sp, #0]
 8007470:	b1f0      	cbz	r0, 80074b0 <__d2b+0x80>
 8007472:	9a01      	ldr	r2, [sp, #4]
 8007474:	f1c0 0320 	rsb	r3, r0, #32
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	430b      	orrs	r3, r1
 800747e:	40c2      	lsrs	r2, r0
 8007480:	6163      	str	r3, [r4, #20]
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	bf14      	ite	ne
 800748a:	2102      	movne	r1, #2
 800748c:	2101      	moveq	r1, #1
 800748e:	61a3      	str	r3, [r4, #24]
 8007490:	6121      	str	r1, [r4, #16]
 8007492:	b1c5      	cbz	r5, 80074c6 <__d2b+0x96>
 8007494:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007498:	4405      	add	r5, r0
 800749a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800749e:	603d      	str	r5, [r7, #0]
 80074a0:	6030      	str	r0, [r6, #0]
 80074a2:	4620      	mov	r0, r4
 80074a4:	b002      	add	sp, #8
 80074a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ae:	e7d6      	b.n	800745e <__d2b+0x2e>
 80074b0:	6161      	str	r1, [r4, #20]
 80074b2:	e7e7      	b.n	8007484 <__d2b+0x54>
 80074b4:	a801      	add	r0, sp, #4
 80074b6:	f7ff fd5d 	bl	8006f74 <__lo0bits>
 80074ba:	2101      	movs	r1, #1
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	6121      	str	r1, [r4, #16]
 80074c0:	6163      	str	r3, [r4, #20]
 80074c2:	3020      	adds	r0, #32
 80074c4:	e7e5      	b.n	8007492 <__d2b+0x62>
 80074c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80074ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074ce:	6038      	str	r0, [r7, #0]
 80074d0:	6918      	ldr	r0, [r3, #16]
 80074d2:	f7ff fd2f 	bl	8006f34 <__hi0bits>
 80074d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80074da:	6031      	str	r1, [r6, #0]
 80074dc:	e7e1      	b.n	80074a2 <__d2b+0x72>
 80074de:	bf00      	nop
 80074e0:	0800865f 	.word	0x0800865f
 80074e4:	08008670 	.word	0x08008670

080074e8 <_calloc_r>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	fba1 5402 	umull	r5, r4, r1, r2
 80074ee:	b934      	cbnz	r4, 80074fe <_calloc_r+0x16>
 80074f0:	4629      	mov	r1, r5
 80074f2:	f000 f875 	bl	80075e0 <_malloc_r>
 80074f6:	4606      	mov	r6, r0
 80074f8:	b928      	cbnz	r0, 8007506 <_calloc_r+0x1e>
 80074fa:	4630      	mov	r0, r6
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
 80074fe:	220c      	movs	r2, #12
 8007500:	2600      	movs	r6, #0
 8007502:	6002      	str	r2, [r0, #0]
 8007504:	e7f9      	b.n	80074fa <_calloc_r+0x12>
 8007506:	462a      	mov	r2, r5
 8007508:	4621      	mov	r1, r4
 800750a:	f7fe f93f 	bl	800578c <memset>
 800750e:	e7f4      	b.n	80074fa <_calloc_r+0x12>

08007510 <_free_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4605      	mov	r5, r0
 8007514:	2900      	cmp	r1, #0
 8007516:	d040      	beq.n	800759a <_free_r+0x8a>
 8007518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751c:	1f0c      	subs	r4, r1, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfb8      	it	lt
 8007522:	18e4      	addlt	r4, r4, r3
 8007524:	f000 fa98 	bl	8007a58 <__malloc_lock>
 8007528:	4a1c      	ldr	r2, [pc, #112]	; (800759c <_free_r+0x8c>)
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	b933      	cbnz	r3, 800753c <_free_r+0x2c>
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	6014      	str	r4, [r2, #0]
 8007532:	4628      	mov	r0, r5
 8007534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007538:	f000 ba94 	b.w	8007a64 <__malloc_unlock>
 800753c:	42a3      	cmp	r3, r4
 800753e:	d908      	bls.n	8007552 <_free_r+0x42>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	1821      	adds	r1, r4, r0
 8007544:	428b      	cmp	r3, r1
 8007546:	bf01      	itttt	eq
 8007548:	6819      	ldreq	r1, [r3, #0]
 800754a:	685b      	ldreq	r3, [r3, #4]
 800754c:	1809      	addeq	r1, r1, r0
 800754e:	6021      	streq	r1, [r4, #0]
 8007550:	e7ed      	b.n	800752e <_free_r+0x1e>
 8007552:	461a      	mov	r2, r3
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	b10b      	cbz	r3, 800755c <_free_r+0x4c>
 8007558:	42a3      	cmp	r3, r4
 800755a:	d9fa      	bls.n	8007552 <_free_r+0x42>
 800755c:	6811      	ldr	r1, [r2, #0]
 800755e:	1850      	adds	r0, r2, r1
 8007560:	42a0      	cmp	r0, r4
 8007562:	d10b      	bne.n	800757c <_free_r+0x6c>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	4401      	add	r1, r0
 8007568:	1850      	adds	r0, r2, r1
 800756a:	4283      	cmp	r3, r0
 800756c:	6011      	str	r1, [r2, #0]
 800756e:	d1e0      	bne.n	8007532 <_free_r+0x22>
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4401      	add	r1, r0
 8007576:	6011      	str	r1, [r2, #0]
 8007578:	6053      	str	r3, [r2, #4]
 800757a:	e7da      	b.n	8007532 <_free_r+0x22>
 800757c:	d902      	bls.n	8007584 <_free_r+0x74>
 800757e:	230c      	movs	r3, #12
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	e7d6      	b.n	8007532 <_free_r+0x22>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	1821      	adds	r1, r4, r0
 8007588:	428b      	cmp	r3, r1
 800758a:	bf01      	itttt	eq
 800758c:	6819      	ldreq	r1, [r3, #0]
 800758e:	685b      	ldreq	r3, [r3, #4]
 8007590:	1809      	addeq	r1, r1, r0
 8007592:	6021      	streq	r1, [r4, #0]
 8007594:	6063      	str	r3, [r4, #4]
 8007596:	6054      	str	r4, [r2, #4]
 8007598:	e7cb      	b.n	8007532 <_free_r+0x22>
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20000688 	.word	0x20000688

080075a0 <sbrk_aligned>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4e0e      	ldr	r6, [pc, #56]	; (80075dc <sbrk_aligned+0x3c>)
 80075a4:	460c      	mov	r4, r1
 80075a6:	6831      	ldr	r1, [r6, #0]
 80075a8:	4605      	mov	r5, r0
 80075aa:	b911      	cbnz	r1, 80075b2 <sbrk_aligned+0x12>
 80075ac:	f000 f9e8 	bl	8007980 <_sbrk_r>
 80075b0:	6030      	str	r0, [r6, #0]
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f9e3 	bl	8007980 <_sbrk_r>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	d00a      	beq.n	80075d4 <sbrk_aligned+0x34>
 80075be:	1cc4      	adds	r4, r0, #3
 80075c0:	f024 0403 	bic.w	r4, r4, #3
 80075c4:	42a0      	cmp	r0, r4
 80075c6:	d007      	beq.n	80075d8 <sbrk_aligned+0x38>
 80075c8:	1a21      	subs	r1, r4, r0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f9d8 	bl	8007980 <_sbrk_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d101      	bne.n	80075d8 <sbrk_aligned+0x38>
 80075d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075d8:	4620      	mov	r0, r4
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	2000068c 	.word	0x2000068c

080075e0 <_malloc_r>:
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	1ccd      	adds	r5, r1, #3
 80075e6:	f025 0503 	bic.w	r5, r5, #3
 80075ea:	3508      	adds	r5, #8
 80075ec:	2d0c      	cmp	r5, #12
 80075ee:	bf38      	it	cc
 80075f0:	250c      	movcc	r5, #12
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	4607      	mov	r7, r0
 80075f6:	db01      	blt.n	80075fc <_malloc_r+0x1c>
 80075f8:	42a9      	cmp	r1, r5
 80075fa:	d905      	bls.n	8007608 <_malloc_r+0x28>
 80075fc:	230c      	movs	r3, #12
 80075fe:	2600      	movs	r6, #0
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	4630      	mov	r0, r6
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	4e2e      	ldr	r6, [pc, #184]	; (80076c4 <_malloc_r+0xe4>)
 800760a:	f000 fa25 	bl	8007a58 <__malloc_lock>
 800760e:	6833      	ldr	r3, [r6, #0]
 8007610:	461c      	mov	r4, r3
 8007612:	bb34      	cbnz	r4, 8007662 <_malloc_r+0x82>
 8007614:	4629      	mov	r1, r5
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff ffc2 	bl	80075a0 <sbrk_aligned>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	4604      	mov	r4, r0
 8007620:	d14d      	bne.n	80076be <_malloc_r+0xde>
 8007622:	6834      	ldr	r4, [r6, #0]
 8007624:	4626      	mov	r6, r4
 8007626:	2e00      	cmp	r6, #0
 8007628:	d140      	bne.n	80076ac <_malloc_r+0xcc>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	4631      	mov	r1, r6
 800762e:	4638      	mov	r0, r7
 8007630:	eb04 0803 	add.w	r8, r4, r3
 8007634:	f000 f9a4 	bl	8007980 <_sbrk_r>
 8007638:	4580      	cmp	r8, r0
 800763a:	d13a      	bne.n	80076b2 <_malloc_r+0xd2>
 800763c:	6821      	ldr	r1, [r4, #0]
 800763e:	3503      	adds	r5, #3
 8007640:	1a6d      	subs	r5, r5, r1
 8007642:	f025 0503 	bic.w	r5, r5, #3
 8007646:	3508      	adds	r5, #8
 8007648:	2d0c      	cmp	r5, #12
 800764a:	bf38      	it	cc
 800764c:	250c      	movcc	r5, #12
 800764e:	4638      	mov	r0, r7
 8007650:	4629      	mov	r1, r5
 8007652:	f7ff ffa5 	bl	80075a0 <sbrk_aligned>
 8007656:	3001      	adds	r0, #1
 8007658:	d02b      	beq.n	80076b2 <_malloc_r+0xd2>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	442b      	add	r3, r5
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	e00e      	b.n	8007680 <_malloc_r+0xa0>
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	1b52      	subs	r2, r2, r5
 8007666:	d41e      	bmi.n	80076a6 <_malloc_r+0xc6>
 8007668:	2a0b      	cmp	r2, #11
 800766a:	d916      	bls.n	800769a <_malloc_r+0xba>
 800766c:	1961      	adds	r1, r4, r5
 800766e:	42a3      	cmp	r3, r4
 8007670:	6025      	str	r5, [r4, #0]
 8007672:	bf18      	it	ne
 8007674:	6059      	strne	r1, [r3, #4]
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	bf08      	it	eq
 800767a:	6031      	streq	r1, [r6, #0]
 800767c:	5162      	str	r2, [r4, r5]
 800767e:	604b      	str	r3, [r1, #4]
 8007680:	4638      	mov	r0, r7
 8007682:	f104 060b 	add.w	r6, r4, #11
 8007686:	f000 f9ed 	bl	8007a64 <__malloc_unlock>
 800768a:	f026 0607 	bic.w	r6, r6, #7
 800768e:	1d23      	adds	r3, r4, #4
 8007690:	1af2      	subs	r2, r6, r3
 8007692:	d0b6      	beq.n	8007602 <_malloc_r+0x22>
 8007694:	1b9b      	subs	r3, r3, r6
 8007696:	50a3      	str	r3, [r4, r2]
 8007698:	e7b3      	b.n	8007602 <_malloc_r+0x22>
 800769a:	6862      	ldr	r2, [r4, #4]
 800769c:	42a3      	cmp	r3, r4
 800769e:	bf0c      	ite	eq
 80076a0:	6032      	streq	r2, [r6, #0]
 80076a2:	605a      	strne	r2, [r3, #4]
 80076a4:	e7ec      	b.n	8007680 <_malloc_r+0xa0>
 80076a6:	4623      	mov	r3, r4
 80076a8:	6864      	ldr	r4, [r4, #4]
 80076aa:	e7b2      	b.n	8007612 <_malloc_r+0x32>
 80076ac:	4634      	mov	r4, r6
 80076ae:	6876      	ldr	r6, [r6, #4]
 80076b0:	e7b9      	b.n	8007626 <_malloc_r+0x46>
 80076b2:	230c      	movs	r3, #12
 80076b4:	4638      	mov	r0, r7
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	f000 f9d4 	bl	8007a64 <__malloc_unlock>
 80076bc:	e7a1      	b.n	8007602 <_malloc_r+0x22>
 80076be:	6025      	str	r5, [r4, #0]
 80076c0:	e7de      	b.n	8007680 <_malloc_r+0xa0>
 80076c2:	bf00      	nop
 80076c4:	20000688 	.word	0x20000688

080076c8 <__ssputs_r>:
 80076c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076cc:	688e      	ldr	r6, [r1, #8]
 80076ce:	4682      	mov	sl, r0
 80076d0:	429e      	cmp	r6, r3
 80076d2:	460c      	mov	r4, r1
 80076d4:	4690      	mov	r8, r2
 80076d6:	461f      	mov	r7, r3
 80076d8:	d838      	bhi.n	800774c <__ssputs_r+0x84>
 80076da:	898a      	ldrh	r2, [r1, #12]
 80076dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076e0:	d032      	beq.n	8007748 <__ssputs_r+0x80>
 80076e2:	6825      	ldr	r5, [r4, #0]
 80076e4:	6909      	ldr	r1, [r1, #16]
 80076e6:	3301      	adds	r3, #1
 80076e8:	eba5 0901 	sub.w	r9, r5, r1
 80076ec:	6965      	ldr	r5, [r4, #20]
 80076ee:	444b      	add	r3, r9
 80076f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076f8:	106d      	asrs	r5, r5, #1
 80076fa:	429d      	cmp	r5, r3
 80076fc:	bf38      	it	cc
 80076fe:	461d      	movcc	r5, r3
 8007700:	0553      	lsls	r3, r2, #21
 8007702:	d531      	bpl.n	8007768 <__ssputs_r+0xa0>
 8007704:	4629      	mov	r1, r5
 8007706:	f7ff ff6b 	bl	80075e0 <_malloc_r>
 800770a:	4606      	mov	r6, r0
 800770c:	b950      	cbnz	r0, 8007724 <__ssputs_r+0x5c>
 800770e:	230c      	movs	r3, #12
 8007710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007714:	f8ca 3000 	str.w	r3, [sl]
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	464a      	mov	r2, r9
 8007726:	6921      	ldr	r1, [r4, #16]
 8007728:	f7ff fb4e 	bl	8006dc8 <memcpy>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	6126      	str	r6, [r4, #16]
 800773a:	444e      	add	r6, r9
 800773c:	6026      	str	r6, [r4, #0]
 800773e:	463e      	mov	r6, r7
 8007740:	6165      	str	r5, [r4, #20]
 8007742:	eba5 0509 	sub.w	r5, r5, r9
 8007746:	60a5      	str	r5, [r4, #8]
 8007748:	42be      	cmp	r6, r7
 800774a:	d900      	bls.n	800774e <__ssputs_r+0x86>
 800774c:	463e      	mov	r6, r7
 800774e:	4632      	mov	r2, r6
 8007750:	4641      	mov	r1, r8
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	f000 f966 	bl	8007a24 <memmove>
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	2000      	movs	r0, #0
 800775c:	1b9b      	subs	r3, r3, r6
 800775e:	60a3      	str	r3, [r4, #8]
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	4433      	add	r3, r6
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	e7db      	b.n	8007720 <__ssputs_r+0x58>
 8007768:	462a      	mov	r2, r5
 800776a:	f000 f981 	bl	8007a70 <_realloc_r>
 800776e:	4606      	mov	r6, r0
 8007770:	2800      	cmp	r0, #0
 8007772:	d1e1      	bne.n	8007738 <__ssputs_r+0x70>
 8007774:	4650      	mov	r0, sl
 8007776:	6921      	ldr	r1, [r4, #16]
 8007778:	f7ff feca 	bl	8007510 <_free_r>
 800777c:	e7c7      	b.n	800770e <__ssputs_r+0x46>
	...

08007780 <_svfiprintf_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4698      	mov	r8, r3
 8007786:	898b      	ldrh	r3, [r1, #12]
 8007788:	4607      	mov	r7, r0
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	460d      	mov	r5, r1
 800778e:	4614      	mov	r4, r2
 8007790:	b09d      	sub	sp, #116	; 0x74
 8007792:	d50e      	bpl.n	80077b2 <_svfiprintf_r+0x32>
 8007794:	690b      	ldr	r3, [r1, #16]
 8007796:	b963      	cbnz	r3, 80077b2 <_svfiprintf_r+0x32>
 8007798:	2140      	movs	r1, #64	; 0x40
 800779a:	f7ff ff21 	bl	80075e0 <_malloc_r>
 800779e:	6028      	str	r0, [r5, #0]
 80077a0:	6128      	str	r0, [r5, #16]
 80077a2:	b920      	cbnz	r0, 80077ae <_svfiprintf_r+0x2e>
 80077a4:	230c      	movs	r3, #12
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ac:	e0d1      	b.n	8007952 <_svfiprintf_r+0x1d2>
 80077ae:	2340      	movs	r3, #64	; 0x40
 80077b0:	616b      	str	r3, [r5, #20]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	2320      	movs	r3, #32
 80077b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077bc:	2330      	movs	r3, #48	; 0x30
 80077be:	f04f 0901 	mov.w	r9, #1
 80077c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800796c <_svfiprintf_r+0x1ec>
 80077ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ce:	4623      	mov	r3, r4
 80077d0:	469a      	mov	sl, r3
 80077d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d6:	b10a      	cbz	r2, 80077dc <_svfiprintf_r+0x5c>
 80077d8:	2a25      	cmp	r2, #37	; 0x25
 80077da:	d1f9      	bne.n	80077d0 <_svfiprintf_r+0x50>
 80077dc:	ebba 0b04 	subs.w	fp, sl, r4
 80077e0:	d00b      	beq.n	80077fa <_svfiprintf_r+0x7a>
 80077e2:	465b      	mov	r3, fp
 80077e4:	4622      	mov	r2, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ff6d 	bl	80076c8 <__ssputs_r>
 80077ee:	3001      	adds	r0, #1
 80077f0:	f000 80aa 	beq.w	8007948 <_svfiprintf_r+0x1c8>
 80077f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f6:	445a      	add	r2, fp
 80077f8:	9209      	str	r2, [sp, #36]	; 0x24
 80077fa:	f89a 3000 	ldrb.w	r3, [sl]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80a2 	beq.w	8007948 <_svfiprintf_r+0x1c8>
 8007804:	2300      	movs	r3, #0
 8007806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800780a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780e:	f10a 0a01 	add.w	sl, sl, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	9307      	str	r3, [sp, #28]
 8007816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800781a:	931a      	str	r3, [sp, #104]	; 0x68
 800781c:	4654      	mov	r4, sl
 800781e:	2205      	movs	r2, #5
 8007820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007824:	4851      	ldr	r0, [pc, #324]	; (800796c <_svfiprintf_r+0x1ec>)
 8007826:	f7ff fac1 	bl	8006dac <memchr>
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	b9d8      	cbnz	r0, 8007866 <_svfiprintf_r+0xe6>
 800782e:	06d0      	lsls	r0, r2, #27
 8007830:	bf44      	itt	mi
 8007832:	2320      	movmi	r3, #32
 8007834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007838:	0711      	lsls	r1, r2, #28
 800783a:	bf44      	itt	mi
 800783c:	232b      	movmi	r3, #43	; 0x2b
 800783e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007842:	f89a 3000 	ldrb.w	r3, [sl]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d015      	beq.n	8007876 <_svfiprintf_r+0xf6>
 800784a:	4654      	mov	r4, sl
 800784c:	2000      	movs	r0, #0
 800784e:	f04f 0c0a 	mov.w	ip, #10
 8007852:	9a07      	ldr	r2, [sp, #28]
 8007854:	4621      	mov	r1, r4
 8007856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800785a:	3b30      	subs	r3, #48	; 0x30
 800785c:	2b09      	cmp	r3, #9
 800785e:	d94e      	bls.n	80078fe <_svfiprintf_r+0x17e>
 8007860:	b1b0      	cbz	r0, 8007890 <_svfiprintf_r+0x110>
 8007862:	9207      	str	r2, [sp, #28]
 8007864:	e014      	b.n	8007890 <_svfiprintf_r+0x110>
 8007866:	eba0 0308 	sub.w	r3, r0, r8
 800786a:	fa09 f303 	lsl.w	r3, r9, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	46a2      	mov	sl, r4
 8007872:	9304      	str	r3, [sp, #16]
 8007874:	e7d2      	b.n	800781c <_svfiprintf_r+0x9c>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	1d19      	adds	r1, r3, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	9103      	str	r1, [sp, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfbb      	ittet	lt
 8007882:	425b      	neglt	r3, r3
 8007884:	f042 0202 	orrlt.w	r2, r2, #2
 8007888:	9307      	strge	r3, [sp, #28]
 800788a:	9307      	strlt	r3, [sp, #28]
 800788c:	bfb8      	it	lt
 800788e:	9204      	strlt	r2, [sp, #16]
 8007890:	7823      	ldrb	r3, [r4, #0]
 8007892:	2b2e      	cmp	r3, #46	; 0x2e
 8007894:	d10c      	bne.n	80078b0 <_svfiprintf_r+0x130>
 8007896:	7863      	ldrb	r3, [r4, #1]
 8007898:	2b2a      	cmp	r3, #42	; 0x2a
 800789a:	d135      	bne.n	8007908 <_svfiprintf_r+0x188>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	3402      	adds	r4, #2
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	9203      	str	r2, [sp, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bfb8      	it	lt
 80078aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078ae:	9305      	str	r3, [sp, #20]
 80078b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007970 <_svfiprintf_r+0x1f0>
 80078b4:	2203      	movs	r2, #3
 80078b6:	4650      	mov	r0, sl
 80078b8:	7821      	ldrb	r1, [r4, #0]
 80078ba:	f7ff fa77 	bl	8006dac <memchr>
 80078be:	b140      	cbz	r0, 80078d2 <_svfiprintf_r+0x152>
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	eba0 000a 	sub.w	r0, r0, sl
 80078c6:	fa03 f000 	lsl.w	r0, r3, r0
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	3401      	adds	r4, #1
 80078ce:	4303      	orrs	r3, r0
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d6:	2206      	movs	r2, #6
 80078d8:	4826      	ldr	r0, [pc, #152]	; (8007974 <_svfiprintf_r+0x1f4>)
 80078da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078de:	f7ff fa65 	bl	8006dac <memchr>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d038      	beq.n	8007958 <_svfiprintf_r+0x1d8>
 80078e6:	4b24      	ldr	r3, [pc, #144]	; (8007978 <_svfiprintf_r+0x1f8>)
 80078e8:	bb1b      	cbnz	r3, 8007932 <_svfiprintf_r+0x1b2>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	3307      	adds	r3, #7
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	3308      	adds	r3, #8
 80078f4:	9303      	str	r3, [sp, #12]
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	4433      	add	r3, r6
 80078fa:	9309      	str	r3, [sp, #36]	; 0x24
 80078fc:	e767      	b.n	80077ce <_svfiprintf_r+0x4e>
 80078fe:	460c      	mov	r4, r1
 8007900:	2001      	movs	r0, #1
 8007902:	fb0c 3202 	mla	r2, ip, r2, r3
 8007906:	e7a5      	b.n	8007854 <_svfiprintf_r+0xd4>
 8007908:	2300      	movs	r3, #0
 800790a:	f04f 0c0a 	mov.w	ip, #10
 800790e:	4619      	mov	r1, r3
 8007910:	3401      	adds	r4, #1
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	4620      	mov	r0, r4
 8007916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800791a:	3a30      	subs	r2, #48	; 0x30
 800791c:	2a09      	cmp	r2, #9
 800791e:	d903      	bls.n	8007928 <_svfiprintf_r+0x1a8>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0c5      	beq.n	80078b0 <_svfiprintf_r+0x130>
 8007924:	9105      	str	r1, [sp, #20]
 8007926:	e7c3      	b.n	80078b0 <_svfiprintf_r+0x130>
 8007928:	4604      	mov	r4, r0
 800792a:	2301      	movs	r3, #1
 800792c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007930:	e7f0      	b.n	8007914 <_svfiprintf_r+0x194>
 8007932:	ab03      	add	r3, sp, #12
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	462a      	mov	r2, r5
 8007938:	4638      	mov	r0, r7
 800793a:	4b10      	ldr	r3, [pc, #64]	; (800797c <_svfiprintf_r+0x1fc>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	f7fd ffcb 	bl	80058d8 <_printf_float>
 8007942:	1c42      	adds	r2, r0, #1
 8007944:	4606      	mov	r6, r0
 8007946:	d1d6      	bne.n	80078f6 <_svfiprintf_r+0x176>
 8007948:	89ab      	ldrh	r3, [r5, #12]
 800794a:	065b      	lsls	r3, r3, #25
 800794c:	f53f af2c 	bmi.w	80077a8 <_svfiprintf_r+0x28>
 8007950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007952:	b01d      	add	sp, #116	; 0x74
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	ab03      	add	r3, sp, #12
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	462a      	mov	r2, r5
 800795e:	4638      	mov	r0, r7
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <_svfiprintf_r+0x1fc>)
 8007962:	a904      	add	r1, sp, #16
 8007964:	f7fe fa54 	bl	8005e10 <_printf_i>
 8007968:	e7eb      	b.n	8007942 <_svfiprintf_r+0x1c2>
 800796a:	bf00      	nop
 800796c:	080087cc 	.word	0x080087cc
 8007970:	080087d2 	.word	0x080087d2
 8007974:	080087d6 	.word	0x080087d6
 8007978:	080058d9 	.word	0x080058d9
 800797c:	080076c9 	.word	0x080076c9

08007980 <_sbrk_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	2300      	movs	r3, #0
 8007984:	4d05      	ldr	r5, [pc, #20]	; (800799c <_sbrk_r+0x1c>)
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	602b      	str	r3, [r5, #0]
 800798c:	f7f9 ff3a 	bl	8001804 <_sbrk>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_sbrk_r+0x1a>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_sbrk_r+0x1a>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000690 	.word	0x20000690

080079a0 <__assert_func>:
 80079a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079a2:	4614      	mov	r4, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <__assert_func+0x2c>)
 80079a8:	4605      	mov	r5, r0
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68d8      	ldr	r0, [r3, #12]
 80079ae:	b14c      	cbz	r4, 80079c4 <__assert_func+0x24>
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <__assert_func+0x30>)
 80079b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079b6:	9100      	str	r1, [sp, #0]
 80079b8:	462b      	mov	r3, r5
 80079ba:	4906      	ldr	r1, [pc, #24]	; (80079d4 <__assert_func+0x34>)
 80079bc:	f000 f80e 	bl	80079dc <fiprintf>
 80079c0:	f000 faaa 	bl	8007f18 <abort>
 80079c4:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <__assert_func+0x38>)
 80079c6:	461c      	mov	r4, r3
 80079c8:	e7f3      	b.n	80079b2 <__assert_func+0x12>
 80079ca:	bf00      	nop
 80079cc:	20000018 	.word	0x20000018
 80079d0:	080087dd 	.word	0x080087dd
 80079d4:	080087ea 	.word	0x080087ea
 80079d8:	08008818 	.word	0x08008818

080079dc <fiprintf>:
 80079dc:	b40e      	push	{r1, r2, r3}
 80079de:	b503      	push	{r0, r1, lr}
 80079e0:	4601      	mov	r1, r0
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	4805      	ldr	r0, [pc, #20]	; (80079fc <fiprintf+0x20>)
 80079e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	f000 f895 	bl	8007b1c <_vfiprintf_r>
 80079f2:	b002      	add	sp, #8
 80079f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079f8:	b003      	add	sp, #12
 80079fa:	4770      	bx	lr
 80079fc:	20000018 	.word	0x20000018

08007a00 <__ascii_mbtowc>:
 8007a00:	b082      	sub	sp, #8
 8007a02:	b901      	cbnz	r1, 8007a06 <__ascii_mbtowc+0x6>
 8007a04:	a901      	add	r1, sp, #4
 8007a06:	b142      	cbz	r2, 8007a1a <__ascii_mbtowc+0x1a>
 8007a08:	b14b      	cbz	r3, 8007a1e <__ascii_mbtowc+0x1e>
 8007a0a:	7813      	ldrb	r3, [r2, #0]
 8007a0c:	600b      	str	r3, [r1, #0]
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	1e10      	subs	r0, r2, #0
 8007a12:	bf18      	it	ne
 8007a14:	2001      	movne	r0, #1
 8007a16:	b002      	add	sp, #8
 8007a18:	4770      	bx	lr
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	e7fb      	b.n	8007a16 <__ascii_mbtowc+0x16>
 8007a1e:	f06f 0001 	mvn.w	r0, #1
 8007a22:	e7f8      	b.n	8007a16 <__ascii_mbtowc+0x16>

08007a24 <memmove>:
 8007a24:	4288      	cmp	r0, r1
 8007a26:	b510      	push	{r4, lr}
 8007a28:	eb01 0402 	add.w	r4, r1, r2
 8007a2c:	d902      	bls.n	8007a34 <memmove+0x10>
 8007a2e:	4284      	cmp	r4, r0
 8007a30:	4623      	mov	r3, r4
 8007a32:	d807      	bhi.n	8007a44 <memmove+0x20>
 8007a34:	1e43      	subs	r3, r0, #1
 8007a36:	42a1      	cmp	r1, r4
 8007a38:	d008      	beq.n	8007a4c <memmove+0x28>
 8007a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a42:	e7f8      	b.n	8007a36 <memmove+0x12>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4402      	add	r2, r0
 8007a48:	428a      	cmp	r2, r1
 8007a4a:	d100      	bne.n	8007a4e <memmove+0x2a>
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a56:	e7f7      	b.n	8007a48 <memmove+0x24>

08007a58 <__malloc_lock>:
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <__malloc_lock+0x8>)
 8007a5a:	f000 bc19 	b.w	8008290 <__retarget_lock_acquire_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20000694 	.word	0x20000694

08007a64 <__malloc_unlock>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__malloc_unlock+0x8>)
 8007a66:	f000 bc14 	b.w	8008292 <__retarget_lock_release_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	20000694 	.word	0x20000694

08007a70 <_realloc_r>:
 8007a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a74:	4680      	mov	r8, r0
 8007a76:	4614      	mov	r4, r2
 8007a78:	460e      	mov	r6, r1
 8007a7a:	b921      	cbnz	r1, 8007a86 <_realloc_r+0x16>
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	f7ff bdad 	b.w	80075e0 <_malloc_r>
 8007a86:	b92a      	cbnz	r2, 8007a94 <_realloc_r+0x24>
 8007a88:	f7ff fd42 	bl	8007510 <_free_r>
 8007a8c:	4625      	mov	r5, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a94:	f000 fc64 	bl	8008360 <_malloc_usable_size_r>
 8007a98:	4284      	cmp	r4, r0
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	d802      	bhi.n	8007aa4 <_realloc_r+0x34>
 8007a9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007aa2:	d812      	bhi.n	8007aca <_realloc_r+0x5a>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	f7ff fd9a 	bl	80075e0 <_malloc_r>
 8007aac:	4605      	mov	r5, r0
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d0ed      	beq.n	8007a8e <_realloc_r+0x1e>
 8007ab2:	42bc      	cmp	r4, r7
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	bf28      	it	cs
 8007aba:	463a      	movcs	r2, r7
 8007abc:	f7ff f984 	bl	8006dc8 <memcpy>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7ff fd24 	bl	8007510 <_free_r>
 8007ac8:	e7e1      	b.n	8007a8e <_realloc_r+0x1e>
 8007aca:	4635      	mov	r5, r6
 8007acc:	e7df      	b.n	8007a8e <_realloc_r+0x1e>

08007ace <__sfputc_r>:
 8007ace:	6893      	ldr	r3, [r2, #8]
 8007ad0:	b410      	push	{r4}
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	6093      	str	r3, [r2, #8]
 8007ad8:	da07      	bge.n	8007aea <__sfputc_r+0x1c>
 8007ada:	6994      	ldr	r4, [r2, #24]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	db01      	blt.n	8007ae4 <__sfputc_r+0x16>
 8007ae0:	290a      	cmp	r1, #10
 8007ae2:	d102      	bne.n	8007aea <__sfputc_r+0x1c>
 8007ae4:	bc10      	pop	{r4}
 8007ae6:	f000 b949 	b.w	8007d7c <__swbuf_r>
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	1c58      	adds	r0, r3, #1
 8007aee:	6010      	str	r0, [r2, #0]
 8007af0:	7019      	strb	r1, [r3, #0]
 8007af2:	4608      	mov	r0, r1
 8007af4:	bc10      	pop	{r4}
 8007af6:	4770      	bx	lr

08007af8 <__sfputs_r>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	4606      	mov	r6, r0
 8007afc:	460f      	mov	r7, r1
 8007afe:	4614      	mov	r4, r2
 8007b00:	18d5      	adds	r5, r2, r3
 8007b02:	42ac      	cmp	r4, r5
 8007b04:	d101      	bne.n	8007b0a <__sfputs_r+0x12>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e007      	b.n	8007b1a <__sfputs_r+0x22>
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b12:	f7ff ffdc 	bl	8007ace <__sfputc_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d1f3      	bne.n	8007b02 <__sfputs_r+0xa>
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b1c <_vfiprintf_r>:
 8007b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	460d      	mov	r5, r1
 8007b22:	4614      	mov	r4, r2
 8007b24:	4698      	mov	r8, r3
 8007b26:	4606      	mov	r6, r0
 8007b28:	b09d      	sub	sp, #116	; 0x74
 8007b2a:	b118      	cbz	r0, 8007b34 <_vfiprintf_r+0x18>
 8007b2c:	6983      	ldr	r3, [r0, #24]
 8007b2e:	b90b      	cbnz	r3, 8007b34 <_vfiprintf_r+0x18>
 8007b30:	f000 fb10 	bl	8008154 <__sinit>
 8007b34:	4b89      	ldr	r3, [pc, #548]	; (8007d5c <_vfiprintf_r+0x240>)
 8007b36:	429d      	cmp	r5, r3
 8007b38:	d11b      	bne.n	8007b72 <_vfiprintf_r+0x56>
 8007b3a:	6875      	ldr	r5, [r6, #4]
 8007b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b3e:	07d9      	lsls	r1, r3, #31
 8007b40:	d405      	bmi.n	8007b4e <_vfiprintf_r+0x32>
 8007b42:	89ab      	ldrh	r3, [r5, #12]
 8007b44:	059a      	lsls	r2, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_vfiprintf_r+0x32>
 8007b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4a:	f000 fba1 	bl	8008290 <__retarget_lock_acquire_recursive>
 8007b4e:	89ab      	ldrh	r3, [r5, #12]
 8007b50:	071b      	lsls	r3, r3, #28
 8007b52:	d501      	bpl.n	8007b58 <_vfiprintf_r+0x3c>
 8007b54:	692b      	ldr	r3, [r5, #16]
 8007b56:	b9eb      	cbnz	r3, 8007b94 <_vfiprintf_r+0x78>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f000 f96e 	bl	8007e3c <__swsetup_r>
 8007b60:	b1c0      	cbz	r0, 8007b94 <_vfiprintf_r+0x78>
 8007b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b64:	07dc      	lsls	r4, r3, #31
 8007b66:	d50e      	bpl.n	8007b86 <_vfiprintf_r+0x6a>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b6c:	b01d      	add	sp, #116	; 0x74
 8007b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b72:	4b7b      	ldr	r3, [pc, #492]	; (8007d60 <_vfiprintf_r+0x244>)
 8007b74:	429d      	cmp	r5, r3
 8007b76:	d101      	bne.n	8007b7c <_vfiprintf_r+0x60>
 8007b78:	68b5      	ldr	r5, [r6, #8]
 8007b7a:	e7df      	b.n	8007b3c <_vfiprintf_r+0x20>
 8007b7c:	4b79      	ldr	r3, [pc, #484]	; (8007d64 <_vfiprintf_r+0x248>)
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	bf08      	it	eq
 8007b82:	68f5      	ldreq	r5, [r6, #12]
 8007b84:	e7da      	b.n	8007b3c <_vfiprintf_r+0x20>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	0598      	lsls	r0, r3, #22
 8007b8a:	d4ed      	bmi.n	8007b68 <_vfiprintf_r+0x4c>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8e:	f000 fb80 	bl	8008292 <__retarget_lock_release_recursive>
 8007b92:	e7e9      	b.n	8007b68 <_vfiprintf_r+0x4c>
 8007b94:	2300      	movs	r3, #0
 8007b96:	9309      	str	r3, [sp, #36]	; 0x24
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b9e:	2330      	movs	r3, #48	; 0x30
 8007ba0:	f04f 0901 	mov.w	r9, #1
 8007ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007d68 <_vfiprintf_r+0x24c>
 8007bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	469a      	mov	sl, r3
 8007bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb8:	b10a      	cbz	r2, 8007bbe <_vfiprintf_r+0xa2>
 8007bba:	2a25      	cmp	r2, #37	; 0x25
 8007bbc:	d1f9      	bne.n	8007bb2 <_vfiprintf_r+0x96>
 8007bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc2:	d00b      	beq.n	8007bdc <_vfiprintf_r+0xc0>
 8007bc4:	465b      	mov	r3, fp
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff ff94 	bl	8007af8 <__sfputs_r>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f000 80aa 	beq.w	8007d2a <_vfiprintf_r+0x20e>
 8007bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd8:	445a      	add	r2, fp
 8007bda:	9209      	str	r2, [sp, #36]	; 0x24
 8007bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80a2 	beq.w	8007d2a <_vfiprintf_r+0x20e>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf0:	f10a 0a01 	add.w	sl, sl, #1
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	9307      	str	r3, [sp, #28]
 8007bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8007bfe:	4654      	mov	r4, sl
 8007c00:	2205      	movs	r2, #5
 8007c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c06:	4858      	ldr	r0, [pc, #352]	; (8007d68 <_vfiprintf_r+0x24c>)
 8007c08:	f7ff f8d0 	bl	8006dac <memchr>
 8007c0c:	9a04      	ldr	r2, [sp, #16]
 8007c0e:	b9d8      	cbnz	r0, 8007c48 <_vfiprintf_r+0x12c>
 8007c10:	06d1      	lsls	r1, r2, #27
 8007c12:	bf44      	itt	mi
 8007c14:	2320      	movmi	r3, #32
 8007c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c1a:	0713      	lsls	r3, r2, #28
 8007c1c:	bf44      	itt	mi
 8007c1e:	232b      	movmi	r3, #43	; 0x2b
 8007c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c24:	f89a 3000 	ldrb.w	r3, [sl]
 8007c28:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2a:	d015      	beq.n	8007c58 <_vfiprintf_r+0x13c>
 8007c2c:	4654      	mov	r4, sl
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f04f 0c0a 	mov.w	ip, #10
 8007c34:	9a07      	ldr	r2, [sp, #28]
 8007c36:	4621      	mov	r1, r4
 8007c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c3c:	3b30      	subs	r3, #48	; 0x30
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	d94e      	bls.n	8007ce0 <_vfiprintf_r+0x1c4>
 8007c42:	b1b0      	cbz	r0, 8007c72 <_vfiprintf_r+0x156>
 8007c44:	9207      	str	r2, [sp, #28]
 8007c46:	e014      	b.n	8007c72 <_vfiprintf_r+0x156>
 8007c48:	eba0 0308 	sub.w	r3, r0, r8
 8007c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	46a2      	mov	sl, r4
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	e7d2      	b.n	8007bfe <_vfiprintf_r+0xe2>
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	1d19      	adds	r1, r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	9103      	str	r1, [sp, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bfbb      	ittet	lt
 8007c64:	425b      	neglt	r3, r3
 8007c66:	f042 0202 	orrlt.w	r2, r2, #2
 8007c6a:	9307      	strge	r3, [sp, #28]
 8007c6c:	9307      	strlt	r3, [sp, #28]
 8007c6e:	bfb8      	it	lt
 8007c70:	9204      	strlt	r2, [sp, #16]
 8007c72:	7823      	ldrb	r3, [r4, #0]
 8007c74:	2b2e      	cmp	r3, #46	; 0x2e
 8007c76:	d10c      	bne.n	8007c92 <_vfiprintf_r+0x176>
 8007c78:	7863      	ldrb	r3, [r4, #1]
 8007c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c7c:	d135      	bne.n	8007cea <_vfiprintf_r+0x1ce>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	3402      	adds	r4, #2
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	9203      	str	r2, [sp, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bfb8      	it	lt
 8007c8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007d6c <_vfiprintf_r+0x250>
 8007c96:	2203      	movs	r2, #3
 8007c98:	4650      	mov	r0, sl
 8007c9a:	7821      	ldrb	r1, [r4, #0]
 8007c9c:	f7ff f886 	bl	8006dac <memchr>
 8007ca0:	b140      	cbz	r0, 8007cb4 <_vfiprintf_r+0x198>
 8007ca2:	2340      	movs	r3, #64	; 0x40
 8007ca4:	eba0 000a 	sub.w	r0, r0, sl
 8007ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	3401      	adds	r4, #1
 8007cb0:	4303      	orrs	r3, r0
 8007cb2:	9304      	str	r3, [sp, #16]
 8007cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb8:	2206      	movs	r2, #6
 8007cba:	482d      	ldr	r0, [pc, #180]	; (8007d70 <_vfiprintf_r+0x254>)
 8007cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cc0:	f7ff f874 	bl	8006dac <memchr>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d03f      	beq.n	8007d48 <_vfiprintf_r+0x22c>
 8007cc8:	4b2a      	ldr	r3, [pc, #168]	; (8007d74 <_vfiprintf_r+0x258>)
 8007cca:	bb1b      	cbnz	r3, 8007d14 <_vfiprintf_r+0x1f8>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	3307      	adds	r3, #7
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cda:	443b      	add	r3, r7
 8007cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cde:	e767      	b.n	8007bb0 <_vfiprintf_r+0x94>
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ce8:	e7a5      	b.n	8007c36 <_vfiprintf_r+0x11a>
 8007cea:	2300      	movs	r3, #0
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	3401      	adds	r4, #1
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cfc:	3a30      	subs	r2, #48	; 0x30
 8007cfe:	2a09      	cmp	r2, #9
 8007d00:	d903      	bls.n	8007d0a <_vfiprintf_r+0x1ee>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0c5      	beq.n	8007c92 <_vfiprintf_r+0x176>
 8007d06:	9105      	str	r1, [sp, #20]
 8007d08:	e7c3      	b.n	8007c92 <_vfiprintf_r+0x176>
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d12:	e7f0      	b.n	8007cf6 <_vfiprintf_r+0x1da>
 8007d14:	ab03      	add	r3, sp, #12
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	462a      	mov	r2, r5
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <_vfiprintf_r+0x25c>)
 8007d1e:	a904      	add	r1, sp, #16
 8007d20:	f7fd fdda 	bl	80058d8 <_printf_float>
 8007d24:	4607      	mov	r7, r0
 8007d26:	1c78      	adds	r0, r7, #1
 8007d28:	d1d6      	bne.n	8007cd8 <_vfiprintf_r+0x1bc>
 8007d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d2c:	07d9      	lsls	r1, r3, #31
 8007d2e:	d405      	bmi.n	8007d3c <_vfiprintf_r+0x220>
 8007d30:	89ab      	ldrh	r3, [r5, #12]
 8007d32:	059a      	lsls	r2, r3, #22
 8007d34:	d402      	bmi.n	8007d3c <_vfiprintf_r+0x220>
 8007d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d38:	f000 faab 	bl	8008292 <__retarget_lock_release_recursive>
 8007d3c:	89ab      	ldrh	r3, [r5, #12]
 8007d3e:	065b      	lsls	r3, r3, #25
 8007d40:	f53f af12 	bmi.w	8007b68 <_vfiprintf_r+0x4c>
 8007d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d46:	e711      	b.n	8007b6c <_vfiprintf_r+0x50>
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	462a      	mov	r2, r5
 8007d4e:	4630      	mov	r0, r6
 8007d50:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <_vfiprintf_r+0x25c>)
 8007d52:	a904      	add	r1, sp, #16
 8007d54:	f7fe f85c 	bl	8005e10 <_printf_i>
 8007d58:	e7e4      	b.n	8007d24 <_vfiprintf_r+0x208>
 8007d5a:	bf00      	nop
 8007d5c:	08008944 	.word	0x08008944
 8007d60:	08008964 	.word	0x08008964
 8007d64:	08008924 	.word	0x08008924
 8007d68:	080087cc 	.word	0x080087cc
 8007d6c:	080087d2 	.word	0x080087d2
 8007d70:	080087d6 	.word	0x080087d6
 8007d74:	080058d9 	.word	0x080058d9
 8007d78:	08007af9 	.word	0x08007af9

08007d7c <__swbuf_r>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	460e      	mov	r6, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	4605      	mov	r5, r0
 8007d84:	b118      	cbz	r0, 8007d8e <__swbuf_r+0x12>
 8007d86:	6983      	ldr	r3, [r0, #24]
 8007d88:	b90b      	cbnz	r3, 8007d8e <__swbuf_r+0x12>
 8007d8a:	f000 f9e3 	bl	8008154 <__sinit>
 8007d8e:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <__swbuf_r+0x98>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d12b      	bne.n	8007dec <__swbuf_r+0x70>
 8007d94:	686c      	ldr	r4, [r5, #4]
 8007d96:	69a3      	ldr	r3, [r4, #24]
 8007d98:	60a3      	str	r3, [r4, #8]
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	071a      	lsls	r2, r3, #28
 8007d9e:	d52f      	bpl.n	8007e00 <__swbuf_r+0x84>
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	b36b      	cbz	r3, 8007e00 <__swbuf_r+0x84>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	6820      	ldr	r0, [r4, #0]
 8007da8:	b2f6      	uxtb	r6, r6
 8007daa:	1ac0      	subs	r0, r0, r3
 8007dac:	6963      	ldr	r3, [r4, #20]
 8007dae:	4637      	mov	r7, r6
 8007db0:	4283      	cmp	r3, r0
 8007db2:	dc04      	bgt.n	8007dbe <__swbuf_r+0x42>
 8007db4:	4621      	mov	r1, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f938 	bl	800802c <_fflush_r>
 8007dbc:	bb30      	cbnz	r0, 8007e0c <__swbuf_r+0x90>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	6022      	str	r2, [r4, #0]
 8007dcc:	701e      	strb	r6, [r3, #0]
 8007dce:	6963      	ldr	r3, [r4, #20]
 8007dd0:	4283      	cmp	r3, r0
 8007dd2:	d004      	beq.n	8007dde <__swbuf_r+0x62>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	07db      	lsls	r3, r3, #31
 8007dd8:	d506      	bpl.n	8007de8 <__swbuf_r+0x6c>
 8007dda:	2e0a      	cmp	r6, #10
 8007ddc:	d104      	bne.n	8007de8 <__swbuf_r+0x6c>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 f923 	bl	800802c <_fflush_r>
 8007de6:	b988      	cbnz	r0, 8007e0c <__swbuf_r+0x90>
 8007de8:	4638      	mov	r0, r7
 8007dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <__swbuf_r+0x9c>)
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d101      	bne.n	8007df6 <__swbuf_r+0x7a>
 8007df2:	68ac      	ldr	r4, [r5, #8]
 8007df4:	e7cf      	b.n	8007d96 <__swbuf_r+0x1a>
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <__swbuf_r+0xa0>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	bf08      	it	eq
 8007dfc:	68ec      	ldreq	r4, [r5, #12]
 8007dfe:	e7ca      	b.n	8007d96 <__swbuf_r+0x1a>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f81a 	bl	8007e3c <__swsetup_r>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d0cb      	beq.n	8007da4 <__swbuf_r+0x28>
 8007e0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e10:	e7ea      	b.n	8007de8 <__swbuf_r+0x6c>
 8007e12:	bf00      	nop
 8007e14:	08008944 	.word	0x08008944
 8007e18:	08008964 	.word	0x08008964
 8007e1c:	08008924 	.word	0x08008924

08007e20 <__ascii_wctomb>:
 8007e20:	4603      	mov	r3, r0
 8007e22:	4608      	mov	r0, r1
 8007e24:	b141      	cbz	r1, 8007e38 <__ascii_wctomb+0x18>
 8007e26:	2aff      	cmp	r2, #255	; 0xff
 8007e28:	d904      	bls.n	8007e34 <__ascii_wctomb+0x14>
 8007e2a:	228a      	movs	r2, #138	; 0x8a
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	4770      	bx	lr
 8007e34:	2001      	movs	r0, #1
 8007e36:	700a      	strb	r2, [r1, #0]
 8007e38:	4770      	bx	lr
	...

08007e3c <__swsetup_r>:
 8007e3c:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <__swsetup_r+0xcc>)
 8007e3e:	b570      	push	{r4, r5, r6, lr}
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	4606      	mov	r6, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	b125      	cbz	r5, 8007e52 <__swsetup_r+0x16>
 8007e48:	69ab      	ldr	r3, [r5, #24]
 8007e4a:	b913      	cbnz	r3, 8007e52 <__swsetup_r+0x16>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 f981 	bl	8008154 <__sinit>
 8007e52:	4b2e      	ldr	r3, [pc, #184]	; (8007f0c <__swsetup_r+0xd0>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	d10f      	bne.n	8007e78 <__swsetup_r+0x3c>
 8007e58:	686c      	ldr	r4, [r5, #4]
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e60:	0719      	lsls	r1, r3, #28
 8007e62:	d42c      	bmi.n	8007ebe <__swsetup_r+0x82>
 8007e64:	06dd      	lsls	r5, r3, #27
 8007e66:	d411      	bmi.n	8007e8c <__swsetup_r+0x50>
 8007e68:	2309      	movs	r3, #9
 8007e6a:	6033      	str	r3, [r6, #0]
 8007e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	e03e      	b.n	8007ef6 <__swsetup_r+0xba>
 8007e78:	4b25      	ldr	r3, [pc, #148]	; (8007f10 <__swsetup_r+0xd4>)
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	d101      	bne.n	8007e82 <__swsetup_r+0x46>
 8007e7e:	68ac      	ldr	r4, [r5, #8]
 8007e80:	e7eb      	b.n	8007e5a <__swsetup_r+0x1e>
 8007e82:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <__swsetup_r+0xd8>)
 8007e84:	429c      	cmp	r4, r3
 8007e86:	bf08      	it	eq
 8007e88:	68ec      	ldreq	r4, [r5, #12]
 8007e8a:	e7e6      	b.n	8007e5a <__swsetup_r+0x1e>
 8007e8c:	0758      	lsls	r0, r3, #29
 8007e8e:	d512      	bpl.n	8007eb6 <__swsetup_r+0x7a>
 8007e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e92:	b141      	cbz	r1, 8007ea6 <__swsetup_r+0x6a>
 8007e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <__swsetup_r+0x66>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff fb37 	bl	8007510 <_free_r>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f043 0308 	orr.w	r3, r3, #8
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	b94b      	cbnz	r3, 8007ed6 <__swsetup_r+0x9a>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ecc:	d003      	beq.n	8007ed6 <__swsetup_r+0x9a>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 fa05 	bl	80082e0 <__smakebuf_r>
 8007ed6:	89a0      	ldrh	r0, [r4, #12]
 8007ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007edc:	f010 0301 	ands.w	r3, r0, #1
 8007ee0:	d00a      	beq.n	8007ef8 <__swsetup_r+0xbc>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	6963      	ldr	r3, [r4, #20]
 8007ee8:	425b      	negs	r3, r3
 8007eea:	61a3      	str	r3, [r4, #24]
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	b943      	cbnz	r3, 8007f02 <__swsetup_r+0xc6>
 8007ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ef4:	d1ba      	bne.n	8007e6c <__swsetup_r+0x30>
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	0781      	lsls	r1, r0, #30
 8007efa:	bf58      	it	pl
 8007efc:	6963      	ldrpl	r3, [r4, #20]
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	e7f4      	b.n	8007eec <__swsetup_r+0xb0>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e7f7      	b.n	8007ef6 <__swsetup_r+0xba>
 8007f06:	bf00      	nop
 8007f08:	20000018 	.word	0x20000018
 8007f0c:	08008944 	.word	0x08008944
 8007f10:	08008964 	.word	0x08008964
 8007f14:	08008924 	.word	0x08008924

08007f18 <abort>:
 8007f18:	2006      	movs	r0, #6
 8007f1a:	b508      	push	{r3, lr}
 8007f1c:	f000 fa50 	bl	80083c0 <raise>
 8007f20:	2001      	movs	r0, #1
 8007f22:	f7f9 fbfc 	bl	800171e <_exit>
	...

08007f28 <__sflush_r>:
 8007f28:	898a      	ldrh	r2, [r1, #12]
 8007f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	0710      	lsls	r0, r2, #28
 8007f30:	460c      	mov	r4, r1
 8007f32:	d457      	bmi.n	8007fe4 <__sflush_r+0xbc>
 8007f34:	684b      	ldr	r3, [r1, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	dc04      	bgt.n	8007f44 <__sflush_r+0x1c>
 8007f3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dc01      	bgt.n	8007f44 <__sflush_r+0x1c>
 8007f40:	2000      	movs	r0, #0
 8007f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	d0fa      	beq.n	8007f40 <__sflush_r+0x18>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f50:	682f      	ldr	r7, [r5, #0]
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	d032      	beq.n	8007fbc <__sflush_r+0x94>
 8007f56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	075a      	lsls	r2, r3, #29
 8007f5c:	d505      	bpl.n	8007f6a <__sflush_r+0x42>
 8007f5e:	6863      	ldr	r3, [r4, #4]
 8007f60:	1ac0      	subs	r0, r0, r3
 8007f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f64:	b10b      	cbz	r3, 8007f6a <__sflush_r+0x42>
 8007f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f68:	1ac0      	subs	r0, r0, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f70:	4628      	mov	r0, r5
 8007f72:	6a21      	ldr	r1, [r4, #32]
 8007f74:	47b0      	blx	r6
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	d106      	bne.n	8007f8a <__sflush_r+0x62>
 8007f7c:	6829      	ldr	r1, [r5, #0]
 8007f7e:	291d      	cmp	r1, #29
 8007f80:	d82c      	bhi.n	8007fdc <__sflush_r+0xb4>
 8007f82:	4a29      	ldr	r2, [pc, #164]	; (8008028 <__sflush_r+0x100>)
 8007f84:	40ca      	lsrs	r2, r1
 8007f86:	07d6      	lsls	r6, r2, #31
 8007f88:	d528      	bpl.n	8007fdc <__sflush_r+0xb4>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	6062      	str	r2, [r4, #4]
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	04d9      	lsls	r1, r3, #19
 8007f92:	6022      	str	r2, [r4, #0]
 8007f94:	d504      	bpl.n	8007fa0 <__sflush_r+0x78>
 8007f96:	1c42      	adds	r2, r0, #1
 8007f98:	d101      	bne.n	8007f9e <__sflush_r+0x76>
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	b903      	cbnz	r3, 8007fa0 <__sflush_r+0x78>
 8007f9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa2:	602f      	str	r7, [r5, #0]
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d0cb      	beq.n	8007f40 <__sflush_r+0x18>
 8007fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d002      	beq.n	8007fb6 <__sflush_r+0x8e>
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7ff faad 	bl	8007510 <_free_r>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8007fba:	e7c2      	b.n	8007f42 <__sflush_r+0x1a>
 8007fbc:	6a21      	ldr	r1, [r4, #32]
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b0      	blx	r6
 8007fc4:	1c41      	adds	r1, r0, #1
 8007fc6:	d1c7      	bne.n	8007f58 <__sflush_r+0x30>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0c4      	beq.n	8007f58 <__sflush_r+0x30>
 8007fce:	2b1d      	cmp	r3, #29
 8007fd0:	d001      	beq.n	8007fd6 <__sflush_r+0xae>
 8007fd2:	2b16      	cmp	r3, #22
 8007fd4:	d101      	bne.n	8007fda <__sflush_r+0xb2>
 8007fd6:	602f      	str	r7, [r5, #0]
 8007fd8:	e7b2      	b.n	8007f40 <__sflush_r+0x18>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	e7ae      	b.n	8007f42 <__sflush_r+0x1a>
 8007fe4:	690f      	ldr	r7, [r1, #16]
 8007fe6:	2f00      	cmp	r7, #0
 8007fe8:	d0aa      	beq.n	8007f40 <__sflush_r+0x18>
 8007fea:	0793      	lsls	r3, r2, #30
 8007fec:	bf18      	it	ne
 8007fee:	2300      	movne	r3, #0
 8007ff0:	680e      	ldr	r6, [r1, #0]
 8007ff2:	bf08      	it	eq
 8007ff4:	694b      	ldreq	r3, [r1, #20]
 8007ff6:	1bf6      	subs	r6, r6, r7
 8007ff8:	600f      	str	r7, [r1, #0]
 8007ffa:	608b      	str	r3, [r1, #8]
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	dd9f      	ble.n	8007f40 <__sflush_r+0x18>
 8008000:	4633      	mov	r3, r6
 8008002:	463a      	mov	r2, r7
 8008004:	4628      	mov	r0, r5
 8008006:	6a21      	ldr	r1, [r4, #32]
 8008008:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800800c:	47e0      	blx	ip
 800800e:	2800      	cmp	r0, #0
 8008010:	dc06      	bgt.n	8008020 <__sflush_r+0xf8>
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801c:	81a3      	strh	r3, [r4, #12]
 800801e:	e790      	b.n	8007f42 <__sflush_r+0x1a>
 8008020:	4407      	add	r7, r0
 8008022:	1a36      	subs	r6, r6, r0
 8008024:	e7ea      	b.n	8007ffc <__sflush_r+0xd4>
 8008026:	bf00      	nop
 8008028:	20400001 	.word	0x20400001

0800802c <_fflush_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	690b      	ldr	r3, [r1, #16]
 8008030:	4605      	mov	r5, r0
 8008032:	460c      	mov	r4, r1
 8008034:	b913      	cbnz	r3, 800803c <_fflush_r+0x10>
 8008036:	2500      	movs	r5, #0
 8008038:	4628      	mov	r0, r5
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	b118      	cbz	r0, 8008046 <_fflush_r+0x1a>
 800803e:	6983      	ldr	r3, [r0, #24]
 8008040:	b90b      	cbnz	r3, 8008046 <_fflush_r+0x1a>
 8008042:	f000 f887 	bl	8008154 <__sinit>
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <_fflush_r+0x6c>)
 8008048:	429c      	cmp	r4, r3
 800804a:	d11b      	bne.n	8008084 <_fflush_r+0x58>
 800804c:	686c      	ldr	r4, [r5, #4]
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0ef      	beq.n	8008036 <_fflush_r+0xa>
 8008056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008058:	07d0      	lsls	r0, r2, #31
 800805a:	d404      	bmi.n	8008066 <_fflush_r+0x3a>
 800805c:	0599      	lsls	r1, r3, #22
 800805e:	d402      	bmi.n	8008066 <_fflush_r+0x3a>
 8008060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008062:	f000 f915 	bl	8008290 <__retarget_lock_acquire_recursive>
 8008066:	4628      	mov	r0, r5
 8008068:	4621      	mov	r1, r4
 800806a:	f7ff ff5d 	bl	8007f28 <__sflush_r>
 800806e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008070:	4605      	mov	r5, r0
 8008072:	07da      	lsls	r2, r3, #31
 8008074:	d4e0      	bmi.n	8008038 <_fflush_r+0xc>
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	059b      	lsls	r3, r3, #22
 800807a:	d4dd      	bmi.n	8008038 <_fflush_r+0xc>
 800807c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800807e:	f000 f908 	bl	8008292 <__retarget_lock_release_recursive>
 8008082:	e7d9      	b.n	8008038 <_fflush_r+0xc>
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <_fflush_r+0x70>)
 8008086:	429c      	cmp	r4, r3
 8008088:	d101      	bne.n	800808e <_fflush_r+0x62>
 800808a:	68ac      	ldr	r4, [r5, #8]
 800808c:	e7df      	b.n	800804e <_fflush_r+0x22>
 800808e:	4b04      	ldr	r3, [pc, #16]	; (80080a0 <_fflush_r+0x74>)
 8008090:	429c      	cmp	r4, r3
 8008092:	bf08      	it	eq
 8008094:	68ec      	ldreq	r4, [r5, #12]
 8008096:	e7da      	b.n	800804e <_fflush_r+0x22>
 8008098:	08008944 	.word	0x08008944
 800809c:	08008964 	.word	0x08008964
 80080a0:	08008924 	.word	0x08008924

080080a4 <std>:
 80080a4:	2300      	movs	r3, #0
 80080a6:	b510      	push	{r4, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	e9c0 3300 	strd	r3, r3, [r0]
 80080ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b2:	6083      	str	r3, [r0, #8]
 80080b4:	8181      	strh	r1, [r0, #12]
 80080b6:	6643      	str	r3, [r0, #100]	; 0x64
 80080b8:	81c2      	strh	r2, [r0, #14]
 80080ba:	6183      	str	r3, [r0, #24]
 80080bc:	4619      	mov	r1, r3
 80080be:	2208      	movs	r2, #8
 80080c0:	305c      	adds	r0, #92	; 0x5c
 80080c2:	f7fd fb63 	bl	800578c <memset>
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <std+0x38>)
 80080c8:	6224      	str	r4, [r4, #32]
 80080ca:	6263      	str	r3, [r4, #36]	; 0x24
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <std+0x3c>)
 80080ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <std+0x40>)
 80080d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080d4:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <std+0x44>)
 80080d6:	6323      	str	r3, [r4, #48]	; 0x30
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	bf00      	nop
 80080dc:	080083f9 	.word	0x080083f9
 80080e0:	0800841b 	.word	0x0800841b
 80080e4:	08008453 	.word	0x08008453
 80080e8:	08008477 	.word	0x08008477

080080ec <_cleanup_r>:
 80080ec:	4901      	ldr	r1, [pc, #4]	; (80080f4 <_cleanup_r+0x8>)
 80080ee:	f000 b8af 	b.w	8008250 <_fwalk_reent>
 80080f2:	bf00      	nop
 80080f4:	0800802d 	.word	0x0800802d

080080f8 <__sfmoreglue>:
 80080f8:	2268      	movs	r2, #104	; 0x68
 80080fa:	b570      	push	{r4, r5, r6, lr}
 80080fc:	1e4d      	subs	r5, r1, #1
 80080fe:	4355      	muls	r5, r2
 8008100:	460e      	mov	r6, r1
 8008102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008106:	f7ff fa6b 	bl	80075e0 <_malloc_r>
 800810a:	4604      	mov	r4, r0
 800810c:	b140      	cbz	r0, 8008120 <__sfmoreglue+0x28>
 800810e:	2100      	movs	r1, #0
 8008110:	e9c0 1600 	strd	r1, r6, [r0]
 8008114:	300c      	adds	r0, #12
 8008116:	60a0      	str	r0, [r4, #8]
 8008118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800811c:	f7fd fb36 	bl	800578c <memset>
 8008120:	4620      	mov	r0, r4
 8008122:	bd70      	pop	{r4, r5, r6, pc}

08008124 <__sfp_lock_acquire>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__sfp_lock_acquire+0x8>)
 8008126:	f000 b8b3 	b.w	8008290 <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	20000695 	.word	0x20000695

08008130 <__sfp_lock_release>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__sfp_lock_release+0x8>)
 8008132:	f000 b8ae 	b.w	8008292 <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	20000695 	.word	0x20000695

0800813c <__sinit_lock_acquire>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__sinit_lock_acquire+0x8>)
 800813e:	f000 b8a7 	b.w	8008290 <__retarget_lock_acquire_recursive>
 8008142:	bf00      	nop
 8008144:	20000696 	.word	0x20000696

08008148 <__sinit_lock_release>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__sinit_lock_release+0x8>)
 800814a:	f000 b8a2 	b.w	8008292 <__retarget_lock_release_recursive>
 800814e:	bf00      	nop
 8008150:	20000696 	.word	0x20000696

08008154 <__sinit>:
 8008154:	b510      	push	{r4, lr}
 8008156:	4604      	mov	r4, r0
 8008158:	f7ff fff0 	bl	800813c <__sinit_lock_acquire>
 800815c:	69a3      	ldr	r3, [r4, #24]
 800815e:	b11b      	cbz	r3, 8008168 <__sinit+0x14>
 8008160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008164:	f7ff bff0 	b.w	8008148 <__sinit_lock_release>
 8008168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800816c:	6523      	str	r3, [r4, #80]	; 0x50
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <__sinit+0x68>)
 8008170:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <__sinit+0x6c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	62a2      	str	r2, [r4, #40]	; 0x28
 8008176:	42a3      	cmp	r3, r4
 8008178:	bf08      	it	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	4620      	mov	r0, r4
 800817e:	bf08      	it	eq
 8008180:	61a3      	streq	r3, [r4, #24]
 8008182:	f000 f81f 	bl	80081c4 <__sfp>
 8008186:	6060      	str	r0, [r4, #4]
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f81b 	bl	80081c4 <__sfp>
 800818e:	60a0      	str	r0, [r4, #8]
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f817 	bl	80081c4 <__sfp>
 8008196:	2200      	movs	r2, #0
 8008198:	2104      	movs	r1, #4
 800819a:	60e0      	str	r0, [r4, #12]
 800819c:	6860      	ldr	r0, [r4, #4]
 800819e:	f7ff ff81 	bl	80080a4 <std>
 80081a2:	2201      	movs	r2, #1
 80081a4:	2109      	movs	r1, #9
 80081a6:	68a0      	ldr	r0, [r4, #8]
 80081a8:	f7ff ff7c 	bl	80080a4 <std>
 80081ac:	2202      	movs	r2, #2
 80081ae:	2112      	movs	r1, #18
 80081b0:	68e0      	ldr	r0, [r4, #12]
 80081b2:	f7ff ff77 	bl	80080a4 <std>
 80081b6:	2301      	movs	r3, #1
 80081b8:	61a3      	str	r3, [r4, #24]
 80081ba:	e7d1      	b.n	8008160 <__sinit+0xc>
 80081bc:	080085a8 	.word	0x080085a8
 80081c0:	080080ed 	.word	0x080080ed

080081c4 <__sfp>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	4607      	mov	r7, r0
 80081c8:	f7ff ffac 	bl	8008124 <__sfp_lock_acquire>
 80081cc:	4b1e      	ldr	r3, [pc, #120]	; (8008248 <__sfp+0x84>)
 80081ce:	681e      	ldr	r6, [r3, #0]
 80081d0:	69b3      	ldr	r3, [r6, #24]
 80081d2:	b913      	cbnz	r3, 80081da <__sfp+0x16>
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff ffbd 	bl	8008154 <__sinit>
 80081da:	3648      	adds	r6, #72	; 0x48
 80081dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	d503      	bpl.n	80081ec <__sfp+0x28>
 80081e4:	6833      	ldr	r3, [r6, #0]
 80081e6:	b30b      	cbz	r3, 800822c <__sfp+0x68>
 80081e8:	6836      	ldr	r6, [r6, #0]
 80081ea:	e7f7      	b.n	80081dc <__sfp+0x18>
 80081ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081f0:	b9d5      	cbnz	r5, 8008228 <__sfp+0x64>
 80081f2:	4b16      	ldr	r3, [pc, #88]	; (800824c <__sfp+0x88>)
 80081f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081f8:	60e3      	str	r3, [r4, #12]
 80081fa:	6665      	str	r5, [r4, #100]	; 0x64
 80081fc:	f000 f847 	bl	800828e <__retarget_lock_init_recursive>
 8008200:	f7ff ff96 	bl	8008130 <__sfp_lock_release>
 8008204:	2208      	movs	r2, #8
 8008206:	4629      	mov	r1, r5
 8008208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800820c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008210:	6025      	str	r5, [r4, #0]
 8008212:	61a5      	str	r5, [r4, #24]
 8008214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008218:	f7fd fab8 	bl	800578c <memset>
 800821c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008224:	4620      	mov	r0, r4
 8008226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008228:	3468      	adds	r4, #104	; 0x68
 800822a:	e7d9      	b.n	80081e0 <__sfp+0x1c>
 800822c:	2104      	movs	r1, #4
 800822e:	4638      	mov	r0, r7
 8008230:	f7ff ff62 	bl	80080f8 <__sfmoreglue>
 8008234:	4604      	mov	r4, r0
 8008236:	6030      	str	r0, [r6, #0]
 8008238:	2800      	cmp	r0, #0
 800823a:	d1d5      	bne.n	80081e8 <__sfp+0x24>
 800823c:	f7ff ff78 	bl	8008130 <__sfp_lock_release>
 8008240:	230c      	movs	r3, #12
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	e7ee      	b.n	8008224 <__sfp+0x60>
 8008246:	bf00      	nop
 8008248:	080085a8 	.word	0x080085a8
 800824c:	ffff0001 	.word	0xffff0001

08008250 <_fwalk_reent>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4606      	mov	r6, r0
 8008256:	4688      	mov	r8, r1
 8008258:	2700      	movs	r7, #0
 800825a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800825e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008262:	f1b9 0901 	subs.w	r9, r9, #1
 8008266:	d505      	bpl.n	8008274 <_fwalk_reent+0x24>
 8008268:	6824      	ldr	r4, [r4, #0]
 800826a:	2c00      	cmp	r4, #0
 800826c:	d1f7      	bne.n	800825e <_fwalk_reent+0xe>
 800826e:	4638      	mov	r0, r7
 8008270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008274:	89ab      	ldrh	r3, [r5, #12]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d907      	bls.n	800828a <_fwalk_reent+0x3a>
 800827a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800827e:	3301      	adds	r3, #1
 8008280:	d003      	beq.n	800828a <_fwalk_reent+0x3a>
 8008282:	4629      	mov	r1, r5
 8008284:	4630      	mov	r0, r6
 8008286:	47c0      	blx	r8
 8008288:	4307      	orrs	r7, r0
 800828a:	3568      	adds	r5, #104	; 0x68
 800828c:	e7e9      	b.n	8008262 <_fwalk_reent+0x12>

0800828e <__retarget_lock_init_recursive>:
 800828e:	4770      	bx	lr

08008290 <__retarget_lock_acquire_recursive>:
 8008290:	4770      	bx	lr

08008292 <__retarget_lock_release_recursive>:
 8008292:	4770      	bx	lr

08008294 <__swhatbuf_r>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	460e      	mov	r6, r1
 8008298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829c:	4614      	mov	r4, r2
 800829e:	2900      	cmp	r1, #0
 80082a0:	461d      	mov	r5, r3
 80082a2:	b096      	sub	sp, #88	; 0x58
 80082a4:	da08      	bge.n	80082b8 <__swhatbuf_r+0x24>
 80082a6:	2200      	movs	r2, #0
 80082a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082ac:	602a      	str	r2, [r5, #0]
 80082ae:	061a      	lsls	r2, r3, #24
 80082b0:	d410      	bmi.n	80082d4 <__swhatbuf_r+0x40>
 80082b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082b6:	e00e      	b.n	80082d6 <__swhatbuf_r+0x42>
 80082b8:	466a      	mov	r2, sp
 80082ba:	f000 f903 	bl	80084c4 <_fstat_r>
 80082be:	2800      	cmp	r0, #0
 80082c0:	dbf1      	blt.n	80082a6 <__swhatbuf_r+0x12>
 80082c2:	9a01      	ldr	r2, [sp, #4]
 80082c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082cc:	425a      	negs	r2, r3
 80082ce:	415a      	adcs	r2, r3
 80082d0:	602a      	str	r2, [r5, #0]
 80082d2:	e7ee      	b.n	80082b2 <__swhatbuf_r+0x1e>
 80082d4:	2340      	movs	r3, #64	; 0x40
 80082d6:	2000      	movs	r0, #0
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	b016      	add	sp, #88	; 0x58
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080082e0 <__smakebuf_r>:
 80082e0:	898b      	ldrh	r3, [r1, #12]
 80082e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082e4:	079d      	lsls	r5, r3, #30
 80082e6:	4606      	mov	r6, r0
 80082e8:	460c      	mov	r4, r1
 80082ea:	d507      	bpl.n	80082fc <__smakebuf_r+0x1c>
 80082ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	2301      	movs	r3, #1
 80082f6:	6163      	str	r3, [r4, #20]
 80082f8:	b002      	add	sp, #8
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	466a      	mov	r2, sp
 80082fe:	ab01      	add	r3, sp, #4
 8008300:	f7ff ffc8 	bl	8008294 <__swhatbuf_r>
 8008304:	9900      	ldr	r1, [sp, #0]
 8008306:	4605      	mov	r5, r0
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff f969 	bl	80075e0 <_malloc_r>
 800830e:	b948      	cbnz	r0, 8008324 <__smakebuf_r+0x44>
 8008310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008314:	059a      	lsls	r2, r3, #22
 8008316:	d4ef      	bmi.n	80082f8 <__smakebuf_r+0x18>
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	f043 0302 	orr.w	r3, r3, #2
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	e7e3      	b.n	80082ec <__smakebuf_r+0xc>
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <__smakebuf_r+0x7c>)
 8008326:	62b3      	str	r3, [r6, #40]	; 0x28
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	6020      	str	r0, [r4, #0]
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	6120      	str	r0, [r4, #16]
 8008336:	6163      	str	r3, [r4, #20]
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	b15b      	cbz	r3, 8008354 <__smakebuf_r+0x74>
 800833c:	4630      	mov	r0, r6
 800833e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008342:	f000 f8d1 	bl	80084e8 <_isatty_r>
 8008346:	b128      	cbz	r0, 8008354 <__smakebuf_r+0x74>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	89a0      	ldrh	r0, [r4, #12]
 8008356:	4305      	orrs	r5, r0
 8008358:	81a5      	strh	r5, [r4, #12]
 800835a:	e7cd      	b.n	80082f8 <__smakebuf_r+0x18>
 800835c:	080080ed 	.word	0x080080ed

08008360 <_malloc_usable_size_r>:
 8008360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008364:	1f18      	subs	r0, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfbc      	itt	lt
 800836a:	580b      	ldrlt	r3, [r1, r0]
 800836c:	18c0      	addlt	r0, r0, r3
 800836e:	4770      	bx	lr

08008370 <_raise_r>:
 8008370:	291f      	cmp	r1, #31
 8008372:	b538      	push	{r3, r4, r5, lr}
 8008374:	4604      	mov	r4, r0
 8008376:	460d      	mov	r5, r1
 8008378:	d904      	bls.n	8008384 <_raise_r+0x14>
 800837a:	2316      	movs	r3, #22
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008386:	b112      	cbz	r2, 800838e <_raise_r+0x1e>
 8008388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800838c:	b94b      	cbnz	r3, 80083a2 <_raise_r+0x32>
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f830 	bl	80083f4 <_getpid_r>
 8008394:	462a      	mov	r2, r5
 8008396:	4601      	mov	r1, r0
 8008398:	4620      	mov	r0, r4
 800839a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839e:	f000 b817 	b.w	80083d0 <_kill_r>
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d00a      	beq.n	80083bc <_raise_r+0x4c>
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	d103      	bne.n	80083b2 <_raise_r+0x42>
 80083aa:	2316      	movs	r3, #22
 80083ac:	6003      	str	r3, [r0, #0]
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7e7      	b.n	8008382 <_raise_r+0x12>
 80083b2:	2400      	movs	r4, #0
 80083b4:	4628      	mov	r0, r5
 80083b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083ba:	4798      	blx	r3
 80083bc:	2000      	movs	r0, #0
 80083be:	e7e0      	b.n	8008382 <_raise_r+0x12>

080083c0 <raise>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <raise+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f7ff bfd3 	b.w	8008370 <_raise_r>
 80083ca:	bf00      	nop
 80083cc:	20000018 	.word	0x20000018

080083d0 <_kill_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	2300      	movs	r3, #0
 80083d4:	4d06      	ldr	r5, [pc, #24]	; (80083f0 <_kill_r+0x20>)
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f7f9 f98e 	bl	80016fe <_kill>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d102      	bne.n	80083ec <_kill_r+0x1c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b103      	cbz	r3, 80083ec <_kill_r+0x1c>
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	20000690 	.word	0x20000690

080083f4 <_getpid_r>:
 80083f4:	f7f9 b97c 	b.w	80016f0 <_getpid>

080083f8 <__sread>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	460c      	mov	r4, r1
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	f000 f894 	bl	800852c <_read_r>
 8008404:	2800      	cmp	r0, #0
 8008406:	bfab      	itete	ge
 8008408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800840a:	89a3      	ldrhlt	r3, [r4, #12]
 800840c:	181b      	addge	r3, r3, r0
 800840e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008412:	bfac      	ite	ge
 8008414:	6563      	strge	r3, [r4, #84]	; 0x54
 8008416:	81a3      	strhlt	r3, [r4, #12]
 8008418:	bd10      	pop	{r4, pc}

0800841a <__swrite>:
 800841a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	461f      	mov	r7, r3
 8008420:	898b      	ldrh	r3, [r1, #12]
 8008422:	4605      	mov	r5, r0
 8008424:	05db      	lsls	r3, r3, #23
 8008426:	460c      	mov	r4, r1
 8008428:	4616      	mov	r6, r2
 800842a:	d505      	bpl.n	8008438 <__swrite+0x1e>
 800842c:	2302      	movs	r3, #2
 800842e:	2200      	movs	r2, #0
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	f000 f868 	bl	8008508 <_lseek_r>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	4632      	mov	r2, r6
 800843c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	4628      	mov	r0, r5
 8008444:	463b      	mov	r3, r7
 8008446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844e:	f000 b817 	b.w	8008480 <_write_r>

08008452 <__sseek>:
 8008452:	b510      	push	{r4, lr}
 8008454:	460c      	mov	r4, r1
 8008456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845a:	f000 f855 	bl	8008508 <_lseek_r>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	bf15      	itete	ne
 8008464:	6560      	strne	r0, [r4, #84]	; 0x54
 8008466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800846a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800846e:	81a3      	strheq	r3, [r4, #12]
 8008470:	bf18      	it	ne
 8008472:	81a3      	strhne	r3, [r4, #12]
 8008474:	bd10      	pop	{r4, pc}

08008476 <__sclose>:
 8008476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847a:	f000 b813 	b.w	80084a4 <_close_r>
	...

08008480 <_write_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	2200      	movs	r2, #0
 800848a:	4d05      	ldr	r5, [pc, #20]	; (80084a0 <_write_r+0x20>)
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f7f9 f96c 	bl	800176c <_write>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_write_r+0x1e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_write_r+0x1e>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20000690 	.word	0x20000690

080084a4 <_close_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	2300      	movs	r3, #0
 80084a8:	4d05      	ldr	r5, [pc, #20]	; (80084c0 <_close_r+0x1c>)
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	602b      	str	r3, [r5, #0]
 80084b0:	f7f9 f978 	bl	80017a4 <_close>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_close_r+0x1a>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_close_r+0x1a>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000690 	.word	0x20000690

080084c4 <_fstat_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	2300      	movs	r3, #0
 80084c8:	4d06      	ldr	r5, [pc, #24]	; (80084e4 <_fstat_r+0x20>)
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	f7f9 f972 	bl	80017ba <_fstat>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	d102      	bne.n	80084e0 <_fstat_r+0x1c>
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	b103      	cbz	r3, 80084e0 <_fstat_r+0x1c>
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	20000690 	.word	0x20000690

080084e8 <_isatty_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	2300      	movs	r3, #0
 80084ec:	4d05      	ldr	r5, [pc, #20]	; (8008504 <_isatty_r+0x1c>)
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7f9 f970 	bl	80017d8 <_isatty>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_isatty_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_isatty_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	20000690 	.word	0x20000690

08008508 <_lseek_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	2200      	movs	r2, #0
 8008512:	4d05      	ldr	r5, [pc, #20]	; (8008528 <_lseek_r+0x20>)
 8008514:	602a      	str	r2, [r5, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	f7f9 f968 	bl	80017ec <_lseek>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <_lseek_r+0x1e>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	b103      	cbz	r3, 8008526 <_lseek_r+0x1e>
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	20000690 	.word	0x20000690

0800852c <_read_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	4611      	mov	r1, r2
 8008534:	2200      	movs	r2, #0
 8008536:	4d05      	ldr	r5, [pc, #20]	; (800854c <_read_r+0x20>)
 8008538:	602a      	str	r2, [r5, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f7f9 f8f9 	bl	8001732 <_read>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_read_r+0x1e>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_read_r+0x1e>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	20000690 	.word	0x20000690

08008550 <_init>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr

0800855c <_fini>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr
