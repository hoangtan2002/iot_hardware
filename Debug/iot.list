
iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005274  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080053e8  080053e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e8  080053e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080053f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000074  08005464  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08005464  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e16d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002134  00000000  00000000  0002e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00030340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000312a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001849b  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dc1  00000000  00000000  0004a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cffe  00000000  00000000  0005b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e83ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  000e840c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005368 	.word	0x08005368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005368 	.word	0x08005368

0800014c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a13      	ldr	r2, [pc, #76]	; (80001a8 <HAL_UART_RxCpltCallback+0x5c>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d120      	bne.n	80001a0 <HAL_UART_RxCpltCallback+0x54>
		//HAL_UART_Transmit(&huart1, &buffer_byte, 1, 500);
		buffer[index_buffer] = buffer_byte;
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	461a      	mov	r2, r3
 8000164:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <HAL_UART_RxCpltCallback+0x64>)
 8000166:	7819      	ldrb	r1, [r3, #0]
 8000168:	4b12      	ldr	r3, [pc, #72]	; (80001b4 <HAL_UART_RxCpltCallback+0x68>)
 800016a:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 800016c:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	3301      	adds	r3, #1
 8000172:	b2da      	uxtb	r2, r3
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 8000176:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE){
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b0a      	cmp	r3, #10
 800017e:	d104      	bne.n	800018a <HAL_UART_RxCpltCallback+0x3e>
			index_buffer = 0;
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
			resetBuf();
 8000186:	f000 fd33 	bl	8000bf0 <resetBuf>
		}
		buffer_flag++;
 800018a:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <HAL_UART_RxCpltCallback+0x6c>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	3301      	adds	r3, #1
 8000190:	b2da      	uxtb	r2, r3
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000194:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &buffer_byte, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	4905      	ldr	r1, [pc, #20]	; (80001b0 <HAL_UART_RxCpltCallback+0x64>)
 800019a:	4808      	ldr	r0, [pc, #32]	; (80001bc <HAL_UART_RxCpltCallback+0x70>)
 800019c:	f003 ffdf 	bl	800415e <HAL_UART_Receive_IT>
	}
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40013800 	.word	0x40013800
 80001ac:	200004ea 	.word	0x200004ea
 80001b0:	200004ec 	.word	0x200004ec
 80001b4:	200004e0 	.word	0x200004e0
 80001b8:	200004eb 	.word	0x200004eb
 80001bc:	2000049c 	.word	0x2000049c

080001c0 <ledToggle>:

void ledToggle(){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001c4:	2120      	movs	r1, #32
 80001c6:	4802      	ldr	r0, [pc, #8]	; (80001d0 <ledToggle+0x10>)
 80001c8:	f001 f9c2 	bl	8001550 <HAL_GPIO_TogglePin>
};
 80001cc:	bf00      	nop
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	40010800 	.word	0x40010800

080001d4 <fsmWrapper>:

void fsmWrapper(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	if(buffer_flag > 0){
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <fsmWrapper+0x20>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d007      	beq.n	80001f0 <fsmWrapper+0x1c>
		command_parser_fsm();
 80001e0:	f000 fd20 	bl	8000c24 <command_parser_fsm>
		buffer_flag--;
 80001e4:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <fsmWrapper+0x20>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	3b01      	subs	r3, #1
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	4b01      	ldr	r3, [pc, #4]	; (80001f4 <fsmWrapper+0x20>)
 80001ee:	701a      	strb	r2, [r3, #0]
	}
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200004eb 	.word	0x200004eb

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fde0 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* Configure system clock */
  SystemClock_Config();
 8000200:	f000 f832 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f93a 	bl	800047c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000208:	f000 f86a 	bl	80002e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800020c:	f000 f896 	bl	800033c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000210:	f000 f90a 	bl	8000428 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000214:	f000 f8de 	bl	80003d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &buffer_byte, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <main+0x58>)
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <main+0x5c>)
 800021e:	f003 ff9e 	bl	800415e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000222:	480d      	ldr	r0, [pc, #52]	; (8000258 <main+0x60>)
 8000224:	f003 fb12 	bl	800384c <HAL_TIM_Base_Start_IT>
  //Add task to scheduler
  SCH_Add_Task(ledToggle, 50, 50);
 8000228:	2232      	movs	r2, #50	; 0x32
 800022a:	2132      	movs	r1, #50	; 0x32
 800022c:	480b      	ldr	r0, [pc, #44]	; (800025c <main+0x64>)
 800022e:	f000 f9d3 	bl	80005d8 <SCH_Add_Task>
  SCH_Add_Task(fsmWrapper, 0, 1);
 8000232:	2201      	movs	r2, #1
 8000234:	2100      	movs	r1, #0
 8000236:	480a      	ldr	r0, [pc, #40]	; (8000260 <main+0x68>)
 8000238:	f000 f9ce 	bl	80005d8 <SCH_Add_Task>
  SCH_Add_Task(uart_communiation_fsm, 0, 300);
 800023c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000240:	2100      	movs	r1, #0
 8000242:	4808      	ldr	r0, [pc, #32]	; (8000264 <main+0x6c>)
 8000244:	f000 f9c8 	bl	80005d8 <SCH_Add_Task>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000248:	f000 fab6 	bl	80007b8 <SCH_Dispatch_Tasks>
 800024c:	e7fc      	b.n	8000248 <main+0x50>
 800024e:	bf00      	nop
 8000250:	200004ec 	.word	0x200004ec
 8000254:	2000049c 	.word	0x2000049c
 8000258:	200000e4 	.word	0x200000e4
 800025c:	080001c1 	.word	0x080001c1
 8000260:	080001d5 	.word	0x080001d5
 8000264:	08000d29 	.word	0x08000d29

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 fbf4 	bl	8004a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	2310      	movs	r3, #16
 8000294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fe6a 	bl	8002f78 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002aa:	f000 f92f 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 f8d8 	bl	800347c <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d2:	f000 f91b 	bl	800050c <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	; 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_I2C1_Init+0x50>)
 80002e6:	4a13      	ldr	r2, [pc, #76]	; (8000334 <MX_I2C1_Init+0x54>)
 80002e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_I2C1_Init+0x50>)
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_I2C1_Init+0x58>)
 80002ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_I2C1_Init+0x50>)
 80002fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <MX_I2C1_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_I2C1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_I2C1_Init+0x50>)
 800031e:	f001 f931 	bl	8001584 <HAL_I2C_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 f8f0 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000090 	.word	0x20000090
 8000334:	40005400 	.word	0x40005400
 8000338:	000186a0 	.word	0x000186a0

0800033c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_TIM2_Init+0x94>)
 800035a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800035e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_TIM2_Init+0x94>)
 8000362:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_TIM2_Init+0x94>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_TIM2_Init+0x94>)
 8000370:	2209      	movs	r2, #9
 8000372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_TIM2_Init+0x94>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_TIM2_Init+0x94>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <MX_TIM2_Init+0x94>)
 8000382:	f003 fa13 	bl	80037ac <HAL_TIM_Base_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800038c:	f000 f8be 	bl	800050c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	4619      	mov	r1, r3
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_TIM2_Init+0x94>)
 800039e:	f003 fbaf 	bl	8003b00 <HAL_TIM_ConfigClockSource>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003a8:	f000 f8b0 	bl	800050c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ac:	2300      	movs	r3, #0
 80003ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b4:	463b      	mov	r3, r7
 80003b6:	4619      	mov	r1, r3
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_TIM2_Init+0x94>)
 80003ba:	f003 fd81 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003c4:	f000 f8a2 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	3718      	adds	r7, #24
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000e4 	.word	0x200000e4

080003d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_USART1_UART_Init+0x50>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_USART1_UART_Init+0x4c>)
 800040c:	f003 fdc8 	bl	8003fa0 <HAL_UART_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000416:	f000 f879 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	2000049c 	.word	0x2000049c
 8000424:	40013800 	.word	0x40013800

08000428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART2_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000460:	f003 fd9e 	bl	8003fa0 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f84f 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000012c 	.word	0x2000012c
 8000478:	40004400 	.word	0x40004400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_GPIO_Init+0x74>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <MX_GPIO_Init+0x74>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_GPIO_Init+0x74>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_GPIO_Init+0x74>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <MX_GPIO_Init+0x74>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_GPIO_Init+0x74>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2120      	movs	r1, #32
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004c6:	f001 f82b 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ca:	2320      	movs	r3, #32
 80004cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004e2:	f000 fe99 	bl	8001218 <HAL_GPIO_Init>

}
 80004e6:	bf00      	nop
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800

080004f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000500:	f000 f98c 	bl	800081c <SCH_Update>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>

08000516 <emptyTask>:

unsigned int SCH_Report(){
	return Error_code_G;
}

sTasks emptyTask(){
 8000516:	b4b0      	push	{r4, r5, r7}
 8000518:	b089      	sub	sp, #36	; 0x24
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	sTasks empty;
	empty.Delay = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
	empty.Period = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
	empty.RunMe = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
	empty.TaskID = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
	empty.pTask = 0x0000;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
	return empty;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	461d      	mov	r5, r3
 8000536:	f107 040c 	add.w	r4, r7, #12
 800053a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	602b      	str	r3, [r5, #0]
}
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	3724      	adds	r7, #36	; 0x24
 8000546:	46bd      	mov	sp, r7
 8000548:	bcb0      	pop	{r4, r5, r7}
 800054a:	4770      	bx	lr

0800054c <SCH_shift>:

void SCH_shift(uint8_t pos){
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = current_index_task-1; i > pos; i--){
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <SCH_shift+0x84>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000560:	e01b      	b.n	800059a <SCH_shift+0x4e>
		SCH_tasks_G[i] = SCH_tasks_G[i-1];
 8000562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000566:	1e5a      	subs	r2, r3, #1
 8000568:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800056c:	4819      	ldr	r0, [pc, #100]	; (80005d4 <SCH_shift+0x88>)
 800056e:	460b      	mov	r3, r1
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	440b      	add	r3, r1
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4418      	add	r0, r3
 8000578:	4916      	ldr	r1, [pc, #88]	; (80005d4 <SCH_shift+0x88>)
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	4604      	mov	r4, r0
 8000586:	461d      	mov	r5, r3
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	682b      	ldr	r3, [r5, #0]
 800058e:	6023      	str	r3, [r4, #0]
	for(uint8_t i = current_index_task-1; i > pos; i--){
 8000590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000594:	3b01      	subs	r3, #1
 8000596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800059a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800059e:	7ffb      	ldrb	r3, [r7, #31]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8de      	bhi.n	8000562 <SCH_shift+0x16>
	}
	SCH_tasks_G[pos] = emptyTask();
 80005a4:	7ffa      	ldrb	r2, [r7, #31]
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <SCH_shift+0x88>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	18cc      	adds	r4, r1, r3
 80005b2:	463b      	mov	r3, r7
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffae 	bl	8000516 <emptyTask>
 80005ba:	4625      	mov	r5, r4
 80005bc:	463c      	mov	r4, r7
 80005be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	602b      	str	r3, [r5, #0]
}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000494 	.word	0x20000494
 80005d4:	20000174 	.word	0x20000174

080005d8 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
	sTasks task;
	uint8_t insert_idx = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(current_index_task < SCH_MAX_TASKS){
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <SCH_Add_Task+0x128>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b27      	cmp	r3, #39	; 0x27
 80005f0:	f200 8081 	bhi.w	80006f6 <SCH_Add_Task+0x11e>
		task.pTask = pFunction;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	613b      	str	r3, [r7, #16]
		task.Delay = DELAY;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	617b      	str	r3, [r7, #20]
		task.Period =  PERIOD;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	61bb      	str	r3, [r7, #24]
		task.RunMe = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
		task.TaskID = current_index_task;
 8000604:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <SCH_Add_Task+0x128>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	623b      	str	r3, [r7, #32]
		if(current_index_task == 0){
 800060a:	4b3d      	ldr	r3, [pc, #244]	; (8000700 <SCH_Add_Task+0x128>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d121      	bne.n	8000656 <SCH_Add_Task+0x7e>
			SCH_tasks_G[0] = task;
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <SCH_Add_Task+0x12c>)
 8000614:	461d      	mov	r5, r3
 8000616:	f107 0410 	add.w	r4, r7, #16
 800061a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	602b      	str	r3, [r5, #0]
			current_index_task++;
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <SCH_Add_Task+0x128>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <SCH_Add_Task+0x128>)
 800062c:	701a      	strb	r2, [r3, #0]
			return 0;
 800062e:	2300      	movs	r3, #0
 8000630:	e062      	b.n	80006f8 <SCH_Add_Task+0x120>
		}
		while(task.Delay > SCH_tasks_G[insert_idx].Delay && insert_idx < current_index_task){
			task.Delay -= SCH_tasks_G[insert_idx].Delay;
 8000632:	6979      	ldr	r1, [r7, #20]
 8000634:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000638:	4832      	ldr	r0, [pc, #200]	; (8000704 <SCH_Add_Task+0x12c>)
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4403      	add	r3, r0
 8000644:	3304      	adds	r3, #4
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	1acb      	subs	r3, r1, r3
 800064a:	617b      	str	r3, [r7, #20]
			insert_idx++;
 800064c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000650:	3301      	adds	r3, #1
 8000652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(task.Delay > SCH_tasks_G[insert_idx].Delay && insert_idx < current_index_task){
 8000656:	6979      	ldr	r1, [r7, #20]
 8000658:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800065c:	4829      	ldr	r0, [pc, #164]	; (8000704 <SCH_Add_Task+0x12c>)
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4403      	add	r3, r0
 8000668:	3304      	adds	r3, #4
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4299      	cmp	r1, r3
 800066e:	d905      	bls.n	800067c <SCH_Add_Task+0xa4>
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <SCH_Add_Task+0x128>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000678:	429a      	cmp	r2, r3
 800067a:	d3da      	bcc.n	8000632 <SCH_Add_Task+0x5a>
		}
		current_index_task++;
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <SCH_Add_Task+0x128>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <SCH_Add_Task+0x128>)
 8000686:	701a      	strb	r2, [r3, #0]
		SCH_shift(insert_idx);
 8000688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff5d 	bl	800054c <SCH_shift>
		SCH_tasks_G[insert_idx] = task;
 8000692:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000696:	491b      	ldr	r1, [pc, #108]	; (8000704 <SCH_Add_Task+0x12c>)
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	461d      	mov	r5, r3
 80006a4:	f107 0410 	add.w	r4, r7, #16
 80006a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	602b      	str	r3, [r5, #0]
		SCH_tasks_G[insert_idx+1].Delay -=  SCH_tasks_G[insert_idx].Delay;
 80006b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	4913      	ldr	r1, [pc, #76]	; (8000704 <SCH_Add_Task+0x12c>)
 80006b8:	4613      	mov	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	3304      	adds	r3, #4
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <SCH_Add_Task+0x12c>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4403      	add	r3, r0
 80006d6:	3304      	adds	r3, #4
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80006de:	3201      	adds	r2, #1
 80006e0:	1ac9      	subs	r1, r1, r3
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <SCH_Add_Task+0x12c>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4403      	add	r3, r0
 80006ee:	3304      	adds	r3, #4
 80006f0:	6019      	str	r1, [r3, #0]
		return task.TaskID;
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	e000      	b.n	80006f8 <SCH_Add_Task+0x120>
	}
	return 0;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000700:	20000494 	.word	0x20000494
 8000704:	20000174 	.word	0x20000174

08000708 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	61f8      	str	r0, [r7, #28]
	if(SCH_tasks_G[taskID].pTask == 0x0000){
 8000710:	4926      	ldr	r1, [pc, #152]	; (80007ac <SCH_Delete_Task+0xa4>)
 8000712:	69fa      	ldr	r2, [r7, #28]
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d102      	bne.n	800072a <SCH_Delete_Task+0x22>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SCH_Delete_Task+0xa8>)
 8000726:	2209      	movs	r2, #9
 8000728:	601a      	str	r2, [r3, #0]
	}

	for(unsigned int idx=taskID; idx<current_index_task-1; idx++){
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	e017      	b.n	8000760 <SCH_Delete_Task+0x58>
		SCH_tasks_G[idx] = SCH_tasks_G[idx+1];
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	481d      	ldr	r0, [pc, #116]	; (80007ac <SCH_Delete_Task+0xa4>)
 8000736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000738:	460b      	mov	r3, r1
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	440b      	add	r3, r1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4418      	add	r0, r3
 8000742:	491a      	ldr	r1, [pc, #104]	; (80007ac <SCH_Delete_Task+0xa4>)
 8000744:	4613      	mov	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	4604      	mov	r4, r0
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000756:	682b      	ldr	r3, [r5, #0]
 8000758:	6023      	str	r3, [r4, #0]
	for(unsigned int idx=taskID; idx<current_index_task-1; idx++){
 800075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075c:	3301      	adds	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <SCH_Delete_Task+0xac>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	461a      	mov	r2, r3
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	4293      	cmp	r3, r2
 800076c:	d3e0      	bcc.n	8000730 <SCH_Delete_Task+0x28>
	}
	SCH_tasks_G[current_index_task-1] = emptyTask();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SCH_Delete_Task+0xac>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	1e5a      	subs	r2, r3, #1
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <SCH_Delete_Task+0xa4>)
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	18cc      	adds	r4, r1, r3
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fec7 	bl	8000516 <emptyTask>
 8000788:	4625      	mov	r5, r4
 800078a:	463c      	mov	r4, r7
 800078c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	602b      	str	r3, [r5, #0]
	current_index_task--;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <SCH_Delete_Task+0xac>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SCH_Delete_Task+0xac>)
 800079e:	701a      	strb	r2, [r3, #0]
	return 0;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bdb0      	pop	{r4, r5, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000174 	.word	0x20000174
 80007b0:	20000170 	.word	0x20000170
 80007b4:	20000494 	.word	0x20000494

080007b8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	while(SCH_tasks_G[0].pTask!=0x0000){
 80007bc:	e024      	b.n	8000808 <SCH_Dispatch_Tasks+0x50>
		if(SCH_tasks_G[0].RunMe > 0){
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d020      	beq.n	8000808 <SCH_Dispatch_Tasks+0x50>
			(*SCH_tasks_G[0].pTask)();
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4798      	blx	r3
			SCH_tasks_G[0].RunMe--;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007d4:	60d3      	str	r3, [r2, #12]
			if(SCH_tasks_G[1].Delay==0) SCH_tasks_G[1].RunMe++;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d104      	bne.n	80007e8 <SCH_Dispatch_Tasks+0x30>
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007e0:	6a1b      	ldr	r3, [r3, #32]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007e6:	6213      	str	r3, [r2, #32]
			if(SCH_tasks_G[0].Period>0) SCH_Add_Task(SCH_tasks_G[0].pTask,
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d008      	beq.n	8000802 <SCH_Dispatch_Tasks+0x4a>
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007f6:	6891      	ldr	r1, [r2, #8]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 80007fa:	6892      	ldr	r2, [r2, #8]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff feeb 	bl	80005d8 <SCH_Add_Task>
										             SCH_tasks_G[0].Period,
													 SCH_tasks_G[0].Period);
			SCH_Delete_Task(0);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ff80 	bl	8000708 <SCH_Delete_Task>
	while(SCH_tasks_G[0].pTask!=0x0000){
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <SCH_Dispatch_Tasks+0x60>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1d6      	bne.n	80007be <SCH_Dispatch_Tasks+0x6>
		}
	}
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000174 	.word	0x20000174

0800081c <SCH_Update>:

void SCH_Update(void){
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay > 0){
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <SCH_Update+0x40>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00b      	beq.n	8000840 <SCH_Update+0x24>
		SCH_tasks_G[0].Delay--;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <SCH_Update+0x40>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	3b01      	subs	r3, #1
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <SCH_Update+0x40>)
 8000830:	6053      	str	r3, [r2, #4]
		passed_time_since_last_task++;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <SCH_Update+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <SCH_Update+0x44>)
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e009      	b.n	8000854 <SCH_Update+0x38>
	}
	else if(SCH_tasks_G[0].Delay==0){
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SCH_Update+0x40>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d105      	bne.n	8000854 <SCH_Update+0x38>
		SCH_tasks_G[0].RunMe++;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <SCH_Update+0x40>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	4a03      	ldr	r2, [pc, #12]	; (800085c <SCH_Update+0x40>)
 8000850:	60d3      	str	r3, [r2, #12]
		return;
 8000852:	bf00      	nop
	}
}
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000174 	.word	0x20000174
 8000860:	20000495 	.word	0x20000495

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_MspInit+0x40>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <HAL_MspInit+0x40>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x40>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x40>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_MspInit+0x40>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_MspInit+0x40>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_I2C_MspInit+0x80>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d12b      	bne.n	8000920 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_I2C_MspInit+0x84>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_I2C_MspInit+0x84>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_I2C_MspInit+0x84>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e0:	23c0      	movs	r3, #192	; 0xc0
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <HAL_I2C_MspInit+0x88>)
 80008f4:	f000 fc90 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_I2C_MspInit+0x84>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_I2C_MspInit+0x84>)
 80008fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000902:	61d3      	str	r3, [r2, #28]
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_I2C_MspInit+0x84>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	201f      	movs	r0, #31
 8000916:	f000 fb8c 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800091a:	201f      	movs	r0, #31
 800091c:	f000 fba5 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40005400 	.word	0x40005400
 800092c:	40021000 	.word	0x40021000
 8000930:	40010c00 	.word	0x40010c00

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000944:	d113      	bne.n	800096e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_TIM_Base_MspInit+0x44>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_TIM_Base_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_TIM_Base_MspInit+0x44>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	201c      	movs	r0, #28
 8000964:	f000 fb65 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000968:	201c      	movs	r0, #28
 800096a:	f000 fb7e 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a3f      	ldr	r2, [pc, #252]	; (8000a94 <HAL_UART_MspInit+0x118>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13a      	bne.n	8000a12 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099c:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a3d      	ldr	r2, [pc, #244]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a37      	ldr	r2, [pc, #220]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	4619      	mov	r1, r3
 80009e0:	482e      	ldr	r0, [pc, #184]	; (8000a9c <HAL_UART_MspInit+0x120>)
 80009e2:	f000 fc19 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4828      	ldr	r0, [pc, #160]	; (8000a9c <HAL_UART_MspInit+0x120>)
 80009fc:	f000 fc0c 	bl	8001218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2025      	movs	r0, #37	; 0x25
 8000a06:	f000 fb14 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a0a:	2025      	movs	r0, #37	; 0x25
 8000a0c:	f000 fb2d 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a10:	e03c      	b.n	8000a8c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <HAL_UART_MspInit+0x124>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d137      	bne.n	8000a8c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 8000a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a26:	61d3      	str	r3, [r2, #28]
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x11c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0318 	add.w	r3, r7, #24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480f      	ldr	r0, [pc, #60]	; (8000a9c <HAL_UART_MspInit+0x120>)
 8000a60:	f000 fbda 	bl	8001218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a64:	2308      	movs	r3, #8
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_UART_MspInit+0x120>)
 8000a78:	f000 fbce 	bl	8001218 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2026      	movs	r0, #38	; 0x26
 8000a82:	f000 fad6 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a86:	2026      	movs	r0, #38	; 0x26
 8000a88:	f000 faef 	bl	800106a <HAL_NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f9af 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM2_IRQHandler+0x10>)
 8000afa:	f002 fef9 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000e4 	.word	0x200000e4

08000b08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <I2C1_EV_IRQHandler+0x10>)
 8000b0e:	f000 fe7d 	bl	800180c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000090 	.word	0x20000090

08000b1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <USART1_IRQHandler+0x10>)
 8000b22:	f003 fb4d 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000049c 	.word	0x2000049c

08000b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <USART2_IRQHandler+0x10>)
 8000b36:	f003 fb43 	bl	80041c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000012c 	.word	0x2000012c

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f003 ff4c 	bl	8004a10 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20005000 	.word	0x20005000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	20000498 	.word	0x20000498
 8000bac:	20000528 	.word	0x20000528

08000bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <resetCmdBuf>:
uint8_t cmd_flag = INIT_UART;
uint8_t action_flag = STOP_SEND;

int idx = 0;

void resetCmdBuf(){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	e007      	b.n	8000bd8 <resetCmdBuf+0x1c>
		cmd_buffer[i] = 0;
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <resetCmdBuf+0x30>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	ddf4      	ble.n	8000bc8 <resetCmdBuf+0xc>
	}
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000500 	.word	0x20000500

08000bf0 <resetBuf>:

void resetBuf(){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e007      	b.n	8000c0c <resetBuf+0x1c>
		buffer[i] = 0;
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <resetBuf+0x30>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MAX_BUFFER_SIZE; i++){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b09      	cmp	r3, #9
 8000c10:	ddf4      	ble.n	8000bfc <resetBuf+0xc>
	}
}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200004e0 	.word	0x200004e0

08000c24 <command_parser_fsm>:

void command_parser_fsm(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
//We collect all char sent to process at once
//Remember to flush buffer using the resetBuf and resetCmdBuf(), or else your buffer
//Will be as dirty as Minklee
	switch(cmd_flag){
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <command_parser_fsm+0xe8>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <command_parser_fsm+0x12>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d00f      	beq.n	8000c54 <command_parser_fsm+0x30>
				resetCmdBuf();
				uart_communiation_fsm();
			}
			break;
		default:
			break;
 8000c34:	e067      	b.n	8000d06 <command_parser_fsm+0xe2>
			if (buffer[idx] == '!') {
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <command_parser_fsm+0xec>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <command_parser_fsm+0xf0>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	2b21      	cmp	r3, #33	; 0x21
 8000c40:	d15e      	bne.n	8000d00 <command_parser_fsm+0xdc>
				idx++;
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <command_parser_fsm+0xec>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <command_parser_fsm+0xec>)
 8000c4a:	6013      	str	r3, [r2, #0]
				cmd_flag = READING;
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <command_parser_fsm+0xe8>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
			break;
 8000c52:	e055      	b.n	8000d00 <command_parser_fsm+0xdc>
			if (buffer[idx] != '!' && buffer[idx] != '#'){
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <command_parser_fsm+0xec>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <command_parser_fsm+0xf0>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	2b21      	cmp	r3, #33	; 0x21
 8000c5e:	d01a      	beq.n	8000c96 <command_parser_fsm+0x72>
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <command_parser_fsm+0xec>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <command_parser_fsm+0xf0>)
 8000c66:	5cd3      	ldrb	r3, [r2, r3]
 8000c68:	2b23      	cmp	r3, #35	; 0x23
 8000c6a:	d014      	beq.n	8000c96 <command_parser_fsm+0x72>
				cmd_buffer[cmd_index] = buffer[idx];
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <command_parser_fsm+0xec>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <command_parser_fsm+0xf4>)
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <command_parser_fsm+0xf0>)
 8000c78:	5cd2      	ldrb	r2, [r2, r3]
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <command_parser_fsm+0xf8>)
 8000c7c:	545a      	strb	r2, [r3, r1]
				cmd_index++;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <command_parser_fsm+0xf4>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <command_parser_fsm+0xf4>)
 8000c88:	701a      	strb	r2, [r3, #0]
				idx++;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <command_parser_fsm+0xec>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <command_parser_fsm+0xec>)
 8000c92:	6013      	str	r3, [r2, #0]
			break;
 8000c94:	e036      	b.n	8000d04 <command_parser_fsm+0xe0>
			else if (buffer[idx] == '!'){
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <command_parser_fsm+0xec>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <command_parser_fsm+0xf0>)
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	2b21      	cmp	r3, #33	; 0x21
 8000ca0:	d106      	bne.n	8000cb0 <command_parser_fsm+0x8c>
				cmd_flag = INIT_UART;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <command_parser_fsm+0xe8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
				idx = 0;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <command_parser_fsm+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
			break;
 8000cae:	e029      	b.n	8000d04 <command_parser_fsm+0xe0>
			else if (buffer[idx] == '#'){
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <command_parser_fsm+0xec>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <command_parser_fsm+0xf0>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	2b23      	cmp	r3, #35	; 0x23
 8000cba:	d123      	bne.n	8000d04 <command_parser_fsm+0xe0>
				cmd_flag = INIT_UART;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <command_parser_fsm+0xe8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
				if (cmd_buffer[0] == 'R') action_flag = SEND;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <command_parser_fsm+0xf8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b52      	cmp	r3, #82	; 0x52
 8000cc8:	d103      	bne.n	8000cd2 <command_parser_fsm+0xae>
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <command_parser_fsm+0xfc>)
 8000ccc:	2203      	movs	r2, #3
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e006      	b.n	8000ce0 <command_parser_fsm+0xbc>
				else if (cmd_buffer[0] == 'O') action_flag = STOP_SEND;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <command_parser_fsm+0xf8>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b4f      	cmp	r3, #79	; 0x4f
 8000cd8:	d102      	bne.n	8000ce0 <command_parser_fsm+0xbc>
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <command_parser_fsm+0xfc>)
 8000cdc:	2204      	movs	r2, #4
 8000cde:	701a      	strb	r2, [r3, #0]
				index_buffer = 0;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <command_parser_fsm+0x100>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <command_parser_fsm+0xf4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
				idx = 0;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <command_parser_fsm+0xec>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
				resetBuf();
 8000cf2:	f7ff ff7d 	bl	8000bf0 <resetBuf>
				resetCmdBuf();
 8000cf6:	f7ff ff61 	bl	8000bbc <resetCmdBuf>
				uart_communiation_fsm();
 8000cfa:	f000 f815 	bl	8000d28 <uart_communiation_fsm>
			break;
 8000cfe:	e001      	b.n	8000d04 <command_parser_fsm+0xe0>
			break;
 8000d00:	bf00      	nop
 8000d02:	e000      	b.n	8000d06 <command_parser_fsm+0xe2>
			break;
 8000d04:	bf00      	nop
	}

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000050b 	.word	0x2000050b
 8000d10:	2000050c 	.word	0x2000050c
 8000d14:	200004e0 	.word	0x200004e0
 8000d18:	2000050a 	.word	0x2000050a
 8000d1c:	20000500 	.word	0x20000500
 8000d20:	20000004 	.word	0x20000004
 8000d24:	200004ea 	.word	0x200004ea

08000d28 <uart_communiation_fsm>:

void uart_communiation_fsm(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	if(action_flag==SEND){
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <uart_communiation_fsm+0x38>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d111      	bne.n	8000d58 <uart_communiation_fsm+0x30>
		toSend = 30;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <uart_communiation_fsm+0x3c>)
 8000d36:	221e      	movs	r2, #30
 8000d38:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, &(str[0]), sprintf( &(str[0]), "!1:T:%ld#\n", toSend), 100);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <uart_communiation_fsm+0x3c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4909      	ldr	r1, [pc, #36]	; (8000d68 <uart_communiation_fsm+0x40>)
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <uart_communiation_fsm+0x44>)
 8000d44:	f003 fe96 	bl	8004a74 <siprintf>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	4907      	ldr	r1, [pc, #28]	; (8000d6c <uart_communiation_fsm+0x44>)
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <uart_communiation_fsm+0x48>)
 8000d52:	f003 f972 	bl	800403a <HAL_UART_Transmit>
 8000d56:	e002      	b.n	8000d5e <uart_communiation_fsm+0x36>
	}
	else if(action_flag==STOP_SEND){
 8000d58:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <uart_communiation_fsm+0x38>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
		return;
	}
}
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000004 	.word	0x20000004
 8000d64:	200004fc 	.word	0x200004fc
 8000d68:	08005380 	.word	0x08005380
 8000d6c:	200004f0 	.word	0x200004f0
 8000d70:	2000049c 	.word	0x2000049c

08000d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d9a:	f7ff ff09 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fe3d 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da2:	f7ff fa29 	bl	80001f8 <main>
  bx lr
 8000da6:	4770      	bx	lr
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000db0:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8000db4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000db8:	20000524 	.word	0x20000524

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x28>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x28>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f923 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fd42 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40022000 	.word	0x40022000

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f93b 	bl	8001086 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e28:	f000 f903 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000008 	.word	0x20000008

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x20>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <HAL_IncTick+0x20>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000510 	.word	0x20000510

08000e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <HAL_GetTick+0x10>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	20000510 	.word	0x20000510

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4906      	ldr	r1, [pc, #24]	; (8000f1c <__NVIC_EnableIRQ+0x34>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ffc:	f7ff ff90 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff2d 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff42 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff90 	bl	8000f74 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5f 	bl	8000f20 <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff35 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d008      	beq.n	80010c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e020      	b.n	8001108 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 020e 	bic.w	r2, r2, #14
 80010d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
	...

08001114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001126:	2b02      	cmp	r3, #2
 8001128:	d005      	beq.n	8001136 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2204      	movs	r2, #4
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e051      	b.n	80011da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 020e 	bic.w	r2, r2, #14
 8001144:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_DMA_Abort_IT+0xd0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d029      	beq.n	80011b4 <HAL_DMA_Abort_IT+0xa0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_DMA_Abort_IT+0xd4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d022      	beq.n	80011b0 <HAL_DMA_Abort_IT+0x9c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_DMA_Abort_IT+0xd8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d01a      	beq.n	80011aa <HAL_DMA_Abort_IT+0x96>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_DMA_Abort_IT+0xdc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d012      	beq.n	80011a4 <HAL_DMA_Abort_IT+0x90>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <HAL_DMA_Abort_IT+0xe0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00a      	beq.n	800119e <HAL_DMA_Abort_IT+0x8a>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <HAL_DMA_Abort_IT+0xe4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d102      	bne.n	8001198 <HAL_DMA_Abort_IT+0x84>
 8001192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001196:	e00e      	b.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 8001198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119c:	e00b      	b.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 800119e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a2:	e008      	b.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	e005      	b.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	e002      	b.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 80011b0:	2310      	movs	r3, #16
 80011b2:	e000      	b.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 80011b4:	2301      	movs	r3, #1
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_DMA_Abort_IT+0xe8>)
 80011b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4798      	blx	r3
    } 
  }
  return status;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020008 	.word	0x40020008
 80011e8:	4002001c 	.word	0x4002001c
 80011ec:	40020030 	.word	0x40020030
 80011f0:	40020044 	.word	0x40020044
 80011f4:	40020058 	.word	0x40020058
 80011f8:	4002006c 	.word	0x4002006c
 80011fc:	40020000 	.word	0x40020000

08001200 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e169      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8158 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a9a      	ldr	r2, [pc, #616]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a98      	ldr	r2, [pc, #608]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a98      	ldr	r2, [pc, #608]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a96      	ldr	r2, [pc, #600]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a96      	ldr	r2, [pc, #600]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a94      	ldr	r2, [pc, #592]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a94      	ldr	r2, [pc, #592]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a92      	ldr	r2, [pc, #584]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a90      	ldr	r2, [pc, #576]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a79      	ldr	r2, [pc, #484]	; (80014cc <HAL_GPIO_Init+0x2b4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80b1 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3f      	ldr	r2, [pc, #252]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1e8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3d      	ldr	r2, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001404:	2300      	movs	r3, #0
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001416:	492f      	ldr	r1, [pc, #188]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	492c      	ldr	r1, [pc, #176]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4928      	ldr	r1, [pc, #160]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4922      	ldr	r1, [pc, #136]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	491e      	ldr	r1, [pc, #120]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	4918      	ldr	r1, [pc, #96]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4914      	ldr	r1, [pc, #80]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d021      	beq.n	80014ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	490e      	ldr	r1, [pc, #56]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
 80014b4:	e021      	b.n	80014fa <HAL_GPIO_Init+0x2e2>
 80014b6:	bf00      	nop
 80014b8:	10320000 	.word	0x10320000
 80014bc:	10310000 	.word	0x10310000
 80014c0:	10220000 	.word	0x10220000
 80014c4:	10210000 	.word	0x10210000
 80014c8:	10120000 	.word	0x10120000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40011400 	.word	0x40011400
 80014e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_GPIO_Init+0x304>)
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4909      	ldr	r1, [pc, #36]	; (800151c <HAL_GPIO_Init+0x304>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f47f ae8e 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	372c      	adds	r7, #44	; 0x2c
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43d9      	mvns	r1, r3
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	400b      	ands	r3, r1
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e12b      	b.n	80017ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff f97c 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015e8:	f002 f89a 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 80015ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a81      	ldr	r2, [pc, #516]	; (80017f8 <HAL_I2C_Init+0x274>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d807      	bhi.n	8001608 <HAL_I2C_Init+0x84>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4a80      	ldr	r2, [pc, #512]	; (80017fc <HAL_I2C_Init+0x278>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf94      	ite	ls
 8001600:	2301      	movls	r3, #1
 8001602:	2300      	movhi	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	e006      	b.n	8001616 <HAL_I2C_Init+0x92>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a7d      	ldr	r2, [pc, #500]	; (8001800 <HAL_I2C_Init+0x27c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	bf94      	ite	ls
 8001610:	2301      	movls	r3, #1
 8001612:	2300      	movhi	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0e7      	b.n	80017ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4a78      	ldr	r2, [pc, #480]	; (8001804 <HAL_I2C_Init+0x280>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a6a      	ldr	r2, [pc, #424]	; (80017f8 <HAL_I2C_Init+0x274>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d802      	bhi.n	8001658 <HAL_I2C_Init+0xd4>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	e009      	b.n	800166c <HAL_I2C_Init+0xe8>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4a69      	ldr	r2, [pc, #420]	; (8001808 <HAL_I2C_Init+0x284>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3301      	adds	r3, #1
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800167e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	495c      	ldr	r1, [pc, #368]	; (80017f8 <HAL_I2C_Init+0x274>)
 8001688:	428b      	cmp	r3, r1
 800168a:	d819      	bhi.n	80016c0 <HAL_I2C_Init+0x13c>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1e59      	subs	r1, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fbb1 f3f3 	udiv	r3, r1, r3
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016a0:	400b      	ands	r3, r1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00a      	beq.n	80016bc <HAL_I2C_Init+0x138>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1e59      	subs	r1, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ba:	e051      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 80016bc:	2304      	movs	r3, #4
 80016be:	e04f      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <HAL_I2C_Init+0x168>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e012      	b.n	8001712 <HAL_I2C_Init+0x18e>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	0099      	lsls	r1, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001702:	3301      	adds	r3, #1
 8001704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Init+0x196>
 8001716:	2301      	movs	r3, #1
 8001718:	e022      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10e      	bne.n	8001740 <HAL_I2C_Init+0x1bc>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e58      	subs	r0, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6859      	ldr	r1, [r3, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	fbb0 f3f3 	udiv	r3, r0, r3
 8001734:	3301      	adds	r3, #1
 8001736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173e:	e00f      	b.n	8001760 <HAL_I2C_Init+0x1dc>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	0099      	lsls	r1, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	6809      	ldr	r1, [r1, #0]
 8001764:	4313      	orrs	r3, r2
 8001766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800178e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6911      	ldr	r1, [r2, #16]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68d2      	ldr	r2, [r2, #12]
 800179a:	4311      	orrs	r1, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	000186a0 	.word	0x000186a0
 80017fc:	001e847f 	.word	0x001e847f
 8001800:	003d08ff 	.word	0x003d08ff
 8001804:	431bde83 	.word	0x431bde83
 8001808:	10624dd3 	.word	0x10624dd3

0800180c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800182c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001834:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d003      	beq.n	8001844 <HAL_I2C_EV_IRQHandler+0x38>
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b40      	cmp	r3, #64	; 0x40
 8001840:	f040 80c1 	bne.w	80019c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_I2C_EV_IRQHandler+0x6e>
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001864:	d003      	beq.n	800186e <HAL_I2C_EV_IRQHandler+0x62>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800186c:	d101      	bne.n	8001872 <HAL_I2C_EV_IRQHandler+0x66>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_I2C_EV_IRQHandler+0x68>
 8001872:	2300      	movs	r3, #0
 8001874:	2b01      	cmp	r3, #1
 8001876:	f000 8132 	beq.w	8001ade <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00c      	beq.n	800189e <HAL_I2C_EV_IRQHandler+0x92>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	0a5b      	lsrs	r3, r3, #9
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 fb57 	bl	8002f44 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fcc8 	bl	800222c <I2C_Master_SB>
 800189c:	e092      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_I2C_EV_IRQHandler+0xb2>
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	0a5b      	lsrs	r3, r3, #9
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fd3d 	bl	8002336 <I2C_Master_ADD10>
 80018bc:	e082      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_I2C_EV_IRQHandler+0xd2>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	0a5b      	lsrs	r3, r3, #9
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fd56 	bl	8002388 <I2C_Master_ADDR>
 80018dc:	e072      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03b      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f8:	f000 80f3 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	09db      	lsrs	r3, r3, #7
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <HAL_I2C_EV_IRQHandler+0x11c>
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d009      	beq.n	8001928 <HAL_I2C_EV_IRQHandler+0x11c>
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f942 	bl	8001baa <I2C_MasterTransmit_TXE>
 8001926:	e04d      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80d6 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	0a5b      	lsrs	r3, r3, #9
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80cf 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	2b21      	cmp	r3, #33	; 0x21
 8001948:	d103      	bne.n	8001952 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f9c9 	bl	8001ce2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001950:	e0c7      	b.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	f040 80c4 	bne.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fa37 	bl	8001dce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001960:	e0bf      	b.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001970:	f000 80b7 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00f      	beq.n	80019a0 <HAL_I2C_EV_IRQHandler+0x194>
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_I2C_EV_IRQHandler+0x194>
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 faac 	bl	8001ef6 <I2C_MasterReceive_RXNE>
 800199e:	e011      	b.n	80019c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 809a 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	0a5b      	lsrs	r3, r3, #9
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8093 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fb4b 	bl	8002058 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c2:	e08e      	b.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019c4:	e08d      	b.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e007      	b.n	80019e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <HAL_I2C_EV_IRQHandler+0x20e>
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a10:	69b9      	ldr	r1, [r7, #24]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 ff0f 	bl	8002836 <I2C_Slave_ADDR>
 8001a18:	e066      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_I2C_EV_IRQHandler+0x22e>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	0a5b      	lsrs	r3, r3, #9
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 ff4a 	bl	80028cc <I2C_Slave_STOPF>
 8001a38:	e056      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	2b21      	cmp	r3, #33	; 0x21
 8001a3e:	d002      	beq.n	8001a46 <HAL_I2C_EV_IRQHandler+0x23a>
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b29      	cmp	r3, #41	; 0x29
 8001a44:	d125      	bne.n	8001a92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	09db      	lsrs	r3, r3, #7
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00f      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x266>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	0a9b      	lsrs	r3, r3, #10
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x266>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fe27 	bl	80026be <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a70:	e039      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d033      	beq.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x2da>
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	0a5b      	lsrs	r3, r3, #9
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d02d      	beq.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fe54 	bl	8002738 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a90:	e029      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00f      	beq.n	8001abe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	0a9b      	lsrs	r3, r3, #10
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fe5e 	bl	8002778 <I2C_SlaveReceive_RXNE>
 8001abc:	e014      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00e      	beq.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	0a5b      	lsrs	r3, r3, #9
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fe8c 	bl	80027f4 <I2C_SlaveReceive_BTF>
 8001adc:	e004      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001ade:	bf00      	nop
 8001ae0:	e002      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae2:	bf00      	nop
 8001ae4:	e000      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ae6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
 8001b42:	4613      	mov	r3, r2
 8001b44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bc0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d150      	bne.n	8001c72 <I2C_MasterTransmit_TXE+0xc8>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b21      	cmp	r3, #33	; 0x21
 8001bd4:	d14d      	bne.n	8001c72 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d01d      	beq.n	8001c18 <I2C_MasterTransmit_TXE+0x6e>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d01a      	beq.n	8001c18 <I2C_MasterTransmit_TXE+0x6e>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001be8:	d016      	beq.n	8001c18 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bf8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2211      	movs	r2, #17
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff6c 	bl	8001aee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c16:	e060      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c26:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d107      	bne.n	8001c62 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff81 	bl	8001b62 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c60:	e03b      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff3f 	bl	8001aee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c70:	e033      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b21      	cmp	r3, #33	; 0x21
 8001c76:	d005      	beq.n	8001c84 <I2C_MasterTransmit_TXE+0xda>
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d12d      	bne.n	8001cda <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b22      	cmp	r3, #34	; 0x22
 8001c82:	d12a      	bne.n	8001cda <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c9e:	e01c      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	d103      	bne.n	8001cb4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f88e 	bl	8001dce <I2C_MemoryTransmit_TXE_BTF>
}
 8001cb2:	e012      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cd8:	e7ff      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b21      	cmp	r3, #33	; 0x21
 8001cfa:	d164      	bne.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d012      	beq.n	8001d2c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d2a:	e04c      	b.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d01d      	beq.n	8001d6e <I2C_MasterTransmit_BTF+0x8c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d01a      	beq.n	8001d6e <I2C_MasterTransmit_BTF+0x8c>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d3e:	d016      	beq.n	8001d6e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d4e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2211      	movs	r2, #17
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fec1 	bl	8001aee <HAL_I2C_MasterTxCpltCallback>
}
 8001d6c:	e02b      	b.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d7c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d107      	bne.n	8001db8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fed6 	bl	8001b62 <HAL_I2C_MemTxCpltCallback>
}
 8001db6:	e006      	b.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fe94 	bl	8001aee <HAL_I2C_MasterTxCpltCallback>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d11d      	bne.n	8001e22 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10b      	bne.n	8001e06 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	1c9a      	adds	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001e04:	e073      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	121b      	asrs	r3, r3, #8
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e20:	e065      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10b      	bne.n	8001e42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e40:	e055      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d151      	bne.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b22      	cmp	r3, #34	; 0x22
 8001e4e:	d10d      	bne.n	8001e6c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e6a:	e040      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b21      	cmp	r3, #33	; 0x21
 8001e7a:	d112      	bne.n	8001ea2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ea0:	e025      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d120      	bne.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b21      	cmp	r3, #33	; 0x21
 8001eb0:	d11d      	bne.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ec0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fe3a 	bl	8001b62 <HAL_I2C_MemTxCpltCallback>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b22      	cmp	r3, #34	; 0x22
 8001f08:	f040 80a2 	bne.w	8002050 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d921      	bls.n	8001f5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	f040 8082 	bne.w	8002050 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001f5c:	e078      	b.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d074      	beq.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d002      	beq.n	8001f72 <I2C_MasterReceive_RXNE+0x7c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d16e      	bne.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 ffb4 	bl	8002ee0 <I2C_WaitOnSTOPRequestThroughIT>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d142      	bne.n	8002004 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b40      	cmp	r3, #64	; 0x40
 8001fd6:	d10a      	bne.n	8001fee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fdc4 	bl	8001b74 <HAL_I2C_MemRxCpltCallback>
}
 8001fec:	e030      	b.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2212      	movs	r2, #18
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fd7f 	bl	8001b00 <HAL_I2C_MasterRxCpltCallback>
}
 8002002:	e025      	b.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002012:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fd9b 	bl	8001b86 <HAL_I2C_ErrorCallback>
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11b      	bne.n	80020a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80020a6:	e0bd      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d129      	bne.n	8002106 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d00a      	beq.n	80020de <I2C_MasterReceive_BTF+0x86>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d007      	beq.n	80020de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002104:	e08e      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d176      	bne.n	80021fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <I2C_MasterReceive_BTF+0xc4>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b10      	cmp	r3, #16
 800211a:	d108      	bne.n	800212e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e019      	b.n	8002162 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d002      	beq.n	800213a <I2C_MasterReceive_BTF+0xe2>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d108      	bne.n	800214c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e00a      	b.n	8002162 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d007      	beq.n	8002162 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d10a      	bne.n	80021e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fcc7 	bl	8001b74 <HAL_I2C_MemRxCpltCallback>
}
 80021e6:	e01d      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2212      	movs	r2, #18
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fc82 	bl	8001b00 <HAL_I2C_MasterRxCpltCallback>
}
 80021fc:	e012      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d117      	bne.n	8002270 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002258:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800225a:	e067      	b.n	800232c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	611a      	str	r2, [r3, #16]
}
 800226e:	e05d      	b.n	800232c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002278:	d133      	bne.n	80022e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b21      	cmp	r3, #33	; 0x21
 8002284:	d109      	bne.n	800229a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002296:	611a      	str	r2, [r3, #16]
 8002298:	e008      	b.n	80022ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <I2C_Master_SB+0x92>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d032      	beq.n	800232c <I2C_Master_SB+0x100>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02d      	beq.n	800232c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022de:	605a      	str	r2, [r3, #4]
}
 80022e0:	e024      	b.n	800232c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	11db      	asrs	r3, r3, #7
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f003 0306 	and.w	r3, r3, #6
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f063 030f 	orn	r3, r3, #15
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]
}
 8002306:	e011      	b.n	800232c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10d      	bne.n	800232c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	b29b      	uxth	r3, r3
 8002316:	11db      	asrs	r3, r3, #7
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0306 	and.w	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f063 030e 	orn	r3, r3, #14
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	b2da      	uxtb	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <I2C_Master_ADD10+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d108      	bne.n	800236e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <I2C_Master_ADD10+0x48>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237c:	605a      	str	r2, [r3, #4]
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002388:	b480      	push	{r7}
 800238a:	b091      	sub	sp, #68	; 0x44
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002396:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b22      	cmp	r3, #34	; 0x22
 80023b0:	f040 8174 	bne.w	800269c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10f      	bne.n	80023dc <I2C_Master_ADDR+0x54>
 80023bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d10b      	bne.n	80023dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	e16b      	b.n	80026b4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d11d      	bne.n	8002420 <I2C_Master_ADDR+0x98>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023ec:	d118      	bne.n	8002420 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002412:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	651a      	str	r2, [r3, #80]	; 0x50
 800241e:	e149      	b.n	80026b4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e120      	b.n	8002694 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 808a 	bne.w	8002572 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002464:	d137      	bne.n	80024d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002474:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002484:	d113      	bne.n	80024ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002494:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	e0f2      	b.n	8002694 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e0de      	b.n	8002694 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d02e      	beq.n	800253a <I2C_Master_ADDR+0x1b2>
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d02b      	beq.n	800253a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	2b12      	cmp	r3, #18
 80024e6:	d102      	bne.n	80024ee <I2C_Master_ADDR+0x166>
 80024e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d125      	bne.n	800253a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d00e      	beq.n	8002512 <I2C_Master_ADDR+0x18a>
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d00b      	beq.n	8002512 <I2C_Master_ADDR+0x18a>
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d008      	beq.n	8002512 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e007      	b.n	8002522 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002520:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	e0ac      	b.n	8002694 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002548:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e090      	b.n	8002694 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d158      	bne.n	800262e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257e:	2b04      	cmp	r3, #4
 8002580:	d021      	beq.n	80025c6 <I2C_Master_ADDR+0x23e>
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	2b02      	cmp	r3, #2
 8002586:	d01e      	beq.n	80025c6 <I2C_Master_ADDR+0x23e>
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	2b10      	cmp	r3, #16
 800258c:	d01b      	beq.n	80025c6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e012      	b.n	80025ec <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025fa:	d14b      	bne.n	8002694 <I2C_Master_ADDR+0x30c>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002602:	d00b      	beq.n	800261c <I2C_Master_ADDR+0x294>
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2b01      	cmp	r3, #1
 8002608:	d008      	beq.n	800261c <I2C_Master_ADDR+0x294>
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2b08      	cmp	r3, #8
 800260e:	d005      	beq.n	800261c <I2C_Master_ADDR+0x294>
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	2b10      	cmp	r3, #16
 8002614:	d002      	beq.n	800261c <I2C_Master_ADDR+0x294>
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	2b20      	cmp	r3, #32
 800261a:	d13b      	bne.n	8002694 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	e032      	b.n	8002694 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264c:	d117      	bne.n	800267e <I2C_Master_ADDR+0x2f6>
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002654:	d00b      	beq.n	800266e <I2C_Master_ADDR+0x2e6>
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2b01      	cmp	r3, #1
 800265a:	d008      	beq.n	800266e <I2C_Master_ADDR+0x2e6>
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	2b08      	cmp	r3, #8
 8002660:	d005      	beq.n	800266e <I2C_Master_ADDR+0x2e6>
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	2b10      	cmp	r3, #16
 8002666:	d002      	beq.n	800266e <I2C_Master_ADDR+0x2e6>
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	2b20      	cmp	r3, #32
 800266c:	d107      	bne.n	800267e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800267c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800269a:	e00b      	b.n	80026b4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
}
 80026b2:	e7ff      	b.n	80026b4 <I2C_Master_ADDR+0x32c>
 80026b4:	bf00      	nop
 80026b6:	3744      	adds	r7, #68	; 0x44
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02b      	beq.n	8002730 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d114      	bne.n	8002730 <I2C_SlaveTransmit_TXE+0x72>
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b29      	cmp	r3, #41	; 0x29
 800270a:	d111      	bne.n	8002730 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2221      	movs	r2, #33	; 0x21
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2228      	movs	r2, #40	; 0x28
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff f9f1 	bl	8001b12 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02c      	beq.n	80027ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d114      	bne.n	80027ec <I2C_SlaveReceive_RXNE+0x74>
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b2a      	cmp	r3, #42	; 0x2a
 80027c6:	d111      	bne.n	80027ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2222      	movs	r2, #34	; 0x22
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2228      	movs	r2, #40	; 0x28
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff f99c 	bl	8001b24 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d012      	beq.n	800282c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002850:	2b28      	cmp	r3, #40	; 0x28
 8002852:	d127      	bne.n	80028a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002862:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	09db      	lsrs	r3, r3, #7
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	81bb      	strh	r3, [r7, #12]
 8002886:	e002      	b.n	800288e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002896:	89ba      	ldrh	r2, [r7, #12]
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff f94a 	bl	8001b36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028a2:	e00e      	b.n	80028c2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002918:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002928:	d172      	bne.n	8002a10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b22      	cmp	r3, #34	; 0x22
 800292e:	d002      	beq.n	8002936 <I2C_Slave_STOPF+0x6a>
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b2a      	cmp	r3, #42	; 0x2a
 8002934:	d135      	bne.n	80029a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002968:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fc46 	bl	8001200 <HAL_DMA_GetState>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d049      	beq.n	8002a0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <I2C_Slave_STOPF+0x258>)
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fbc4 	bl	8001114 <HAL_DMA_Abort_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03d      	beq.n	8002a0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800299c:	4610      	mov	r0, r2
 800299e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a0:	e035      	b.n	8002a0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fc10 	bl	8001200 <HAL_DMA_GetState>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d014      	beq.n	8002a10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	4a4e      	ldr	r2, [pc, #312]	; (8002b24 <I2C_Slave_STOPF+0x258>)
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fb8e 	bl	8001114 <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
 8002a0c:	e000      	b.n	8002a10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03e      	beq.n	8002a98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d112      	bne.n	8002a4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d112      	bne.n	8002a82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f843 	bl	8002b2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002aa6:	e039      	b.n	8002b1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8002aac:	d109      	bne.n	8002ac2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2228      	movs	r2, #40	; 0x28
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff f831 	bl	8001b24 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b28      	cmp	r3, #40	; 0x28
 8002acc:	d111      	bne.n	8002af2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <I2C_Slave_STOPF+0x25c>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff f830 	bl	8001b50 <HAL_I2C_ListenCpltCallback>
}
 8002af0:	e014      	b.n	8002b1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	2b22      	cmp	r3, #34	; 0x22
 8002af8:	d002      	beq.n	8002b00 <I2C_Slave_STOPF+0x234>
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b22      	cmp	r3, #34	; 0x22
 8002afe:	d10d      	bne.n	8002b1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff f804 	bl	8001b24 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	08002d91 	.word	0x08002d91
 8002b28:	ffff0000 	.word	0xffff0000

08002b2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d002      	beq.n	8002b50 <I2C_ITError+0x24>
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d10a      	bne.n	8002b66 <I2C_ITError+0x3a>
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b22      	cmp	r3, #34	; 0x22
 8002b54:	d107      	bne.n	8002b66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b6c:	2b28      	cmp	r3, #40	; 0x28
 8002b6e:	d107      	bne.n	8002b80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2228      	movs	r2, #40	; 0x28
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b7e:	e015      	b.n	8002bac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8e:	d00a      	beq.n	8002ba6 <I2C_ITError+0x7a>
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b60      	cmp	r3, #96	; 0x60
 8002b94:	d007      	beq.n	8002ba6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	d161      	bne.n	8002c80 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d020      	beq.n	8002c1a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <I2C_ITError+0x25c>)
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fa95 	bl	8001114 <HAL_DMA_Abort_IT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8089 	beq.w	8002d04 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c14:	4610      	mov	r0, r2
 8002c16:	4798      	blx	r3
 8002c18:	e074      	b.n	8002d04 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <I2C_ITError+0x25c>)
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fa74 	bl	8001114 <HAL_DMA_Abort_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d068      	beq.n	8002d04 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d10b      	bne.n	8002c58 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4798      	blx	r3
 8002c7e:	e041      	b.n	8002d04 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b60      	cmp	r3, #96	; 0x60
 8002c8a:	d125      	bne.n	8002cd8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d10b      	bne.n	8002cc0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fe ff61 	bl	8001b98 <HAL_I2C_AbortCpltCallback>
 8002cd6:	e015      	b.n	8002d04 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d10b      	bne.n	8002cfe <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe ff41 	bl	8001b86 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10e      	bne.n	8002d32 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d40:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d113      	bne.n	8002d7e <I2C_ITError+0x252>
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b28      	cmp	r3, #40	; 0x28
 8002d5a:	d110      	bne.n	8002d7e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <I2C_ITError+0x260>)
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fe fee9 	bl	8001b50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <I2C_DMAAbort+0x148>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <I2C_DMAAbort+0x14c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a1a      	lsrs	r2, r3, #8
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00da      	lsls	r2, r3, #3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002dd6:	e00a      	b.n	8002dee <I2C_DMAAbort+0x5e>
    }
    count--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d0ea      	beq.n	8002dc4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2200      	movs	r2, #0
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b60      	cmp	r3, #96	; 0x60
 8002e5e:	d10e      	bne.n	8002e7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7fe fe8e 	bl	8001b98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e7c:	e027      	b.n	8002ece <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e84:	2b28      	cmp	r3, #40	; 0x28
 8002e86:	d117      	bne.n	8002eb8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2228      	movs	r2, #40	; 0x28
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eb6:	e007      	b.n	8002ec8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7fe fe5c 	bl	8001b86 <HAL_I2C_ErrorCallback>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	14f8b589 	.word	0x14f8b589

08002ee0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0a1a      	lsrs	r2, r3, #8
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e008      	b.n	8002f30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d0e9      	beq.n	8002f02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	14f8b589 	.word	0x14f8b589

08002f44 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f54:	d103      	bne.n	8002f5e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f5c:	e007      	b.n	8002f6e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f66:	d102      	bne.n	8002f6e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e272      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8087 	beq.w	80030a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f98:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d00c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fa4:	4b8f      	ldr	r3, [pc, #572]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d112      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5e>
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbe:	4b89      	ldr	r3, [pc, #548]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d06c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x12c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d168      	bne.n	80030a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e24c      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x76>
 8002fe0:	4b80      	ldr	r3, [pc, #512]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a7f      	ldr	r2, [pc, #508]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e02e      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x98>
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7a      	ldr	r2, [pc, #488]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b78      	ldr	r3, [pc, #480]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a77      	ldr	r2, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e01d      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0xbc>
 800301a:	4b72      	ldr	r3, [pc, #456]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a71      	ldr	r2, [pc, #452]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6e      	ldr	r2, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8003034:	4b6b      	ldr	r3, [pc, #428]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6a      	ldr	r2, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a67      	ldr	r2, [pc, #412]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd ff0c 	bl	8000e70 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7fd ff08 	bl	8000e70 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e200      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b5d      	ldr	r3, [pc, #372]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0xe4>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fd fef8 	bl	8000e70 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fd fef4 	bl	8000e70 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1ec      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x10c>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d063      	beq.n	800317a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b2:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030be:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d11c      	bne.n	8003104 <HAL_RCC_OscConfig+0x18c>
 80030ca:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x176>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e1c0      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4939      	ldr	r1, [pc, #228]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	e03a      	b.n	800317a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <HAL_RCC_OscConfig+0x270>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fd fead 	bl	8000e70 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fd fea9 	bl	8000e70 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1a1      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4927      	ldr	r1, [pc, #156]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <HAL_RCC_OscConfig+0x270>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fd fe8c 	bl	8000e70 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fd fe88 	bl	8000e70 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e180      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03a      	beq.n	80031fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d019      	beq.n	80031c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_RCC_OscConfig+0x274>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7fd fe6c 	bl	8000e70 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7fd fe68 	bl	8000e70 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e160      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f000 fad8 	bl	8003770 <RCC_Delay>
 80031c0:	e01c      	b.n	80031fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_RCC_OscConfig+0x274>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fd fe52 	bl	8000e70 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fd fe4e 	bl	8000e70 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d908      	bls.n	80031f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e146      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	42420000 	.word	0x42420000
 80031ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b92      	ldr	r3, [pc, #584]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e9      	bne.n	80031d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a6 	beq.w	8003356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a87      	ldr	r2, [pc, #540]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	61d3      	str	r3, [r2, #28]
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCC_OscConfig+0x4c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d118      	bne.n	8003274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003242:	4b7f      	ldr	r3, [pc, #508]	; (8003440 <HAL_RCC_OscConfig+0x4c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7e      	ldr	r2, [pc, #504]	; (8003440 <HAL_RCC_OscConfig+0x4c8>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7fd fe0f 	bl	8000e70 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fd fe0b 	bl	8000e70 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b64      	cmp	r3, #100	; 0x64
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e103      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	4b75      	ldr	r3, [pc, #468]	; (8003440 <HAL_RCC_OscConfig+0x4c8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x312>
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a6e      	ldr	r2, [pc, #440]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e02d      	b.n	80032e6 <HAL_RCC_OscConfig+0x36e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x334>
 8003292:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4a69      	ldr	r2, [pc, #420]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6213      	str	r3, [r2, #32]
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4a66      	ldr	r2, [pc, #408]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	6213      	str	r3, [r2, #32]
 80032aa:	e01c      	b.n	80032e6 <HAL_RCC_OscConfig+0x36e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d10c      	bne.n	80032ce <HAL_RCC_OscConfig+0x356>
 80032b4:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a60      	ldr	r2, [pc, #384]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	4b5e      	ldr	r3, [pc, #376]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4a5d      	ldr	r2, [pc, #372]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6213      	str	r3, [r2, #32]
 80032cc:	e00b      	b.n	80032e6 <HAL_RCC_OscConfig+0x36e>
 80032ce:	4b5b      	ldr	r3, [pc, #364]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6213      	str	r3, [r2, #32]
 80032da:	4b58      	ldr	r3, [pc, #352]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fd fdbf 	bl	8000e70 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd fdbb 	bl	8000e70 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0b1      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b4b      	ldr	r3, [pc, #300]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ee      	beq.n	80032f6 <HAL_RCC_OscConfig+0x37e>
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fd fda9 	bl	8000e70 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd fda5 	bl	8000e70 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e09b      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	4b40      	ldr	r3, [pc, #256]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ee      	bne.n	8003322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b3c      	ldr	r3, [pc, #240]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4a3b      	ldr	r2, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8087 	beq.w	800346e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d061      	beq.n	8003430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d146      	bne.n	8003402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fd fd79 	bl	8000e70 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fd75 	bl	8000e70 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e06d      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4921      	ldr	r1, [pc, #132]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	4b1f      	ldr	r3, [pc, #124]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a19      	ldr	r1, [r3, #32]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	430b      	orrs	r3, r1
 80033ce:	491b      	ldr	r1, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fd fd49 	bl	8000e70 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fd fd45 	bl	8000e70 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e03d      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x46a>
 8003400:	e035      	b.n	800346e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fd fd32 	bl	8000e70 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fd fd2e 	bl	8000e70 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e026      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x498>
 800342e:	e01e      	b.n	800346e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e019      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
 8003444:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_OscConfig+0x500>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	429a      	cmp	r2, r3
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0d0      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d910      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b67      	ldr	r3, [pc, #412]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4965      	ldr	r1, [pc, #404]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d040      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e073      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06b      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4936      	ldr	r1, [pc, #216]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fd fc80 	bl	8000e70 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fd fc7c 	bl	8000e70 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e053      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d210      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4922      	ldr	r1, [pc, #136]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	; (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1cc>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1d0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fbde 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	0800539c 	.word	0x0800539c
 8003648:	20000000 	.word	0x20000000
 800364c:	20000008 	.word	0x20000008

08003650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b490      	push	{r4, r7}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003658:	1d3c      	adds	r4, r7, #4
 800365a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800365c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003660:	f240 2301 	movw	r3, #513	; 0x201
 8003664:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCC_GetSysClockFreq+0xb0>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b04      	cmp	r3, #4
 8003688:	d002      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x40>
 800368a:	2b08      	cmp	r3, #8
 800368c:	d003      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x46>
 800368e:	e02b      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003692:	623b      	str	r3, [r7, #32]
      break;
 8003694:	e02b      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	0c9b      	lsrs	r3, r3, #18
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3328      	adds	r3, #40	; 0x28
 80036a0:	443b      	add	r3, r7
 80036a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036b2:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	0c5b      	lsrs	r3, r3, #17
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	3328      	adds	r3, #40	; 0x28
 80036be:	443b      	add	r3, r7
 80036c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	e004      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	623b      	str	r3, [r7, #32]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036ea:	623b      	str	r3, [r7, #32]
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	6a3b      	ldr	r3, [r7, #32]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc90      	pop	{r4, r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	0800538c 	.word	0x0800538c
 8003700:	40021000 	.word	0x40021000
 8003704:	007a1200 	.word	0x007a1200
 8003708:	003d0900 	.word	0x003d0900

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_RCC_GetHCLKFreq+0x10>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000000 	.word	0x20000000

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003724:	f7ff fff2 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	080053ac 	.word	0x080053ac

08003748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800374c:	f7ff ffde 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0adb      	lsrs	r3, r3, #11
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	; (800376c <HAL_RCC_GetPCLK2Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	080053ac 	.word	0x080053ac

08003770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <RCC_Delay+0x34>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <RCC_Delay+0x38>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0a5b      	lsrs	r3, r3, #9
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800378c:	bf00      	nop
  }
  while (Delay --);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e5a      	subs	r2, r3, #1
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f9      	bne.n	800378c <RCC_Delay+0x1c>
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000000 	.word	0x20000000
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e041      	b.n	8003842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd f8ae 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 fa70 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d001      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e03a      	b.n	80038da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_TIM_Base_Start_IT+0x98>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x58>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d009      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x58>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_TIM_Base_Start_IT+0xa0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d111      	bne.n	80038c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d010      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c6:	e007      	b.n	80038d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800

080038f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0202 	mvn.w	r2, #2
 800391c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9b1 	bl	8003c9a <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9a4 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f9b3 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d122      	bne.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d11b      	bne.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0204 	mvn.w	r2, #4
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f987 	bl	8003c9a <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f97a 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f989 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d122      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d11b      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0208 	mvn.w	r2, #8
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2204      	movs	r2, #4
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f95d 	bl	8003c9a <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f950 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f95f 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d122      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0210 	mvn.w	r2, #16
 8003a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f933 	bl	8003c9a <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f926 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f935 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10e      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0201 	mvn.w	r2, #1
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fc fd42 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b80      	cmp	r3, #128	; 0x80
 8003a80:	d10e      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d107      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa77 	bl	8003f8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d10e      	bne.n	8003acc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d107      	bne.n	8003acc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8f9 	bl	8003cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d10e      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d107      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0220 	mvn.w	r2, #32
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa42 	bl	8003f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIM_ConfigClockSource+0x18>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0b3      	b.n	8003c80 <HAL_TIM_ConfigClockSource+0x180>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d03e      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0xd0>
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b56:	f200 8087 	bhi.w	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	f000 8085 	beq.w	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d87f      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d01a      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xa2>
 8003b6c:	2b70      	cmp	r3, #112	; 0x70
 8003b6e:	d87b      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d050      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x116>
 8003b74:	2b60      	cmp	r3, #96	; 0x60
 8003b76:	d877      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b78:	2b50      	cmp	r3, #80	; 0x50
 8003b7a:	d03c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8003b7c:	2b50      	cmp	r3, #80	; 0x50
 8003b7e:	d873      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d058      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x136>
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d86f      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b88:	2b30      	cmp	r3, #48	; 0x30
 8003b8a:	d064      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x156>
 8003b8c:	2b30      	cmp	r3, #48	; 0x30
 8003b8e:	d86b      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d060      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x156>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d867      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x156>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d05a      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ba0:	e062      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f000 f966 	bl	8003e82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
      break;
 8003bce:	e04e      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6899      	ldr	r1, [r3, #8]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f000 f94f 	bl	8003e82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf2:	609a      	str	r2, [r3, #8]
      break;
 8003bf4:	e03b      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 f8c6 	bl	8003d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2150      	movs	r1, #80	; 0x50
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f91d 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c14:	e02b      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f000 f8e4 	bl	8003df0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2160      	movs	r1, #96	; 0x60
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f90d 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c34:	e01b      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 f8a6 	bl	8003d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f8fd 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c54:	e00b      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f000 f8f4 	bl	8003e4e <TIM_ITRx_SetConfig>
        break;
 8003c66:	e002      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <TIM_Base_SetConfig+0xb8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x30>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x30>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <TIM_Base_SetConfig+0xbc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <TIM_Base_SetConfig+0xc0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <TIM_Base_SetConfig+0xb8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_Base_SetConfig+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d007      	beq.n	8003d32 <TIM_Base_SetConfig+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <TIM_Base_SetConfig+0xbc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <TIM_Base_SetConfig+0xc0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <TIM_Base_SetConfig+0xb8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d103      	bne.n	8003d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	615a      	str	r2, [r3, #20]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800

08003d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 030a 	bic.w	r3, r3, #10
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 0210 	bic.w	r2, r3, #16
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	031b      	lsls	r3, r3, #12
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f043 0307 	orr.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b087      	sub	sp, #28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	021a      	lsls	r2, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	609a      	str	r2, [r3, #8]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e046      	b.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d009      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10c      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800

08003f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e03f      	b.n	8004032 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fcd8 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	; 0x24
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fc85 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08a      	sub	sp, #40	; 0x28
 800403e:	af02      	add	r7, sp, #8
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d17c      	bne.n	8004154 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_UART_Transmit+0x2c>
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e075      	b.n	8004156 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_UART_Transmit+0x3e>
 8004074:	2302      	movs	r3, #2
 8004076:	e06e      	b.n	8004156 <HAL_UART_Transmit+0x11c>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408e:	f7fc feef 	bl	8000e70 <HAL_GetTick>
 8004092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a8:	d108      	bne.n	80040bc <HAL_UART_Transmit+0x82>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e003      	b.n	80040c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040cc:	e02a      	b.n	8004124 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2180      	movs	r1, #128	; 0x80
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fa38 	bl	800454e <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e036      	b.n	8004156 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	3302      	adds	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e007      	b.n	8004116 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1cf      	bne.n	80040ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	2140      	movs	r1, #64	; 0x40
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fa08 	bl	800454e <UART_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e006      	b.n	8004156 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	4613      	mov	r3, r2
 800416a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b20      	cmp	r3, #32
 8004176:	d11d      	bne.n	80041b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Receive_IT+0x26>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e016      	b.n	80041b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_UART_Receive_IT+0x38>
 8004192:	2302      	movs	r3, #2
 8004194:	e00f      	b.n	80041b6 <HAL_UART_Receive_IT+0x58>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fa19 	bl	80045e2 <UART_Start_Receive_IT>
 80041b0:	4603      	mov	r3, r0
 80041b2:	e000      	b.n	80041b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_UART_IRQHandler+0x52>
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fac9 	bl	80047a2 <UART_Receive_IT>
      return;
 8004210:	e17b      	b.n	800450a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80b1 	beq.w	800437c <HAL_UART_IRQHandler+0x1bc>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_UART_IRQHandler+0x70>
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a6 	beq.w	800437c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_UART_IRQHandler+0x90>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_UART_IRQHandler+0xb0>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0202 	orr.w	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_UART_IRQHandler+0xd0>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00f      	beq.n	80042ba <HAL_UART_IRQHandler+0xfa>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_UART_IRQHandler+0xee>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 811e 	beq.w	8004500 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_UART_IRQHandler+0x11e>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fa62 	bl	80047a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <HAL_UART_IRQHandler+0x146>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d031      	beq.n	800436a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f9a4 	bl	8004654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d023      	beq.n	8004362 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004328:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	4a76      	ldr	r2, [pc, #472]	; (8004510 <HAL_UART_IRQHandler+0x350>)
 8004338:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fee8 	bl	8001114 <HAL_DMA_Abort_IT>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004354:	4610      	mov	r0, r2
 8004356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	e00e      	b.n	8004378 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8e3 	bl	8004526 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	e00a      	b.n	8004378 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8df 	bl	8004526 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	e006      	b.n	8004378 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8db 	bl	8004526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004376:	e0c3      	b.n	8004500 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	bf00      	nop
    return;
 800437a:	e0c1      	b.n	8004500 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 80a1 	bne.w	80044c8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 809b 	beq.w	80044c8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8095 	beq.w	80044c8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04e      	beq.n	8004460 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043cc:	8a3b      	ldrh	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8098 	beq.w	8004504 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043d8:	8a3a      	ldrh	r2, [r7, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	f080 8092 	bcs.w	8004504 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8a3a      	ldrh	r2, [r7, #16]
 80043e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d02b      	beq.n	8004448 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0210 	bic.w	r2, r2, #16
 800443c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc fe2b 	bl	800109e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	b29b      	uxth	r3, r3
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f86d 	bl	8004538 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800445e:	e051      	b.n	8004504 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004468:	b29b      	uxth	r3, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d047      	beq.n	8004508 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004478:	8a7b      	ldrh	r3, [r7, #18]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d044      	beq.n	8004508 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800448c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0210 	bic.w	r2, r2, #16
 80044ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044bc:	8a7b      	ldrh	r3, [r7, #18]
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f839 	bl	8004538 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044c6:	e01f      	b.n	8004508 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_UART_IRQHandler+0x324>
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8f9 	bl	80046d4 <UART_Transmit_IT>
    return;
 80044e2:	e012      	b.n	800450a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <HAL_UART_IRQHandler+0x34a>
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f93a 	bl	8004772 <UART_EndTransmit_IT>
    return;
 80044fe:	e004      	b.n	800450a <HAL_UART_IRQHandler+0x34a>
    return;
 8004500:	bf00      	nop
 8004502:	e002      	b.n	800450a <HAL_UART_IRQHandler+0x34a>
      return;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <HAL_UART_IRQHandler+0x34a>
      return;
 8004508:	bf00      	nop
  }
}
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	080046ad 	.word	0x080046ad

08004514 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455e:	e02c      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004566:	d028      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <UART_WaitOnFlagUntilTimeout+0x30>
 800456e:	f7fc fc7f 	bl	8000e70 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	429a      	cmp	r2, r3
 800457c:	d21d      	bcs.n	80045ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800458c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e00f      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d0c3      	beq.n	8004560 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2222      	movs	r2, #34	; 0x22
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004626:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0220 	orr.w	r2, r2, #32
 8004646:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800466a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0210 	bic.w	r2, r2, #16
 8004692:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff ff2d 	bl	8004526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b21      	cmp	r3, #33	; 0x21
 80046e6:	d13e      	bne.n	8004766 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f0:	d114      	bne.n	800471c <UART_Transmit_IT+0x48>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d110      	bne.n	800471c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800470e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]
 800471a:	e008      	b.n	800472e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	1c59      	adds	r1, r3, #1
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6211      	str	r1, [r2, #32]
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29b      	uxth	r3, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4619      	mov	r1, r3
 800473c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004750:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004760:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff febe 	bl	8004514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	f040 8099 	bne.w	80048ea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c0:	d117      	bne.n	80047f2 <UART_Receive_IT+0x50>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	1c9a      	adds	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
 80047f0:	e026      	b.n	8004840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004804:	d007      	beq.n	8004816 <UART_Receive_IT+0x74>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <UART_Receive_IT+0x82>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e008      	b.n	8004836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004830:	b2da      	uxtb	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29b      	uxth	r3, r3
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004850:	2b00      	cmp	r3, #0
 8004852:	d148      	bne.n	80048e6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0220 	bic.w	r2, r2, #32
 8004862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	d123      	bne.n	80048dc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0210 	bic.w	r2, r2, #16
 80048a8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d10a      	bne.n	80048ce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fe2f 	bl	8004538 <HAL_UARTEx_RxEventCallback>
 80048da:	e002      	b.n	80048e2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fb fc35 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e002      	b.n	80048ec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800492e:	f023 030c 	bic.w	r3, r3, #12
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	430b      	orrs	r3, r1
 800493a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2c      	ldr	r2, [pc, #176]	; (8004a08 <UART_SetConfig+0x114>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d103      	bne.n	8004964 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe fef4 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	e002      	b.n	800496a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe fedc 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8004968:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <UART_SetConfig+0x118>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	0119      	lsls	r1, r3, #4
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009a      	lsls	r2, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <UART_SetConfig+0x118>)
 80049a2:	fba3 0302 	umull	r0, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2064      	movs	r0, #100	; 0x64
 80049aa:	fb00 f303 	mul.w	r3, r0, r3
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	3332      	adds	r3, #50	; 0x32
 80049b4:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <UART_SetConfig+0x118>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c0:	4419      	add	r1, r3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009a      	lsls	r2, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <UART_SetConfig+0x118>)
 80049da:	fba3 0302 	umull	r0, r3, r3, r2
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2064      	movs	r0, #100	; 0x64
 80049e2:	fb00 f303 	mul.w	r3, r0, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	3332      	adds	r3, #50	; 0x32
 80049ec:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <UART_SetConfig+0x118>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	440a      	add	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	51eb851f 	.word	0x51eb851f

08004a10 <__errno>:
 8004a10:	4b01      	ldr	r3, [pc, #4]	; (8004a18 <__errno+0x8>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000010 	.word	0x20000010

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	2600      	movs	r6, #0
 8004a20:	4d0c      	ldr	r5, [pc, #48]	; (8004a54 <__libc_init_array+0x38>)
 8004a22:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	f000 fc9c 	bl	8005368 <_init>
 8004a30:	2600      	movs	r6, #0
 8004a32:	4d0a      	ldr	r5, [pc, #40]	; (8004a5c <__libc_init_array+0x40>)
 8004a34:	4c0a      	ldr	r4, [pc, #40]	; (8004a60 <__libc_init_array+0x44>)
 8004a36:	1b64      	subs	r4, r4, r5
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	080053e8 	.word	0x080053e8
 8004a58:	080053e8 	.word	0x080053e8
 8004a5c:	080053e8 	.word	0x080053e8
 8004a60:	080053ec 	.word	0x080053ec

08004a64 <memset>:
 8004a64:	4603      	mov	r3, r0
 8004a66:	4402      	add	r2, r0
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <memset+0xa>
 8004a6c:	4770      	bx	lr
 8004a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a72:	e7f9      	b.n	8004a68 <memset+0x4>

08004a74 <siprintf>:
 8004a74:	b40e      	push	{r1, r2, r3}
 8004a76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a7a:	b500      	push	{lr}
 8004a7c:	b09c      	sub	sp, #112	; 0x70
 8004a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a80:	9002      	str	r0, [sp, #8]
 8004a82:	9006      	str	r0, [sp, #24]
 8004a84:	9107      	str	r1, [sp, #28]
 8004a86:	9104      	str	r1, [sp, #16]
 8004a88:	4808      	ldr	r0, [pc, #32]	; (8004aac <siprintf+0x38>)
 8004a8a:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <siprintf+0x3c>)
 8004a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a90:	9105      	str	r1, [sp, #20]
 8004a92:	6800      	ldr	r0, [r0, #0]
 8004a94:	a902      	add	r1, sp, #8
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	f000 f868 	bl	8004b6c <_svfiprintf_r>
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9b02      	ldr	r3, [sp, #8]
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	b01c      	add	sp, #112	; 0x70
 8004aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aa8:	b003      	add	sp, #12
 8004aaa:	4770      	bx	lr
 8004aac:	20000010 	.word	0x20000010
 8004ab0:	ffff0208 	.word	0xffff0208

08004ab4 <__ssputs_r>:
 8004ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	688e      	ldr	r6, [r1, #8]
 8004aba:	4682      	mov	sl, r0
 8004abc:	429e      	cmp	r6, r3
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4690      	mov	r8, r2
 8004ac2:	461f      	mov	r7, r3
 8004ac4:	d838      	bhi.n	8004b38 <__ssputs_r+0x84>
 8004ac6:	898a      	ldrh	r2, [r1, #12]
 8004ac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004acc:	d032      	beq.n	8004b34 <__ssputs_r+0x80>
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	6909      	ldr	r1, [r1, #16]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	eba5 0901 	sub.w	r9, r5, r1
 8004ad8:	6965      	ldr	r5, [r4, #20]
 8004ada:	444b      	add	r3, r9
 8004adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae4:	106d      	asrs	r5, r5, #1
 8004ae6:	429d      	cmp	r5, r3
 8004ae8:	bf38      	it	cc
 8004aea:	461d      	movcc	r5, r3
 8004aec:	0553      	lsls	r3, r2, #21
 8004aee:	d531      	bpl.n	8004b54 <__ssputs_r+0xa0>
 8004af0:	4629      	mov	r1, r5
 8004af2:	f000 fb6f 	bl	80051d4 <_malloc_r>
 8004af6:	4606      	mov	r6, r0
 8004af8:	b950      	cbnz	r0, 8004b10 <__ssputs_r+0x5c>
 8004afa:	230c      	movs	r3, #12
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b00:	f8ca 3000 	str.w	r3, [sl]
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	464a      	mov	r2, r9
 8004b12:	6921      	ldr	r1, [r4, #16]
 8004b14:	f000 face 	bl	80050b4 <memcpy>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	6126      	str	r6, [r4, #16]
 8004b26:	444e      	add	r6, r9
 8004b28:	6026      	str	r6, [r4, #0]
 8004b2a:	463e      	mov	r6, r7
 8004b2c:	6165      	str	r5, [r4, #20]
 8004b2e:	eba5 0509 	sub.w	r5, r5, r9
 8004b32:	60a5      	str	r5, [r4, #8]
 8004b34:	42be      	cmp	r6, r7
 8004b36:	d900      	bls.n	8004b3a <__ssputs_r+0x86>
 8004b38:	463e      	mov	r6, r7
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	f000 fac6 	bl	80050d0 <memmove>
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	2000      	movs	r0, #0
 8004b48:	1b9b      	subs	r3, r3, r6
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	4433      	add	r3, r6
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	e7db      	b.n	8004b0c <__ssputs_r+0x58>
 8004b54:	462a      	mov	r2, r5
 8004b56:	f000 fbb1 	bl	80052bc <_realloc_r>
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d1e1      	bne.n	8004b24 <__ssputs_r+0x70>
 8004b60:	4650      	mov	r0, sl
 8004b62:	6921      	ldr	r1, [r4, #16]
 8004b64:	f000 face 	bl	8005104 <_free_r>
 8004b68:	e7c7      	b.n	8004afa <__ssputs_r+0x46>
	...

08004b6c <_svfiprintf_r>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	4698      	mov	r8, r3
 8004b72:	898b      	ldrh	r3, [r1, #12]
 8004b74:	4607      	mov	r7, r0
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	460d      	mov	r5, r1
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	b09d      	sub	sp, #116	; 0x74
 8004b7e:	d50e      	bpl.n	8004b9e <_svfiprintf_r+0x32>
 8004b80:	690b      	ldr	r3, [r1, #16]
 8004b82:	b963      	cbnz	r3, 8004b9e <_svfiprintf_r+0x32>
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	f000 fb25 	bl	80051d4 <_malloc_r>
 8004b8a:	6028      	str	r0, [r5, #0]
 8004b8c:	6128      	str	r0, [r5, #16]
 8004b8e:	b920      	cbnz	r0, 8004b9a <_svfiprintf_r+0x2e>
 8004b90:	230c      	movs	r3, #12
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b98:	e0d1      	b.n	8004d3e <_svfiprintf_r+0x1d2>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	616b      	str	r3, [r5, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ba8:	2330      	movs	r3, #48	; 0x30
 8004baa:	f04f 0901 	mov.w	r9, #1
 8004bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d58 <_svfiprintf_r+0x1ec>
 8004bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bba:	4623      	mov	r3, r4
 8004bbc:	469a      	mov	sl, r3
 8004bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bc2:	b10a      	cbz	r2, 8004bc8 <_svfiprintf_r+0x5c>
 8004bc4:	2a25      	cmp	r2, #37	; 0x25
 8004bc6:	d1f9      	bne.n	8004bbc <_svfiprintf_r+0x50>
 8004bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bcc:	d00b      	beq.n	8004be6 <_svfiprintf_r+0x7a>
 8004bce:	465b      	mov	r3, fp
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f7ff ff6d 	bl	8004ab4 <__ssputs_r>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f000 80aa 	beq.w	8004d34 <_svfiprintf_r+0x1c8>
 8004be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be2:	445a      	add	r2, fp
 8004be4:	9209      	str	r2, [sp, #36]	; 0x24
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a2 	beq.w	8004d34 <_svfiprintf_r+0x1c8>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bfa:	f10a 0a01 	add.w	sl, sl, #1
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	9307      	str	r3, [sp, #28]
 8004c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c06:	931a      	str	r3, [sp, #104]	; 0x68
 8004c08:	4654      	mov	r4, sl
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c10:	4851      	ldr	r0, [pc, #324]	; (8004d58 <_svfiprintf_r+0x1ec>)
 8004c12:	f000 fa41 	bl	8005098 <memchr>
 8004c16:	9a04      	ldr	r2, [sp, #16]
 8004c18:	b9d8      	cbnz	r0, 8004c52 <_svfiprintf_r+0xe6>
 8004c1a:	06d0      	lsls	r0, r2, #27
 8004c1c:	bf44      	itt	mi
 8004c1e:	2320      	movmi	r3, #32
 8004c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c24:	0711      	lsls	r1, r2, #28
 8004c26:	bf44      	itt	mi
 8004c28:	232b      	movmi	r3, #43	; 0x2b
 8004c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c32:	2b2a      	cmp	r3, #42	; 0x2a
 8004c34:	d015      	beq.n	8004c62 <_svfiprintf_r+0xf6>
 8004c36:	4654      	mov	r4, sl
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f04f 0c0a 	mov.w	ip, #10
 8004c3e:	9a07      	ldr	r2, [sp, #28]
 8004c40:	4621      	mov	r1, r4
 8004c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c46:	3b30      	subs	r3, #48	; 0x30
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d94e      	bls.n	8004cea <_svfiprintf_r+0x17e>
 8004c4c:	b1b0      	cbz	r0, 8004c7c <_svfiprintf_r+0x110>
 8004c4e:	9207      	str	r2, [sp, #28]
 8004c50:	e014      	b.n	8004c7c <_svfiprintf_r+0x110>
 8004c52:	eba0 0308 	sub.w	r3, r0, r8
 8004c56:	fa09 f303 	lsl.w	r3, r9, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	46a2      	mov	sl, r4
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	e7d2      	b.n	8004c08 <_svfiprintf_r+0x9c>
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	1d19      	adds	r1, r3, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	9103      	str	r1, [sp, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfbb      	ittet	lt
 8004c6e:	425b      	neglt	r3, r3
 8004c70:	f042 0202 	orrlt.w	r2, r2, #2
 8004c74:	9307      	strge	r3, [sp, #28]
 8004c76:	9307      	strlt	r3, [sp, #28]
 8004c78:	bfb8      	it	lt
 8004c7a:	9204      	strlt	r2, [sp, #16]
 8004c7c:	7823      	ldrb	r3, [r4, #0]
 8004c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c80:	d10c      	bne.n	8004c9c <_svfiprintf_r+0x130>
 8004c82:	7863      	ldrb	r3, [r4, #1]
 8004c84:	2b2a      	cmp	r3, #42	; 0x2a
 8004c86:	d135      	bne.n	8004cf4 <_svfiprintf_r+0x188>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	3402      	adds	r4, #2
 8004c8c:	1d1a      	adds	r2, r3, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	9203      	str	r2, [sp, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bfb8      	it	lt
 8004c96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004d5c <_svfiprintf_r+0x1f0>
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	4650      	mov	r0, sl
 8004ca4:	7821      	ldrb	r1, [r4, #0]
 8004ca6:	f000 f9f7 	bl	8005098 <memchr>
 8004caa:	b140      	cbz	r0, 8004cbe <_svfiprintf_r+0x152>
 8004cac:	2340      	movs	r3, #64	; 0x40
 8004cae:	eba0 000a 	sub.w	r0, r0, sl
 8004cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	3401      	adds	r4, #1
 8004cba:	4303      	orrs	r3, r0
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc2:	2206      	movs	r2, #6
 8004cc4:	4826      	ldr	r0, [pc, #152]	; (8004d60 <_svfiprintf_r+0x1f4>)
 8004cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cca:	f000 f9e5 	bl	8005098 <memchr>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d038      	beq.n	8004d44 <_svfiprintf_r+0x1d8>
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <_svfiprintf_r+0x1f8>)
 8004cd4:	bb1b      	cbnz	r3, 8004d1e <_svfiprintf_r+0x1b2>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	3307      	adds	r3, #7
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	3308      	adds	r3, #8
 8004ce0:	9303      	str	r3, [sp, #12]
 8004ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce4:	4433      	add	r3, r6
 8004ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce8:	e767      	b.n	8004bba <_svfiprintf_r+0x4e>
 8004cea:	460c      	mov	r4, r1
 8004cec:	2001      	movs	r0, #1
 8004cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf2:	e7a5      	b.n	8004c40 <_svfiprintf_r+0xd4>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f04f 0c0a 	mov.w	ip, #10
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	3401      	adds	r4, #1
 8004cfe:	9305      	str	r3, [sp, #20]
 8004d00:	4620      	mov	r0, r4
 8004d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d06:	3a30      	subs	r2, #48	; 0x30
 8004d08:	2a09      	cmp	r2, #9
 8004d0a:	d903      	bls.n	8004d14 <_svfiprintf_r+0x1a8>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0c5      	beq.n	8004c9c <_svfiprintf_r+0x130>
 8004d10:	9105      	str	r1, [sp, #20]
 8004d12:	e7c3      	b.n	8004c9c <_svfiprintf_r+0x130>
 8004d14:	4604      	mov	r4, r0
 8004d16:	2301      	movs	r3, #1
 8004d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d1c:	e7f0      	b.n	8004d00 <_svfiprintf_r+0x194>
 8004d1e:	ab03      	add	r3, sp, #12
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	462a      	mov	r2, r5
 8004d24:	4638      	mov	r0, r7
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <_svfiprintf_r+0x1fc>)
 8004d28:	a904      	add	r1, sp, #16
 8004d2a:	f3af 8000 	nop.w
 8004d2e:	1c42      	adds	r2, r0, #1
 8004d30:	4606      	mov	r6, r0
 8004d32:	d1d6      	bne.n	8004ce2 <_svfiprintf_r+0x176>
 8004d34:	89ab      	ldrh	r3, [r5, #12]
 8004d36:	065b      	lsls	r3, r3, #25
 8004d38:	f53f af2c 	bmi.w	8004b94 <_svfiprintf_r+0x28>
 8004d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d3e:	b01d      	add	sp, #116	; 0x74
 8004d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d44:	ab03      	add	r3, sp, #12
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	462a      	mov	r2, r5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <_svfiprintf_r+0x1fc>)
 8004d4e:	a904      	add	r1, sp, #16
 8004d50:	f000 f87c 	bl	8004e4c <_printf_i>
 8004d54:	e7eb      	b.n	8004d2e <_svfiprintf_r+0x1c2>
 8004d56:	bf00      	nop
 8004d58:	080053b4 	.word	0x080053b4
 8004d5c:	080053ba 	.word	0x080053ba
 8004d60:	080053be 	.word	0x080053be
 8004d64:	00000000 	.word	0x00000000
 8004d68:	08004ab5 	.word	0x08004ab5

08004d6c <_printf_common>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	4616      	mov	r6, r2
 8004d72:	4699      	mov	r9, r3
 8004d74:	688a      	ldr	r2, [r1, #8]
 8004d76:	690b      	ldr	r3, [r1, #16]
 8004d78:	4607      	mov	r7, r0
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	bfb8      	it	lt
 8004d7e:	4613      	movlt	r3, r2
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d86:	460c      	mov	r4, r1
 8004d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d8c:	b10a      	cbz	r2, 8004d92 <_printf_common+0x26>
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	0699      	lsls	r1, r3, #26
 8004d96:	bf42      	ittt	mi
 8004d98:	6833      	ldrmi	r3, [r6, #0]
 8004d9a:	3302      	addmi	r3, #2
 8004d9c:	6033      	strmi	r3, [r6, #0]
 8004d9e:	6825      	ldr	r5, [r4, #0]
 8004da0:	f015 0506 	ands.w	r5, r5, #6
 8004da4:	d106      	bne.n	8004db4 <_printf_common+0x48>
 8004da6:	f104 0a19 	add.w	sl, r4, #25
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	6832      	ldr	r2, [r6, #0]
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	42ab      	cmp	r3, r5
 8004db2:	dc28      	bgt.n	8004e06 <_printf_common+0x9a>
 8004db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db8:	1e13      	subs	r3, r2, #0
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	bf18      	it	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	0692      	lsls	r2, r2, #26
 8004dc2:	d42d      	bmi.n	8004e20 <_printf_common+0xb4>
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dcc:	47c0      	blx	r8
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d020      	beq.n	8004e14 <_printf_common+0xa8>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	68e5      	ldr	r5, [r4, #12]
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	bf18      	it	ne
 8004dde:	2500      	movne	r5, #0
 8004de0:	6832      	ldr	r2, [r6, #0]
 8004de2:	f04f 0600 	mov.w	r6, #0
 8004de6:	68a3      	ldr	r3, [r4, #8]
 8004de8:	bf08      	it	eq
 8004dea:	1aad      	subeq	r5, r5, r2
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	bf08      	it	eq
 8004df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df4:	4293      	cmp	r3, r2
 8004df6:	bfc4      	itt	gt
 8004df8:	1a9b      	subgt	r3, r3, r2
 8004dfa:	18ed      	addgt	r5, r5, r3
 8004dfc:	341a      	adds	r4, #26
 8004dfe:	42b5      	cmp	r5, r6
 8004e00:	d11a      	bne.n	8004e38 <_printf_common+0xcc>
 8004e02:	2000      	movs	r0, #0
 8004e04:	e008      	b.n	8004e18 <_printf_common+0xac>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4652      	mov	r2, sl
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	47c0      	blx	r8
 8004e10:	3001      	adds	r0, #1
 8004e12:	d103      	bne.n	8004e1c <_printf_common+0xb0>
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	e7c4      	b.n	8004daa <_printf_common+0x3e>
 8004e20:	2030      	movs	r0, #48	; 0x30
 8004e22:	18e1      	adds	r1, r4, r3
 8004e24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2e:	4422      	add	r2, r4
 8004e30:	3302      	adds	r3, #2
 8004e32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e36:	e7c5      	b.n	8004dc4 <_printf_common+0x58>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d0e6      	beq.n	8004e14 <_printf_common+0xa8>
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7d9      	b.n	8004dfe <_printf_common+0x92>
	...

08004e4c <_printf_i>:
 8004e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	7e0f      	ldrb	r7, [r1, #24]
 8004e52:	4691      	mov	r9, r2
 8004e54:	2f78      	cmp	r7, #120	; 0x78
 8004e56:	4680      	mov	r8, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	469a      	mov	sl, r3
 8004e5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e62:	d807      	bhi.n	8004e74 <_printf_i+0x28>
 8004e64:	2f62      	cmp	r7, #98	; 0x62
 8004e66:	d80a      	bhi.n	8004e7e <_printf_i+0x32>
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	f000 80d9 	beq.w	8005020 <_printf_i+0x1d4>
 8004e6e:	2f58      	cmp	r7, #88	; 0x58
 8004e70:	f000 80a4 	beq.w	8004fbc <_printf_i+0x170>
 8004e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e7c:	e03a      	b.n	8004ef4 <_printf_i+0xa8>
 8004e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e82:	2b15      	cmp	r3, #21
 8004e84:	d8f6      	bhi.n	8004e74 <_printf_i+0x28>
 8004e86:	a101      	add	r1, pc, #4	; (adr r1, 8004e8c <_printf_i+0x40>)
 8004e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e8c:	08004ee5 	.word	0x08004ee5
 8004e90:	08004ef9 	.word	0x08004ef9
 8004e94:	08004e75 	.word	0x08004e75
 8004e98:	08004e75 	.word	0x08004e75
 8004e9c:	08004e75 	.word	0x08004e75
 8004ea0:	08004e75 	.word	0x08004e75
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	08004e75 	.word	0x08004e75
 8004eac:	08004e75 	.word	0x08004e75
 8004eb0:	08004e75 	.word	0x08004e75
 8004eb4:	08004e75 	.word	0x08004e75
 8004eb8:	08005007 	.word	0x08005007
 8004ebc:	08004f29 	.word	0x08004f29
 8004ec0:	08004fe9 	.word	0x08004fe9
 8004ec4:	08004e75 	.word	0x08004e75
 8004ec8:	08004e75 	.word	0x08004e75
 8004ecc:	08005029 	.word	0x08005029
 8004ed0:	08004e75 	.word	0x08004e75
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004e75 	.word	0x08004e75
 8004edc:	08004e75 	.word	0x08004e75
 8004ee0:	08004ff1 	.word	0x08004ff1
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	1d1a      	adds	r2, r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	602a      	str	r2, [r5, #0]
 8004eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0a4      	b.n	8005042 <_printf_i+0x1f6>
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	6829      	ldr	r1, [r5, #0]
 8004efc:	0606      	lsls	r6, r0, #24
 8004efe:	f101 0304 	add.w	r3, r1, #4
 8004f02:	d50a      	bpl.n	8004f1a <_printf_i+0xce>
 8004f04:	680e      	ldr	r6, [r1, #0]
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	2e00      	cmp	r6, #0
 8004f0a:	da03      	bge.n	8004f14 <_printf_i+0xc8>
 8004f0c:	232d      	movs	r3, #45	; 0x2d
 8004f0e:	4276      	negs	r6, r6
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f14:	230a      	movs	r3, #10
 8004f16:	485e      	ldr	r0, [pc, #376]	; (8005090 <_printf_i+0x244>)
 8004f18:	e019      	b.n	8004f4e <_printf_i+0x102>
 8004f1a:	680e      	ldr	r6, [r1, #0]
 8004f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	bf18      	it	ne
 8004f24:	b236      	sxthne	r6, r6
 8004f26:	e7ef      	b.n	8004f08 <_printf_i+0xbc>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	6820      	ldr	r0, [r4, #0]
 8004f2c:	1d19      	adds	r1, r3, #4
 8004f2e:	6029      	str	r1, [r5, #0]
 8004f30:	0601      	lsls	r1, r0, #24
 8004f32:	d501      	bpl.n	8004f38 <_printf_i+0xec>
 8004f34:	681e      	ldr	r6, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <_printf_i+0xf2>
 8004f38:	0646      	lsls	r6, r0, #25
 8004f3a:	d5fb      	bpl.n	8004f34 <_printf_i+0xe8>
 8004f3c:	881e      	ldrh	r6, [r3, #0]
 8004f3e:	2f6f      	cmp	r7, #111	; 0x6f
 8004f40:	bf0c      	ite	eq
 8004f42:	2308      	moveq	r3, #8
 8004f44:	230a      	movne	r3, #10
 8004f46:	4852      	ldr	r0, [pc, #328]	; (8005090 <_printf_i+0x244>)
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f4e:	6865      	ldr	r5, [r4, #4]
 8004f50:	2d00      	cmp	r5, #0
 8004f52:	bfa8      	it	ge
 8004f54:	6821      	ldrge	r1, [r4, #0]
 8004f56:	60a5      	str	r5, [r4, #8]
 8004f58:	bfa4      	itt	ge
 8004f5a:	f021 0104 	bicge.w	r1, r1, #4
 8004f5e:	6021      	strge	r1, [r4, #0]
 8004f60:	b90e      	cbnz	r6, 8004f66 <_printf_i+0x11a>
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	d04d      	beq.n	8005002 <_printf_i+0x1b6>
 8004f66:	4615      	mov	r5, r2
 8004f68:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f6c:	fb03 6711 	mls	r7, r3, r1, r6
 8004f70:	5dc7      	ldrb	r7, [r0, r7]
 8004f72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f76:	4637      	mov	r7, r6
 8004f78:	42bb      	cmp	r3, r7
 8004f7a:	460e      	mov	r6, r1
 8004f7c:	d9f4      	bls.n	8004f68 <_printf_i+0x11c>
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d10b      	bne.n	8004f9a <_printf_i+0x14e>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	07de      	lsls	r6, r3, #31
 8004f86:	d508      	bpl.n	8004f9a <_printf_i+0x14e>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	6861      	ldr	r1, [r4, #4]
 8004f8c:	4299      	cmp	r1, r3
 8004f8e:	bfde      	ittt	le
 8004f90:	2330      	movle	r3, #48	; 0x30
 8004f92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f9a:	1b52      	subs	r2, r2, r5
 8004f9c:	6122      	str	r2, [r4, #16]
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f8cd a000 	str.w	sl, [sp]
 8004fa8:	aa03      	add	r2, sp, #12
 8004faa:	f7ff fedf 	bl	8004d6c <_printf_common>
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d14c      	bne.n	800504c <_printf_i+0x200>
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb6:	b004      	add	sp, #16
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	4834      	ldr	r0, [pc, #208]	; (8005090 <_printf_i+0x244>)
 8004fbe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fc2:	6829      	ldr	r1, [r5, #0]
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fca:	6029      	str	r1, [r5, #0]
 8004fcc:	061d      	lsls	r5, r3, #24
 8004fce:	d514      	bpl.n	8004ffa <_printf_i+0x1ae>
 8004fd0:	07df      	lsls	r7, r3, #31
 8004fd2:	bf44      	itt	mi
 8004fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd8:	6023      	strmi	r3, [r4, #0]
 8004fda:	b91e      	cbnz	r6, 8004fe4 <_printf_i+0x198>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	f023 0320 	bic.w	r3, r3, #32
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	e7af      	b.n	8004f48 <_printf_i+0xfc>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f043 0320 	orr.w	r3, r3, #32
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	2378      	movs	r3, #120	; 0x78
 8004ff2:	4828      	ldr	r0, [pc, #160]	; (8005094 <_printf_i+0x248>)
 8004ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ff8:	e7e3      	b.n	8004fc2 <_printf_i+0x176>
 8004ffa:	0659      	lsls	r1, r3, #25
 8004ffc:	bf48      	it	mi
 8004ffe:	b2b6      	uxthmi	r6, r6
 8005000:	e7e6      	b.n	8004fd0 <_printf_i+0x184>
 8005002:	4615      	mov	r5, r2
 8005004:	e7bb      	b.n	8004f7e <_printf_i+0x132>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	6826      	ldr	r6, [r4, #0]
 800500a:	1d18      	adds	r0, r3, #4
 800500c:	6961      	ldr	r1, [r4, #20]
 800500e:	6028      	str	r0, [r5, #0]
 8005010:	0635      	lsls	r5, r6, #24
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	d501      	bpl.n	800501a <_printf_i+0x1ce>
 8005016:	6019      	str	r1, [r3, #0]
 8005018:	e002      	b.n	8005020 <_printf_i+0x1d4>
 800501a:	0670      	lsls	r0, r6, #25
 800501c:	d5fb      	bpl.n	8005016 <_printf_i+0x1ca>
 800501e:	8019      	strh	r1, [r3, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	4615      	mov	r5, r2
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	e7ba      	b.n	8004f9e <_printf_i+0x152>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	2100      	movs	r1, #0
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	681d      	ldr	r5, [r3, #0]
 8005032:	6862      	ldr	r2, [r4, #4]
 8005034:	4628      	mov	r0, r5
 8005036:	f000 f82f 	bl	8005098 <memchr>
 800503a:	b108      	cbz	r0, 8005040 <_printf_i+0x1f4>
 800503c:	1b40      	subs	r0, r0, r5
 800503e:	6060      	str	r0, [r4, #4]
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	2300      	movs	r3, #0
 8005046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504a:	e7a8      	b.n	8004f9e <_printf_i+0x152>
 800504c:	462a      	mov	r2, r5
 800504e:	4649      	mov	r1, r9
 8005050:	4640      	mov	r0, r8
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	47d0      	blx	sl
 8005056:	3001      	adds	r0, #1
 8005058:	d0ab      	beq.n	8004fb2 <_printf_i+0x166>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	079b      	lsls	r3, r3, #30
 800505e:	d413      	bmi.n	8005088 <_printf_i+0x23c>
 8005060:	68e0      	ldr	r0, [r4, #12]
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	4298      	cmp	r0, r3
 8005066:	bfb8      	it	lt
 8005068:	4618      	movlt	r0, r3
 800506a:	e7a4      	b.n	8004fb6 <_printf_i+0x16a>
 800506c:	2301      	movs	r3, #1
 800506e:	4632      	mov	r2, r6
 8005070:	4649      	mov	r1, r9
 8005072:	4640      	mov	r0, r8
 8005074:	47d0      	blx	sl
 8005076:	3001      	adds	r0, #1
 8005078:	d09b      	beq.n	8004fb2 <_printf_i+0x166>
 800507a:	3501      	adds	r5, #1
 800507c:	68e3      	ldr	r3, [r4, #12]
 800507e:	9903      	ldr	r1, [sp, #12]
 8005080:	1a5b      	subs	r3, r3, r1
 8005082:	42ab      	cmp	r3, r5
 8005084:	dcf2      	bgt.n	800506c <_printf_i+0x220>
 8005086:	e7eb      	b.n	8005060 <_printf_i+0x214>
 8005088:	2500      	movs	r5, #0
 800508a:	f104 0619 	add.w	r6, r4, #25
 800508e:	e7f5      	b.n	800507c <_printf_i+0x230>
 8005090:	080053c5 	.word	0x080053c5
 8005094:	080053d6 	.word	0x080053d6

08005098 <memchr>:
 8005098:	4603      	mov	r3, r0
 800509a:	b510      	push	{r4, lr}
 800509c:	b2c9      	uxtb	r1, r1
 800509e:	4402      	add	r2, r0
 80050a0:	4293      	cmp	r3, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	d101      	bne.n	80050aa <memchr+0x12>
 80050a6:	2000      	movs	r0, #0
 80050a8:	e003      	b.n	80050b2 <memchr+0x1a>
 80050aa:	7804      	ldrb	r4, [r0, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	428c      	cmp	r4, r1
 80050b0:	d1f6      	bne.n	80050a0 <memchr+0x8>
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <memcpy>:
 80050b4:	440a      	add	r2, r1
 80050b6:	4291      	cmp	r1, r2
 80050b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050bc:	d100      	bne.n	80050c0 <memcpy+0xc>
 80050be:	4770      	bx	lr
 80050c0:	b510      	push	{r4, lr}
 80050c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050cc:	d1f9      	bne.n	80050c2 <memcpy+0xe>
 80050ce:	bd10      	pop	{r4, pc}

080050d0 <memmove>:
 80050d0:	4288      	cmp	r0, r1
 80050d2:	b510      	push	{r4, lr}
 80050d4:	eb01 0402 	add.w	r4, r1, r2
 80050d8:	d902      	bls.n	80050e0 <memmove+0x10>
 80050da:	4284      	cmp	r4, r0
 80050dc:	4623      	mov	r3, r4
 80050de:	d807      	bhi.n	80050f0 <memmove+0x20>
 80050e0:	1e43      	subs	r3, r0, #1
 80050e2:	42a1      	cmp	r1, r4
 80050e4:	d008      	beq.n	80050f8 <memmove+0x28>
 80050e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ee:	e7f8      	b.n	80050e2 <memmove+0x12>
 80050f0:	4601      	mov	r1, r0
 80050f2:	4402      	add	r2, r0
 80050f4:	428a      	cmp	r2, r1
 80050f6:	d100      	bne.n	80050fa <memmove+0x2a>
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005102:	e7f7      	b.n	80050f4 <memmove+0x24>

08005104 <_free_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4605      	mov	r5, r0
 8005108:	2900      	cmp	r1, #0
 800510a:	d040      	beq.n	800518e <_free_r+0x8a>
 800510c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005110:	1f0c      	subs	r4, r1, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfb8      	it	lt
 8005116:	18e4      	addlt	r4, r4, r3
 8005118:	f000 f910 	bl	800533c <__malloc_lock>
 800511c:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <_free_r+0x8c>)
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	b933      	cbnz	r3, 8005130 <_free_r+0x2c>
 8005122:	6063      	str	r3, [r4, #4]
 8005124:	6014      	str	r4, [r2, #0]
 8005126:	4628      	mov	r0, r5
 8005128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800512c:	f000 b90c 	b.w	8005348 <__malloc_unlock>
 8005130:	42a3      	cmp	r3, r4
 8005132:	d908      	bls.n	8005146 <_free_r+0x42>
 8005134:	6820      	ldr	r0, [r4, #0]
 8005136:	1821      	adds	r1, r4, r0
 8005138:	428b      	cmp	r3, r1
 800513a:	bf01      	itttt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	e7ed      	b.n	8005122 <_free_r+0x1e>
 8005146:	461a      	mov	r2, r3
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	b10b      	cbz	r3, 8005150 <_free_r+0x4c>
 800514c:	42a3      	cmp	r3, r4
 800514e:	d9fa      	bls.n	8005146 <_free_r+0x42>
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	1850      	adds	r0, r2, r1
 8005154:	42a0      	cmp	r0, r4
 8005156:	d10b      	bne.n	8005170 <_free_r+0x6c>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	4401      	add	r1, r0
 800515c:	1850      	adds	r0, r2, r1
 800515e:	4283      	cmp	r3, r0
 8005160:	6011      	str	r1, [r2, #0]
 8005162:	d1e0      	bne.n	8005126 <_free_r+0x22>
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4401      	add	r1, r0
 800516a:	6011      	str	r1, [r2, #0]
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	e7da      	b.n	8005126 <_free_r+0x22>
 8005170:	d902      	bls.n	8005178 <_free_r+0x74>
 8005172:	230c      	movs	r3, #12
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	e7d6      	b.n	8005126 <_free_r+0x22>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	1821      	adds	r1, r4, r0
 800517c:	428b      	cmp	r3, r1
 800517e:	bf01      	itttt	eq
 8005180:	6819      	ldreq	r1, [r3, #0]
 8005182:	685b      	ldreq	r3, [r3, #4]
 8005184:	1809      	addeq	r1, r1, r0
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	6054      	str	r4, [r2, #4]
 800518c:	e7cb      	b.n	8005126 <_free_r+0x22>
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000514 	.word	0x20000514

08005194 <sbrk_aligned>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	4e0e      	ldr	r6, [pc, #56]	; (80051d0 <sbrk_aligned+0x3c>)
 8005198:	460c      	mov	r4, r1
 800519a:	6831      	ldr	r1, [r6, #0]
 800519c:	4605      	mov	r5, r0
 800519e:	b911      	cbnz	r1, 80051a6 <sbrk_aligned+0x12>
 80051a0:	f000 f8bc 	bl	800531c <_sbrk_r>
 80051a4:	6030      	str	r0, [r6, #0]
 80051a6:	4621      	mov	r1, r4
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 f8b7 	bl	800531c <_sbrk_r>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	d00a      	beq.n	80051c8 <sbrk_aligned+0x34>
 80051b2:	1cc4      	adds	r4, r0, #3
 80051b4:	f024 0403 	bic.w	r4, r4, #3
 80051b8:	42a0      	cmp	r0, r4
 80051ba:	d007      	beq.n	80051cc <sbrk_aligned+0x38>
 80051bc:	1a21      	subs	r1, r4, r0
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 f8ac 	bl	800531c <_sbrk_r>
 80051c4:	3001      	adds	r0, #1
 80051c6:	d101      	bne.n	80051cc <sbrk_aligned+0x38>
 80051c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051cc:	4620      	mov	r0, r4
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	20000518 	.word	0x20000518

080051d4 <_malloc_r>:
 80051d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d8:	1ccd      	adds	r5, r1, #3
 80051da:	f025 0503 	bic.w	r5, r5, #3
 80051de:	3508      	adds	r5, #8
 80051e0:	2d0c      	cmp	r5, #12
 80051e2:	bf38      	it	cc
 80051e4:	250c      	movcc	r5, #12
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	4607      	mov	r7, r0
 80051ea:	db01      	blt.n	80051f0 <_malloc_r+0x1c>
 80051ec:	42a9      	cmp	r1, r5
 80051ee:	d905      	bls.n	80051fc <_malloc_r+0x28>
 80051f0:	230c      	movs	r3, #12
 80051f2:	2600      	movs	r6, #0
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4630      	mov	r0, r6
 80051f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051fc:	4e2e      	ldr	r6, [pc, #184]	; (80052b8 <_malloc_r+0xe4>)
 80051fe:	f000 f89d 	bl	800533c <__malloc_lock>
 8005202:	6833      	ldr	r3, [r6, #0]
 8005204:	461c      	mov	r4, r3
 8005206:	bb34      	cbnz	r4, 8005256 <_malloc_r+0x82>
 8005208:	4629      	mov	r1, r5
 800520a:	4638      	mov	r0, r7
 800520c:	f7ff ffc2 	bl	8005194 <sbrk_aligned>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	4604      	mov	r4, r0
 8005214:	d14d      	bne.n	80052b2 <_malloc_r+0xde>
 8005216:	6834      	ldr	r4, [r6, #0]
 8005218:	4626      	mov	r6, r4
 800521a:	2e00      	cmp	r6, #0
 800521c:	d140      	bne.n	80052a0 <_malloc_r+0xcc>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	4631      	mov	r1, r6
 8005222:	4638      	mov	r0, r7
 8005224:	eb04 0803 	add.w	r8, r4, r3
 8005228:	f000 f878 	bl	800531c <_sbrk_r>
 800522c:	4580      	cmp	r8, r0
 800522e:	d13a      	bne.n	80052a6 <_malloc_r+0xd2>
 8005230:	6821      	ldr	r1, [r4, #0]
 8005232:	3503      	adds	r5, #3
 8005234:	1a6d      	subs	r5, r5, r1
 8005236:	f025 0503 	bic.w	r5, r5, #3
 800523a:	3508      	adds	r5, #8
 800523c:	2d0c      	cmp	r5, #12
 800523e:	bf38      	it	cc
 8005240:	250c      	movcc	r5, #12
 8005242:	4638      	mov	r0, r7
 8005244:	4629      	mov	r1, r5
 8005246:	f7ff ffa5 	bl	8005194 <sbrk_aligned>
 800524a:	3001      	adds	r0, #1
 800524c:	d02b      	beq.n	80052a6 <_malloc_r+0xd2>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	442b      	add	r3, r5
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	e00e      	b.n	8005274 <_malloc_r+0xa0>
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	1b52      	subs	r2, r2, r5
 800525a:	d41e      	bmi.n	800529a <_malloc_r+0xc6>
 800525c:	2a0b      	cmp	r2, #11
 800525e:	d916      	bls.n	800528e <_malloc_r+0xba>
 8005260:	1961      	adds	r1, r4, r5
 8005262:	42a3      	cmp	r3, r4
 8005264:	6025      	str	r5, [r4, #0]
 8005266:	bf18      	it	ne
 8005268:	6059      	strne	r1, [r3, #4]
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	bf08      	it	eq
 800526e:	6031      	streq	r1, [r6, #0]
 8005270:	5162      	str	r2, [r4, r5]
 8005272:	604b      	str	r3, [r1, #4]
 8005274:	4638      	mov	r0, r7
 8005276:	f104 060b 	add.w	r6, r4, #11
 800527a:	f000 f865 	bl	8005348 <__malloc_unlock>
 800527e:	f026 0607 	bic.w	r6, r6, #7
 8005282:	1d23      	adds	r3, r4, #4
 8005284:	1af2      	subs	r2, r6, r3
 8005286:	d0b6      	beq.n	80051f6 <_malloc_r+0x22>
 8005288:	1b9b      	subs	r3, r3, r6
 800528a:	50a3      	str	r3, [r4, r2]
 800528c:	e7b3      	b.n	80051f6 <_malloc_r+0x22>
 800528e:	6862      	ldr	r2, [r4, #4]
 8005290:	42a3      	cmp	r3, r4
 8005292:	bf0c      	ite	eq
 8005294:	6032      	streq	r2, [r6, #0]
 8005296:	605a      	strne	r2, [r3, #4]
 8005298:	e7ec      	b.n	8005274 <_malloc_r+0xa0>
 800529a:	4623      	mov	r3, r4
 800529c:	6864      	ldr	r4, [r4, #4]
 800529e:	e7b2      	b.n	8005206 <_malloc_r+0x32>
 80052a0:	4634      	mov	r4, r6
 80052a2:	6876      	ldr	r6, [r6, #4]
 80052a4:	e7b9      	b.n	800521a <_malloc_r+0x46>
 80052a6:	230c      	movs	r3, #12
 80052a8:	4638      	mov	r0, r7
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	f000 f84c 	bl	8005348 <__malloc_unlock>
 80052b0:	e7a1      	b.n	80051f6 <_malloc_r+0x22>
 80052b2:	6025      	str	r5, [r4, #0]
 80052b4:	e7de      	b.n	8005274 <_malloc_r+0xa0>
 80052b6:	bf00      	nop
 80052b8:	20000514 	.word	0x20000514

080052bc <_realloc_r>:
 80052bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c0:	4680      	mov	r8, r0
 80052c2:	4614      	mov	r4, r2
 80052c4:	460e      	mov	r6, r1
 80052c6:	b921      	cbnz	r1, 80052d2 <_realloc_r+0x16>
 80052c8:	4611      	mov	r1, r2
 80052ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	f7ff bf81 	b.w	80051d4 <_malloc_r>
 80052d2:	b92a      	cbnz	r2, 80052e0 <_realloc_r+0x24>
 80052d4:	f7ff ff16 	bl	8005104 <_free_r>
 80052d8:	4625      	mov	r5, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e0:	f000 f838 	bl	8005354 <_malloc_usable_size_r>
 80052e4:	4284      	cmp	r4, r0
 80052e6:	4607      	mov	r7, r0
 80052e8:	d802      	bhi.n	80052f0 <_realloc_r+0x34>
 80052ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052ee:	d812      	bhi.n	8005316 <_realloc_r+0x5a>
 80052f0:	4621      	mov	r1, r4
 80052f2:	4640      	mov	r0, r8
 80052f4:	f7ff ff6e 	bl	80051d4 <_malloc_r>
 80052f8:	4605      	mov	r5, r0
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d0ed      	beq.n	80052da <_realloc_r+0x1e>
 80052fe:	42bc      	cmp	r4, r7
 8005300:	4622      	mov	r2, r4
 8005302:	4631      	mov	r1, r6
 8005304:	bf28      	it	cs
 8005306:	463a      	movcs	r2, r7
 8005308:	f7ff fed4 	bl	80050b4 <memcpy>
 800530c:	4631      	mov	r1, r6
 800530e:	4640      	mov	r0, r8
 8005310:	f7ff fef8 	bl	8005104 <_free_r>
 8005314:	e7e1      	b.n	80052da <_realloc_r+0x1e>
 8005316:	4635      	mov	r5, r6
 8005318:	e7df      	b.n	80052da <_realloc_r+0x1e>
	...

0800531c <_sbrk_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	2300      	movs	r3, #0
 8005320:	4d05      	ldr	r5, [pc, #20]	; (8005338 <_sbrk_r+0x1c>)
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fb fc0c 	bl	8000b44 <_sbrk>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_sbrk_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_sbrk_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	2000051c 	.word	0x2000051c

0800533c <__malloc_lock>:
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <__malloc_lock+0x8>)
 800533e:	f000 b811 	b.w	8005364 <__retarget_lock_acquire_recursive>
 8005342:	bf00      	nop
 8005344:	20000520 	.word	0x20000520

08005348 <__malloc_unlock>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__malloc_unlock+0x8>)
 800534a:	f000 b80c 	b.w	8005366 <__retarget_lock_release_recursive>
 800534e:	bf00      	nop
 8005350:	20000520 	.word	0x20000520

08005354 <_malloc_usable_size_r>:
 8005354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005358:	1f18      	subs	r0, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfbc      	itt	lt
 800535e:	580b      	ldrlt	r3, [r1, r0]
 8005360:	18c0      	addlt	r0, r0, r3
 8005362:	4770      	bx	lr

08005364 <__retarget_lock_acquire_recursive>:
 8005364:	4770      	bx	lr

08005366 <__retarget_lock_release_recursive>:
 8005366:	4770      	bx	lr

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
